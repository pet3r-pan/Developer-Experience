file_id,file_name,level_0,txt_data
72,72 Status - Richard Ramos.txt,," 
"
72,72 Status - Richard Ramos.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Mostly through unit testing in Embark. I created a new feature for it (not yet released yet) that lets you create a small scaffold for the unit tests you need for any given contract. 
   2. After executing that functionality I can then populate the code for each individual test, and this saves a lot of time. 
   3. Not really using verification tools right now. 
   4. Handle code coverage with solcoverage."
72,72 Status - Richard Ramos.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. Let’s talk about Embark further. What do you see as the most important tools you’re building? 
   2. Easy storage/uploading to Swarm and IPFS. Swarm in particular as IPFS support has been there for a long time. 
      1. Swarm has unique support for DApps and we are building some examples that use state channels and other interesting scaling solutions being developed. 
      2. These sort of example projects (well beyond SimpleStorage) allow us to put ourselves in our users’ shoes and understand what can really be done and where the pain points most often are. 
   1. Embark is planning to integrate the Remix debugger as well. 
      1. Tracking how the value associated with variable changes in the course of running specific transactions etc. is a very important feature for us. 
   1. Embark also has Whisper support, which can still be improved a lot.         
      1. Right now, we try to simplify the experience of using Whisper, but it therefore lacks some flexibility. 
      2. I am not able to specify a private key that links to a public symmetric key. E.g. when working on the gas relay node (a node-js service that subscribes to a whisper symmetric key) and we have to do it manually using the web3js library because the whisper functionality provided by Embark specifies the keys automatically and it is not currently possible to change them. 
   1. What is the gas relay node you mentioned? 
      1. It lets you perform transactions without actually holding Ether. It works by sending a signed message (through Whisper, or p2p, whatever). The signed msg is parsed by nodejs service and it will use the ETH that service has to create that transaction for you and will deduct the amount of required tokens from the account that sent the signed messaged. 
      2. It is ready to be demoed internally, but we need some additional input. 
         1. This solution needs to be included in the app, the desktop app, and perhaps even in the mailserver nodes, so requires a lot of feedback from our different teams."
72,72 Status - Richard Ramos.txt,1. Was anything easier than expected?,"1. Was anything easier than expected? 
   1. Learning solidity and writing your fist smart contract is actually very easy. 
      1. It’s the edge cases  and optimisations that are hard ) 
   1. There are some good best practices that you can follow pretty easily and all the big hacks have been well documented, so researching why they happened is easy and will teach you a lot about writing better and more secure code."
72,72 Status - Richard Ramos.txt,1. What are the best educational resources?,"1. What are the best educational resources? 
   1. Subreddit for ethdev and stack overflow, as always. 
   2. Cryptozombies is cool. 
   3. I learnt SO MUCh about smart contracts from ethernauts. 
   4. I like reading HackerNoon on Medium - there’s some interesting stuff there."
72,72 Status - Richard Ramos.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Embark, obviously! 
      1. Not just a framework for web applications - it lets you create properly decentralised applications. 
      2. You can build an app and then forget about the process of uploading to distributed file stores and setting up a lot of the infrastructure. 
      3. Embark uses web3js-1.0, which is useful because there are a lot improvement encapsulated in that library. I like the style of coding you have to use - promisfying everything, every communication with EVM is done asynchronously. 
   1. VS Code locally and Remix to test contracts. 
      1. Working between them and copy-pasting between can be a real hack though. So, I start on Remix and once I am sure it is working and stable enough, I move it into VS code. 
   1. Sometimes I also use Truffle because I like the debugger they have. 
   2. A lot of tools from the JS ecosystem: node-js, React, webpack."
72,72 Status - Richard Ramos.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. Status!!!  
   2. Plasma cash is really interesting and I follow it closely. Omise Go is an impressive team."
72,72 Status - Richard Ramos.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Working with MetaMask and your local node/test environment is often unstable and connecting it locally can lead to strange issues that are very difficult to debug, as your contracts work fine in tests, but then fail arbitrarily in the browser. 
   2. Not having breakpoints in Solidity is hard. It would be awesome to able to see more clearly the flow of the code and follow things through the stack with some suggestions/explanations. 
   3. Last week, when deploying some contracts through Embark, it just read my contracts as interfaces and so didn’t compile them. 
      1. Not an Embark error - it comes from solc, because there was an error about the “stack being too deep” which happens when you have more than 16 local variables (which is not well documented anywhere that I know about). 
      2. The error behaviour in general is weird and difficult to follow. Better documentation around this area in particular is very much needed. 
   1. Seriously though, most of my frustrations are related to debugging."
72,72 Status - Richard Ramos.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. If I want to build things that are secure AND cheap to use, this is really difficult because we don’t have an existing scaling solution."
72,72 Status - Richard Ramos.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Smart contract developer at Status, also working a lot on Embark. 
   2. Background: I came out of TransUnion and the financial industry. 
   3. I write smart contracts mostly related to SNT use cases: Tribute to Talk smart contracts to control spam a set of contracts related to identity and recovery and to allow users to register their Status ENS domain."
72,72 Status - Richard Ramos.txt,24/05/2018 - Andy,24/05/2018 - Andy
72,72 Status - Richard Ramos.txt,Richard Ramos ,Richard Ramos 
64,64 Quickblocks.io - Jay Rush.txt,," 
"
64,64 Quickblocks.io - Jay Rush.txt,1. Other bounties?,"1. Other bounties? 
   1. The tracing API across the two clients is different and seems ad-hoc. 
      1. A common format for the tracing RPC calls, so tools such as QuickBlocks which rely on the traces would be easier to build. 
      2. I use Parity. I can’t switch to Geth because they don’t share the same interface for the traces."
64,64 Quickblocks.io - Jay Rush.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. QuickBlocks is Ethereum-centric works on Ethereum derived chains. Not Bitcoin. 
   2. Every 15 seconds, QuickBlocks polls for data from the node, it then 
      1. Optimizes the data for quick, later retrieval 
      2. Optionally, stores the data efficiently 
      3. Next time user asks for a block, retrieval is faster (it’s a cache). 
   1. How QuickBlocks started: 
      1. I wanted my own transactions – for my 40 different Ethereum accounts. 
      2. Accounting for movement of funds between all accounts. 
      3. Initially – was pulling data from Etherscan. But why do this through a website? 
   1. Designed to run on a laptop which forces us to stay decentralized 
   2. Applications: 
      1. When you develop smart contracts, you get event data from web3. But this only give you generated events. In-error transactions are not seen because they do not generate events 
      2. Can analyze tokens. 
      3. Can do smart contract monitoring / early warning system 
      4. Should write monitoring code which watches blockchain – if it notices something weird, your contract can react. If the DAO had had events in it. 
   1. Was involved in the DAO. Stunning how little information was available. It took many hours for anyone to notice the hack because no-one was actively watching 
      1. I did some analysis of DAO hack. The actual hack is very obvious in the data on the very first block. 
   1. Would appreciate intros and connections to other projects. 
   2. The code is ready to go. Will be fully open sourced and properly licensed soon. 
   3. QuickBlocks won  2nd place at NYC Consensus 2017 hackathon. 
   4. Thomas Rush founded the Philadelphia Ethereum group. 
      1. We welcome speakers from around the world -- please contact me if interested 
   1. A bounty I would pay for–– 
      1. Kumavis was talking about blockchain data on IPFS or Swarm or another content-addressable distributed storages. 
         1. Could build a blockchain that is a chain of IPFS hashes. 
         2. A marketplace of block data could grow. 
         3. Infura –– could pull the block data from Infura. 
         4. I don’t care about the hexadecimal raw blockchain data – I only want the transaction data fully-parsed – stored on IPFS. 
   1. From an email follow-up (possible bounty I might pay for): 
      1. For a particular range of blocks (preferably in the millions), and using a given list of Ethereum account addresses (one of which will be an ERC20 token, addresses to be specified in the bounty), provide a definitive list of all internal message calls and external transactions along with, at the end of each block, a reconciliation of each address’ ether balances. Additionally, at the end of each day in the block range, provide a list of token holders along with each token holder's token balances. The source of the data must be provided. Using 3rd party websites (such as Etherscan) is permitted, but the source of the data must be disclosed. Preference is data provided directly from a local Ethereum node. 
      2. The given list of address will be interrelated and taken from a prominent ERC20 token system. One of the addresses will be an regular, external account. Another will be an ERC 20 token smart contract. A third will be a multi-sig wallet. The deliverable will be JSON data showing all internal and external transactions for each address. The delivered data must ‘parse’ the transactions to the smart contracts (that is, the transaction’s input data field must be converted from the hexadecimal to “the language of the smart contract”. The deliverable will be a collection of JSON files formatted using a jsonlinter with specific settings which would allow for diffing results with other methods. Performance metrics will be provided as well. The results must be made open source so as to provide the smart contract auditing community with a ‘gold standard’ of community vetted results to be used for testing/verifying new or existing off-chain auditing tools/software."
64,64 Quickblocks.io - Jay Rush.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Biggest concern: The idea of decentralization is being lost 
      1. People are developing applications that are highly centralized, because it’s practical. Many projects promise they will one day decentralize, but I’m concerned that this will get increasingly more difficult as the technical debt grows. Many projects are deeply relient on highly centralized infrastructure (Infura, EtherScan). 
   1. Concern: The law of unintended consequences: 
      1. Identification Systems 
         1. Ease of use is very enticing 
         2. Blockchain based identity is easily applicable for government use 
         3. But...what happens when a “bad-actor” government or an oppressive regime requires citizens to all have unforgeable identity. How will innocent people who are legitimately against the regime hide themselves? 
         4. I wrote about this here. 
      1. Reputation Systems 
         1. If we move to a world where everyone has an immutable reputation--by definition half of the population will always have a worse reputation than the other half. Due to the nature of feedback loops, this feels like a bad idea. 
   1. Concern: The data is too difficult to use         
      1. Per Account Lists of Transactions: 
         1. Accounting for both incoming and outgoing external transactions is easy. Just scan to and from fields looking for a given address. 
         2. Accounting for outgoing message calls (Etherscan calls these internal transactions) is also pretty easy. The smart contract itself initiated the message call -- send an event. 
         3. Accounting for incoming internal transactions is very difficult. One must look at every message call generated by the entire system to fully account for all incoming internal transactions (witness air drops). I wrote about this here. 
      1. Bloom filters: 
         1. Every transaction receipt has a logsBloom field. These are ‘rolled up’ into the block level. Blocks also have a logsBloom field. 
         2. As the number of transactions per block increases (as it has done), the block-level bloom filters are getting more and more saturated. As they become more saturated, they will tend to report more false positives. 
         3. At the receipt level, the logsBloom are probably under-utilized (that is, they could hold more information without a large increase in false positive rate). 
         4. These two factors tend to make the logsBloom field both less effective than it could be and at the same time require more storage than they need to. 
         5. I wrote about this here. 
         6. Furthermore, the bloom filters exclude certain ‘addresses’ that, if they were included, would allow us to implement an RPC entry point called ‘eth_listAddressesInBlock(bn)’. This would be a compromise between a full index of addresses per block and re-scanning every trace for addresses if one wanted to build a list of transactions per address (which one would want to do if one wanted to audit a smart contract for example). 
         7. What QuickBlocks does: Do not store either the block level nore the receipt level blooms from the raw data. Instead, at each block, build an enhanced bloom filter which (1) includes every address involved in the block including those used as ‘data’ for internal transactions (ERC20 transfers and air drops), fill the bloom filters to a predetermined level (configurable, defaults to 200 bits), and when one bloom fills up, create another one at the same block. Result: significantly less storage devoted to blooms, consistent level of false positives resulting in less overall searching, ability to quickly answer ‘is this address used anywhere in this block’ with perfect fidelity. 
      1. Inefficiencies 
         1. Sept-Oct 2016 DDos transactions make requesting traces astronomically slow. I wrote about this here and here. Suggestion: easier way to identify (and skip over) dDos transactions. 
         2. When you use ‘eth_getTransactionByHash’, the RPC does not return the transaction receipt. In order to get the receipt, you must later call ‘eth_getTransactionReceipt’. You need the receipt to understand if the transaction was ended in failure. Twice as many calls to RPC than needed. Suggestion: staple the receipt to the transaction with an optional parameter to eth_getTransaction. 
      1. Transaction Error Codes prior to Byzantium Fork: 
         1. After the Byzantium Fork, getting the error status of a transaction is easy. If the ‘status’ field of the receipt is zero, then the transaction ended in error [There may be some edge cases here, we are reviewing this claim]. 
         2. Prior to Byzantium, one had to search every transaction trace looking for a trace that contains the word ‘error’. 
         3. If one is doing historical analysis prior to the Byzantium fork, or trying to gather lists of transactions per account, one has to look at every trace. 
         4. Core developers seem more focused on what’s happening at the front of the chain (understandably) rather than getting the data out of the chain. Even though getting the data out is as important. 
         5. Suggestion: It would be useful to include a status field in pre-byzantium receipts at the option of the caller of the RPC. 
      1. The need for ABI definitions 
         1. Get Solidity to make the ABI available, because it makes analysis simpler. 
         2. Get people to understand the importance of providing ABIs."
64,64 Quickblocks.io - Jay Rush.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. QuickBlocks works with the Ethereum blockchain from the data side. How does one get usable, fast data out of the blockchain (as opposed to putting into the blockchain with a smart contract for example). Our work is fully decentralized (gets all of its data directly and only from the node) We take a bottom-up approach. We run for particular accounts or groups of account, not necessarily chain-wide. We retrieve and store only what the end user asks for."
64,64 Quickblocks.io - Jay Rush.txt,1/16/2018 - Sina & Robbie.,1/16/2018 - Sina & Robbie.
64,64 Quickblocks.io - Jay Rush.txt,Jay Rush,Jay Rush
63,63 Quantstamp - Richard Ma & Don Ho.txt,," 
"
63,63 Quantstamp - Richard Ma & Don Ho.txt,1. Other bounties?,"1. Other bounties? 
   1. IDEs: 
      1. Remix is probably the best one. No support for quick-fixes (like you have in IDEs). 
      2. Better support for projects. 
         1. Manage dependencies. 
      1. Code coverage tools, to see how good your tests are. Integration would be good. 
         1. Existing tool: run this as a separate command & get results in a web ui. 
            1. Solidity-coverage. 
      1. Has some static analysis tools – more would be better. 
      2. Notes: 
         1. Web UI is weird. We don’t use it, because of lack of project support. 
            1. We use sublime text / IntelliJ. 
         1. Better syntax coloring like Remix would be good. 
            1. Bounty for solidity support in Vim and/or Sublime. 
   1. Debugging 
      1. Half the time is always spent debugging. 
      2. Debugging with truffle & node-js is horrible. 
         1. Have to debug the JS and contract parts separately. 
            1. Different environments. 
      1. We do iterative development somewhat test-driven We’re aiming for very good coverage. 
      2. What I’m envisioning: putting a breakpoint into the smart contract or Javascript. Ideally, one breakpoint can step through all code. 
   1. Testrpc 
      1. Usable blockchain explorer for testrpc – to explore local data. 
      2. Would be great for learning as well. 
   1. Streamlining code export for Etherscan verification during contract deployment 
      1. Typically, you have to flatten all your imported contracts, it’s a pain in the ass. 
      2. Would be good to have a place to do this. Assures that the version is consistent. 
   1. Sometimes you need update your contract – 
      1. Tools to evolve your old contract into your new one. Only deploy the additions. 
      2. We had this issue in their ICO: we wanted to change the end-date for the ICO. 
      3. There’s a valuable data in the old contract. 
      4. Could run into problems with consistency. 
      5. More than “library driven development”, would be good to have tools that generate this for you. 
      6. My vision: refactorings like in Eclipse pick refactorings (e.g. can split the class, etc). This would tie into the IDE. 
   1. Developer education programs 
      1. Lesson plans. Get each company to do one session 
      2. We went to a meetup for people who like to learn Ethereum. It was way oversubscribed. 
      3. Could be good for recruiting / onboarding. 
   1. We’re putting together a “minimum security standard” after interviewing all auditing teams. 
      1. Existing auditing tools for Solidity are poor. 
      2. Read our Solidity analyzer: https://github.com/quantstamp/solidity-analyzer "
63,63 Quantstamp - Richard Ma & Don Ho.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. Running the client: 
      1. Language support across different clients is problematic. We’ve been focused on the software verification libraries for now."
63,63 Quantstamp - Richard Ma & Don Ho.txt,1. Who are the other people you think we should talk to?,"1. Who are the other people you think we should talk to? 
   1. NuCypher. 
   2. Keep network."
63,63 Quantstamp - Richard Ma & Don Ho.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Focused on the security aspect of Ethereum. 3 main challenges for going mainstream: 
      1. 1) security, 2) scalability, 3) usability. 
   1. Too many projects audit talent is in low supply  
      1. System to allow anyone to get a high-quality audit for teams. 
   1. Components: 
      1. Payment smart contract: deals w upgrades governance 
      2. Verification node: software to verify smart contracts 
      3. Software library: formal verification, static analysis checks"
63,63 Quantstamp - Richard Ma & Don Ho.txt,Richard Ma & Don Ho,Richard Ma & Don Ho
63,63 Quantstamp - Richard Ma & Don Ho.txt,Sina on 1/11/2018.,Sina on 1/11/2018.
12,12 Consensys - Nick Dodson.txt,," 
"
12,12 Consensys - Nick Dodson.txt,1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. Mythril will be useful when in full bloom - need more oversight on contracts in general"
12,12 Consensys - Nick Dodson.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. Tell us more about TCRs and DAOs? 
   2. There are many groups that need it for protocol or token 
   3. Rendered basic systems and services that we really need 
      1. Notifications - if you’re in governing body, you need to be notified via normal devices to conduct governance 
         1. Working on notification systems for TCR’s, multi-sigs, Aragon DAO’s 
         2. Scraping chain data and issuing emails - databasing and emailing. Should be easy to do. 
      1. Verifiable chat system - most governance is about the conversation.  
         1. Low level real time, high performance, contractually restricted chat. This is centralized, but data storage is decentralized and data content is verifiable. 
         2. Can be encrypted using RSA 
         3. Will spin out live chat for ecosystem - enhance dapps with real time live chat 
      1. Data / Statistical Analysis - Alethio (deep rich blockchain analysis system) 
         1. Lots of data coming in for governing structures - no reason to load from Infura 
         2. Reporting and data analysis on governance structures 
            1. What is participation like? 
            2. How well is a TCR performing? 
      1. Off-Chain verifiable polling - votes and data are verifiable 
         1. Coordination is only attack vector.  
         2. Final tally is rendered sum of onchain and offchain sum 
   1. How can off-chain channels be made into a near-front end experience? 
      1. How are API’s made in a very simple manner"
12,12 Consensys - Nick Dodson.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Solidity Compiler  
      1. The C version is very fast - but if you run the emscripten version, it’s painfully slow.  In transpiling process of C++ version, it drops down performance. The JS transpile needs to be improved.  
         1. Solc compiler slows down development time. Ideal to stay in local JS (and not have to go back to solc), have it compiled super fast inline using a tagged template literal or something like it (using require(“solc-inline”) or equivalent).  
         2. Could write `solidity` in backticks and have it compiled all in same file.  
         3. Would make experimentation and testing much easier and faster. Could potentially provide some specs/API for this. Will provide further specs via email. 
         4. Trying to build complex systems with 20 contracts and everytime need to wait 20 minutes 
   1. TestRPC + Geth Client 
      1. Not well maintained - ask Truffle team. 
      2. People are trying to get away from it - people want to test on GETH / Parity and use them to run their own Geth nodes, but it’s a pain in the ass. 
         1. Was working on Geth library that allowed you to run in Mac / PC with JS 
         2. Used Geth like Testrpc - allowed you to test contract codes against all clients (Geth / RPC / Parity) 
            1. Never finished, but definitely needed. 
            2. If you’re running contract tests locally, TestRPC is only ETH JS VM. This is, however, not the VM most of miners are using, and that can be cause for concern. 
         1. Can we make testing contracts against Geth easier? NodeJS Wrapper against Geth (most people are using Truffle - would be happy if Truffle had a module for this) 
            1. Truffle uses Ganache which is ETH JS VM - this isn’t used in production. 
            2. Truffle involves hassle of having to download run and configure GETH  
               1. Maybe a wrapper or easy install script - run Geth like TestRPC"
12,12 Consensys - Nick Dodson.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Data verifiability problem - nobody is going to another source of data 
   2. Run your own local system and test whatever is run by Infura vs. your system -- should be able to test this against your own local Dapp 
      1. Not a lot of utility to compare -- would be great to have library and testing script  
      2. Protection mechanism to keep an eye on infura -- ecosystem driven thinking to reduce amount of trust to test what they are giving us 
         1. Exchanges should be running internal nodes to make sure getting the right data - need something to compare their node to Infura 
   1. Build a Dual Provider. Make a little library, connect your own provider and Infura, and then compare that both are behaving the same. Verify yourself 
   2. ETH.JS Stuff - small items 
      1. Websocket support  
      2. Moving ABI module to Richard’s module"
12,12 Consensys - Nick Dodson.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Working on experimental infrastructure. ARES, GovernX. 
      1. Building off-chain stuff - in order to conduct governance in organizational structures, most of the work is off-chain. 
      2. Will also be doing on-chain governance, where they build DAPPs for ICO’s 
      3. Infrastructure level stuff: infura."
12,12 Consensys - Nick Dodson.txt,4/6/2018 - Robbie & Andy,4/6/2018 - Robbie & Andy
12,12 Consensys - Nick Dodson.txt,Nick Dodson,Nick Dodson
26,26 EthVigil - Swaroop.txt,," 
"
26,26 EthVigil - Swaroop.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Basic unit tests, integration testing. So much of the codebase that keeps changing so difficult to stay on top of testing, but have must stricter tests on mainnet. At the moment don’t have external auditing."
26,26 EthVigil - Swaroop.txt,1. What are the best educational resources?,"1. What are the best educational resources? 
   1. Barely anything with tutorials when they got started. He gave his cofounder a crash course in a couple days, and then his cofounder went off and did a self-study. Some good videos were out there (Udemy?)  that they bought. But the best thing is to do it on your own, especially because they are operating on a lower level. 
   2. Recommend to go to Ethereum main’s website but not friendly enough for beginner to intermediate developer. But this is a paradigm change, completely different way of doing things. Have to educate the developers."
26,26 EthVigil - Swaroop.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Mostly custom tools. Started with web3, started with Truffle but was running into a lot trouble using them so rolled their own."
26,26 EthVigil - Swaroop.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. We built a platform to help people use blockchain but people don’t know what they can build on blockchain. We think Digital Assets are the next big thing, CryptoKitties are the first step in showing the world what they can do. 
   2. They are setting up their company in the old way, but can do stuff on Ethereum. Writing stock on the blockchain could be a gamechanger. Document signing. 
   3. I hope the scaling issue will be solved soon."
26,26 EthVigil - Swaroop.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. Web3 is a library to make it easier for a lot of developers in the space. But we use JSON RPC calls directly, don’t want to abstract on top of this so don’t want to get anything in between this. Had some issues with web3py. 
   2. Recommend that our customers use Truffle, Ganache, etc."
26,26 EthVigil - Swaroop.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. The first thing I built was a tool that looks for any ERC20 transfer automatically. Built in one month. Not just writing code but understanding the Ethereum paradigm. But I’m not a finance guy or trader so wasn’t super excited about this. 
   2. Current error codes are not that useful. Getting a response back saying 0x from JSON RPC for some very weird reasons, but doesn’t handle errors in a great way. Better error codes. Wanted to jokingly call themselve the 0x company but it was already taken. 
   3. Lack of documentation, but it has improved a lot.. 
   4. Dealing with the clients themselves, not using Infura. When you use clients directly and bypass Infura it can be painful to get things running. 
   5. There’s no flow at all really. I would randomly learn a bunch of things but nothing flowed together. I bought Ether but didn’t need it to actually build on the blockchain. Ropsten was down all the time. Did our stuff on other Testnets.  
   6. Maybe we need to have a flow of learning the fundamentals. It’s all out there but it’s not connected."
26,26 EthVigil - Swaroop.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. We are building EthVigil an API gateway to to help developers build apps on blockchain without worrying about nodes or RPC calls. We take any smart contract and turn it into a REST interface. Use a modified ERC20 token (and a hacked Remix IDE). So you don’t have to worry about encoding it, filling out strings, etc. Deploy it to a testnet. Even take care of issues that could occur on the blockchain. 
   2. Once it’s deployed it’s like a Swagger API, make all the Get calls, etc. Any web developer can see how it works. Setting up private keys, all that signing, all that stuff is taken care of (custodian feature). All you need is an API key, abstracts away some of the pain. 
   3. Demoed minting some tokens. EthVigil goes deeper and will investigate if transactions will fail. Any web developer can use it upfront. Can add integrations, their system monitors the whole blockchain for events, can get notifications on Slack/email."
26,26 EthVigil - Swaroop.txt,29/5/2018 - Mitch,29/5/2018 - Mitch
26,26 EthVigil - Swaroop.txt,Swaroop,Swaroop
2,2 0x - Leo Logvinov.txt,," 
"
2,2 0x - Leo Logvinov.txt,1. Other bounties?,"1. Other bounties? 
   1. There is a limit on local variable numbers (have a limit of 16, which influences how you write the code). 
      1. Solidity doesn’t push variables down the stack, so you can’t go more than 16 deep. This is an implementation detail in current compiler that needs to be improved. 
   1. ABIv2 - experimental feature for half a year or so - return structures and bus structures as parameters. 0x are planning to use it to make their code easier to audit especially. 
      1. C++ devs needed"
2,2 0x - Leo Logvinov.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. What has your experience been like working on EIPS?  
      1. Working on EIP 712 - signing structured and typed data  
      2. Quite hard with monetary prospects and no established legislation process - need better ways of governing and enforcing the process. 
         1. Really helped to have everyone in one room at ETHDenver and align on angles of attack. 
         2. Room at ETHDenver from commenting on a thread in GH. Started unstructured and moved into structured discussion by defining the interface, which helped identify all the different parties’ motivations. This revealed some inertia on some teams’ behalf, which was interesting to see. 
         3. Lot of discussions about metadata (of tokens, which is also important for other parts of tokens) 
         4. GH PRs are one single wall of text and the comments need to be better moderated, especially for trolls or tangential discussions/ideas (especially tangential ideas need to be collapsed). 
         5. Creators need to moderate/create a TLDR section to help people better and more easily grasp what they are working on.  
   1. Solidity code coverage - how does that work? 
      1. Before each line calling eval, and modifying Eth and ganache code to read the events, much below the current block gas limit and working through everything that comes through. 
      2. Take debug transaction with list of opcodes. Also have the source maps, which map back from opcodes to lines of solidity code, and can use that the work backwards from opcodes to understand exactly which line used how much gas. 
      3. How do you get the trace after each tx?  
         1. We wrote our own provider, whenever call to eth_sendTransaction gone through provider it sends it and then gets the trace. 
      1. Calls don’t have traces though, so need to do a snapshot and then send the call as a tx, which gives you the trace back and then you can look at what happened in the call. 
      2. Did look at other tools, but felt the performance and reliability of those tools just kinda sucked. 
   1. Can you tell us more about Event Watching?  
      1. Lacking good open source project[a] 
      2. People don’t have stateful nodes, you need to handle events client side 
      3. Ethereum-js blockstream enables us to use stateless nodes after installing all filters. Still not a part of web3. 
         1. Working on something called order-watcher: track when the order becomes invalid. Which happens when the user manipulates things. You can validate reactively by watching for events, but you want to actually watch balance changes and events are just an imperfect proxy for this. 
         2. People can mint and burn tokens and change balance without emitting events. 
         3. Want to track changes in balances, not events. balanceOf() is view function that returns the balance, so we want to track the result of calling that. 
         4. Might be inefficient to look at that directly, or we can register callbacks and recompute only when the state used by that function changes. 
         5. But how do we know when state changes? 
         6. Cannot rely on solidity, but can run function, get trace, see which storage slots the function is reading, and then you for sure know that this function will only change its value when one of those storage slots changes. 
         7. Use Patricia tries somehow to watch these storage slots and state changes - allow you to watch efficiently changes on view and pure functions. 
         8. Check out EIP 781: https://github.com/ethereum/EIPs/issues/781  
   1. Can you tell us more about ABI gen for statically typed contracts? 
      1. Contracts need to be checked at compile times to ensure parameters etc (strong instead of number or something like that) and being statically typed is much easier to check this. 
      2. Inspired by geth tooling, and there are also some JS ones (salt-size etc) but were all very opinionated and made all sorts of assumptions about how you wanted to use your contracts. 
      3. With 0x tool: Consensys is using it, Sybil (journalism tools, also with typescript contracts). 
      4. Using ethers.js for backend of contracts due to issues with web3 versions (classic). 
   1. Best ideas to have in a debugger? 
      1. Not writing solidity actively at the moment and I haven’t used one yet because it is such a high level tool (haha). 
      2. I feel that this is quite a long way away right now. 
      3. Need bytecode, source code, source maps, traces, interruptable VM etc. 
   1. Can you tell us more about signing data in Ethereum? 
      1. Arbitrary string that people were supposed to sign, but then people figured that you could use it to send ETH, hence the weird prefix that got implemented - not an EIP, it is just a bugfix. 
      2. If there is a way to display user data and get them to understand the transaction fully, then they would surely not sign. Prefix doesn’t solve anything, it just postpones the problem."
2,2 0x - Leo Logvinov.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Event watching - unreliable, no support for backfills etc. 
   2. Build tool for statically typed contract (ABI gen that generates contracts), build out the statically typed libraries 
   3. Negative experience with web3js team - unresponsive. 
   4. Frustrated with truffle because it is hard to contribute with so many packages these days. 
      1. Hard to debug and understand it all - so needed a smaller truffle for the specific use cases. 
      2. Need to standardise their artifact format (currently in talks about it). 
   1. Solidity coverage tool: built at hackathon (at least the profiler which is not super useful), standardise on artifacts format so that it works across tools. 
      1. Which line of solidity is covered by tests? 
   1. EIP712 - standardised signing for structured data, also helped finalise 721 at ETHDenver. 
   2. Solidity plugin for IntelliJ IDE 
      1. One did not exist at the time. Did not have too much stuff in it really: simple formatting, definitions, highlighting. Not “a super interesting” project, but has 36 000 users (some duplicates). 
   1. VMs 
      1. Been wanting to speed up tests recently. Bottleneck is code execution in Ganache VM (90%). We want to get down to 1-10s test runs. 
      2. GAS PRICES ARE NOT THE SAME!!!! Arghhhhh! 
      3. We need JIT compilation in more performant language (currently just executed in JS). 
      4. Project called EthJIT VM, transpiles to LLL, then optimizes contract so that it is precompiled and then runs much faster. 
         1. Would be great to see the integrated in ganache (snapshots and time travel make this a nice tool than geth to use currently). 
         2. Even better to have pluggable VMs, have spoken to the Foundation about this too."
2,2 0x - Leo Logvinov.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. Prettier type plugin for solidity. I don’t have time to write it but Prettier has a good API."
2,2 0x - Leo Logvinov.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Started in blockchain 2 years ago in Berlin, working on Ethereum devtools, building solidity plugin for IntelliJ, built by him and an Australian. 
   2. Working on truffle, did some PRs, improving speed, usability, error handling. 
   3. Started working on 0x, primary role: devtools team. "
2,2 0x - Leo Logvinov.txt,"4/24/2018 - Robbie, Parker, Andy","4/24/2018 - Robbie, Parker, Andy"
2,2 0x - Leo Logvinov.txt,Leo Logvinov,Leo Logvinov
2,2 0x - Leo Logvinov.txt,[a]WE can do more research here -- this is a big bounty,[a]WE can do more research here -- this is a big bounty
67,67 Scott Wright.txt,," 
"
67,67 Scott Wright.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Automated testing? 
   2. There’s an IDE that I’ve used - Remix. Provides an interaction with Geth, create test accounts, and then I use that UI to launch a test application on testnet, play with it, see if it works…  
   3. I WANT an automated test suite, but nothing out there right now. "
67,67 Scott Wright.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Remix 
   2. Geth obviously 
   3. SolC for compiling 
   4. Yarn is (apparently) standard now for js 
   5. If not already mentioned, are there any libraries you rely on regularly? 
      1. Web3"
67,67 Scott Wright.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. Vyper!  
   2. Have big hopes for truffle - has a lot of the build suite things that I need. 
   3. Another thing that’s missing right now is a better IDE, solidity based coding environment right there, so my workflow is that in terminal etc."
67,67 Scott Wright.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Hasn’t happened across too much yet! Been working in solidity and I find it pretty easy. But how scoping works is confusing.  
   2. There was a situation where I was trying to refer back to something and it was doing something weird and I had to dig and find out that behaviour of memory depends on what SORT of memory its being stored to.  
   3. So, if you get a lot of JS developers, you need to explain how scoping works in JS and how solidity is different in that sense.  
      1. How much of those memory problems are a thing with solidity, or the EVM? 
   1. A linter would be very useful!"
67,67 Scott Wright.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. Automated testing - I want a testing suite, a whole tool that is entirely focussed TDD. The work really corresponds to that. Clientless work with many test iterations. 
   2. A lot of uncertainty around how gas works.  
      1. What is it exactly, how does it get used, how do you optimize for it?  
      2. The basic idea is fine, but the details when you’re building stuff are very hard to find out 
      3. What are the best design patterns for dealing with it, the strategies? 
   1. Also, you come up against issues when there’s a withdrawal attack vector, where you try to send ether to them, and there’s some sort of callback function and etc. 
   2. There’s a design pattern that works around that, but my level of knowledge is just that someone TOLD me that, but what other things do I need to be aware of? How can I find out more? These are open questions for me right now. 
   3. Would love a list of things where I can go through check marks and say “OK, I’ve followed x and y” and I’ve watched out for the following 23 possible issues / attacks."
67,67 Scott Wright.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. Would have been that initial setup of the development environment, and beginning to build a mental model of what’s going on. Just the setup.  
1. What was the hardest part about learning to develop with Ethereum? 
   1. First thing is a soft thing - understanding the difference between a distributed application vs a centralized server application. I’ve taught people some basic blockchain concepts - it doesn’t always make sense to people right away. 
   2. The action of calling methods externally on a contract - I kind of understand how that works, and then wait a cycle. There’s a bunch of haziness around how calling methods works though. 
   3. And then the exact amount/ability that a method has to change a contract - how much can it do? What are patterns where I could manipulate and kill the contract? 
   4. Awesome thing - I love working with apps where there’s no account or login, it just works."
67,67 Scott Wright.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Just simple stuff - proofs of concept. 
   2. Working through course material 
   3. Building a token and a very minor escrow app 
   4. Timed auction. "
67,67 Scott Wright.txt,Scott Wright  ,Scott Wright  
34,34 GridPlus - Alex Miller.txt,," 
 
 
"
34,34 GridPlus - Alex Miller.txt,1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. Hasn’t had any novel code that needed security audits before 
   2. There are common patterns that could be detected. E.g. reentrancy attacks, etc"
34,34 GridPlus - Alex Miller.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Use Mocha plain old truffle tests. 
   2. I don’t do contract unit tests."
34,34 GridPlus - Alex Miller.txt,1. Other bounties?,"1. Other bounties? 
   1. Collecting logs & events used to be hard. Web3 1.0 made this a lot easier. It is quite good, even-though it’s in beta. 
   2. People should be using websocket calls more. Maybe more education around this. Serious efficiency gains to be had here."
34,34 GridPlus - Alex Miller.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Truffle 
   2. Configure parity instance https://github.com/GridPlus/trustless-relay/blob/master/parity/boot.js 
      1. Infrastructure tool to spin up local instances of Parity or Geth"
34,34 GridPlus - Alex Miller.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Biggest pain points: a place where all these tools get published that isn’t just Github. 
   2. Is the solution to hire / pay people to manage a wiki? 
   3. Maybe a better solution would be to fork NpmJS.com, source that data, curate that list for Ethereum dev tools 
      1. Would check that deployment to node packages happened & EthereumPM setup correctly. 
      2. Can see how many people have downloaded. It’s a good method of discovery. 
      3. Could have different subsections e.g. Merkle tools, hashing tools, ABI encoders. 
         1. I use Ethereumjs-util – but I know there are others. 
   1. What about EthPM? 
      1. It’s only on Ropsten. What is the link between EthPM and the actual blockchain? I like that there is an actual package manager. Good thing is that you can install packages with Truffle.  
      2. I don’t get where the data is stored –– is it on IPFS? Is it linked to Ropsten? Why?! 
      3. Still, it’s great. But recently it stopped working. 
      4. I wanted to deploy a trustless-relay – but had issues. 
   1. Could make one of these Awesome-Ethereum Github repos? 
   2. Also knowing what you need to discover is important: wiki would help here."
34,34 GridPlus - Alex Miller.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. Truffle 
      1. The fact that you don’t really get errors, or more specifically stack traces. Whenever you run into an error, it gives you a line number[c]. 
         1. In JS files. 
   1. How to match up hashes of data with what you get in Solidity. 
      1. e.g. When you’re tightly packing arguments, they need to be left-padded to 32 bytes. But not always, e.g. different for addresses and numbers. 
   1. A little app like this for Solidity would be amazing, which gives you all the Solidity hashes: https://emn178.github.io/online-tools/md4.html 
            1. Emulate what’s happening in Solidity in the browser."
34,34 GridPlus - Alex Miller.txt,1. Who are the other people you think we should talk to?,"1. Who are the other people you think we should talk to? 
   1. Sean Pollock. 
   2. Mark Beylin. 
   3. Goncalo (from Consensys audit) -> has a great library for dealing with bytes (byteslib)."
34,34 GridPlus - Alex Miller.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Started ETH development back in 2015. Shortly after launch there was nothing. I remember booting up private chains from shell scripts. We’ve come a long way in terms of dev tools. Problem isn’t that there aren’t tools, but not knowing where to look. 
   2. The problem here is sourcing a centralized repository for information[a][b]. 
      1. EF website doesn’t do that. 
      2. Wouldn’t know where to point people from intro documentation. 
      3. Truffle & Solidity have good docs e.g."
34,34 GridPlus - Alex Miller.txt,2/1/2018 - Sina & Robbie.,2/1/2018 - Sina & Robbie.
34,34 GridPlus - Alex Miller.txt,Alex Miller ,Alex Miller 
34,34 GridPlus - Alex Miller.txt,[a]Another +1 on centralized source of truth for info,[a]Another +1 on centralized source of truth for info
34,34 GridPlus - Alex Miller.txt,[b]Review thoughts on forking NPM.JS,[b]Review thoughts on forking NPM.JS
34,34 GridPlus - Alex Miller.txt,[c]Stack traces in Truffle and idea for Solidity which gives you all Solidity hashes -- both nice,[c]Stack traces in Truffle and idea for Solidity which gives you all Solidity hashes -- both nice
36,36 Integral - James Prestwich.txt,," 
"
36,36 Integral - James Prestwich.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Wrote tests with James on Integral stuff"
36,36 Integral - James Prestwich.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. Proof of Stake  
   2. Getting someone slashed decreases supply, increasing value of ETH. Does this mean every ETH holder is incentivized to getting stakers slashed? 
   3. In the Blockchain/cryptography in general, there is attack-defense asymmetry with defence being stronger. As soon as you move towards servers, attack-defence asymmetry leans towards the attacker."
36,36 Integral - James Prestwich.txt,1. What are the best educational resources?,"1. What are the best educational resources? 
   1. Did all the Ethereum tutorials -- set up the token 
   2. Integral: written in Solidity with Truffle -- derivatives platform"
36,36 Integral - James Prestwich.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Python ETH Library - ABI Parsing expects events to be in two different formats neither of which you expect - ecosystem standardizes on hex strings  
   2. RLP is a hot mess - why use a non-standard serialization format for everything 
   3. Ensures nobody understands what’s going on and things aren’t readable - serialization format for everything ETH - includes transaction data 
   4. As a human - can’t reason very well about those blobs or what those structures will have 
   5. Developing contracts on Bitcoin first - Solidity, Script, Snark tidbits, IVY (compiles to bitcoin script)"
36,36 Integral - James Prestwich.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Solidity is the wrong tool. Imperative language and everything on blockchain is declarative. Solidity should be declarative.  
   2. IVY is best example of for blockchain language. On blockchain control logic is impossible: blockchain never decides how or when a function is called. No such thing as on-chain control logic: off-chain controls how humans can manipulate state. 
   3. All lies: completely wrong tool for blockchain. This is what causes render mistakes: trying to write on-chain what happens, but should be defining what can/can not happen (Bitcoin: whether you can or cannot spend a UTXO).  
   4. Require statements example of Solidity becoming declarative language is not a good way to fix this and modifiers are an anti-pattern: 
      1. Either happens as atomic single unit at will of human or it doesn’t? 
   1. Configurable constraints on-chain: we should still define them as constraints -- no math happens on-chain (not actually adding 2+2 on chain).  
   2. Weird that tests are control logic for your code. Control logic is whether human makes a transaction.  
      1. Idea that we are writing things that add variables on-chain is wrong. 
      2. Reality of state, state root and blockheader is what causes a lot of the bugs  
   1. IVY: really heavy modification to write on ETH -- more easy to write languages for the EVM. A declarative language for EVM. Tooling for Solidity only recently got workable. 
   2. Onchain systems should define constraints around what cser can / cannot do -- they are the control logic of the program. 
   3. Cross chain contracts for integral is what users can and cannot do at what time and on what chain (declarative programming again).  
   4. Checks, Effect, Interactions to write code. We need more good programming to prevent race conditions, re-entrancy, double spend etc:   
      1. Transactions happen atomically, cant have overlap in state changes 
      2. Can shoe horn ETH into this by using Require / IF Statements (??) 
      3. Avoid modifiers as a pattern 
      4. That’s always the effect of the Solidity you’re writing - puts more pressure on the client  
         1. Makes testing more intuitive -- specified tests you’re testing against 
   1. Very interesting miner attack on EtherDelta: they front-run make tx throw collect the fees. 
   2. The problem with Solidity isn’t expressiveness it is shared state. Other transactions can get ahead of you and modify state that you rely on."
36,36 Integral - James Prestwich.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Simple contracts to manage cross-chain swaps and contracts."
36,36 Integral - James Prestwich.txt,2/13/2018 ,2/13/2018 
36,36 Integral - James Prestwich.txt,James Prestwich,James Prestwich
55,55 Parity - Fredrik Harrysson.txt,," 
"
55,55 Parity - Fredrik Harrysson.txt,1. Are there any other questions we should be asking?,"1. Are there any other questions we should be asking? 
   1. How do you codify the differences between a traditional app and a blockchain app. E.g. Waiting for transaction confirmations. How do you codify it to make a good UX?"
55,55 Parity - Fredrik Harrysson.txt,1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. Internal audits. 
   2. We are introducing a checklist system for deployments. 
      1. Pre-, during, and post-deployment 
   1. Doing external audits on everything now. Even auditing Rust code right now. 
   2. External audits are great, but the average developer cannot afford that 
   3. ***Teams have grown super fast without having time to document company knowledge so that all engineers know it*** (documentation includes process as well as code)"
55,55 Parity - Fredrik Harrysson.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Use truffle internally for testing some contracts 
   2. Also write own own testing tools using Rust because we don’t like javascript"
55,55 Parity - Fredrik Harrysson.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Everything, even in dev environment is containerized 
   2. IPFS, React, Parity, ParityJS 
   3. Have some internal tools that generate javascript ABI’s from the smart contract spec 
   4. Have an internal CLI for deployment 
      1. Deploys the contracts and then initializes some values 
      2. If you change your contract in development, re-running this tool takes a super long time, which is frustrating 
   1. If not already mentioned, are there any libraries you rely on regularly? 
      1. Main library they use for all dapp development is ParityJS, and their new library called Bonds/007 (React integrations) 
      2. Parity Ethereum node has pub/sub now"
55,55 Parity - Fredrik Harrysson.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Lack of documentation is a big thing. The deploy/test/repeat cycle is unclear and kind of annoying. It’s a problem of the whole stack, not just certain libraries. 
   2. E.g. On top you have the React app, with hot reloading. Super easy. 
   3. One level below you have the middleware library. Auto-generated from the ABI, and there’s some other knowledge you need. E.g. Someone clicks and approve button, which changes a contract variable and updates the UI for the owner. The business logic is both in the contract and in the JS middleware, which is hard to deal with. 
   4. Layer below that is Node. 
   5. IPFS client server, so the client can upload a file. 
      1. Hash is stored on chain. 
      2. File is stored on IPFS. 
   1. Layer below that is the contract. Any changes in the contract bubble up, need to recompile the ABI, need to recompile the middleware from the ABI, need to recompile the React app because the underlying dependencies have changed. 
   2. Something that changes the level of abstraction for managing files would be great."
55,55 Parity - Fredrik Harrysson.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. Setting initial values after deploying a contract is important 
   2. Being able to roll back transactions would be really nice for dapps"
55,55 Parity - Fredrik Harrysson.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Been a core dev on Parity for a few months. 
   2. Making the Ethereum client itself nice to use by developers. 
   3. Also building a solidity parser and linter 
   4. Building some JS libraries for developers to actually write dapps 
   5. Talk about the enterprise company dapp -- how did we scope, what tools, etc 
      1. All at a proof-of-concept stage. Probably 10 years before they can actually make it work in their business. 
      2. I set up the docker containers for the nodes, did the documentation, and built the React App"
55,55 Parity - Fredrik Harrysson.txt,Fredrik Harrysson,Fredrik Harrysson
50,50 Modular.network - Christopher Brown.txt,," 
"
50,50 Modular.network - Christopher Brown.txt,05/11/2018 - Andy,05/11/2018 - Andy
50,50 Modular.network - Christopher Brown.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Just Truffle for tests 
      1. Mocha for unit and functional tests. Use mocha across the whole application base. 
   1. Have run Mythril on some mission critical contracts 
      1. Was a pretty good experience 
   1. Stay away from monolithic code bases, iterate and test as regularly as possible! 
      1. Applies especially to smart contracts 
      2. Use event logging to debug contracts if possible 
   1. Getting invalid opcodes as feedback when your code doesn’t run is the single most frustrating thing in the world! 
      1. This has now improved a lot, which is awesome! Not just OOG errors in solidity anymore. 
      2. Finished contracts a few months ago and now don’t really want to touch them too much. However, solc moves on a lot and there is a tension there (especially after audits) 
         1. SC dev is much more like traditional application dev, not web dev. Updates are months apart and very purposeful, bundle a bunch of things etc. 
   1. We like solidity, and most problems are related to VM not being as capable as people currently want. 
      1. There’s a language called Jelly with very purposeful functions that are then linked together to create compound functions. 
      2. Someone wanted trailing and leading 0’s from contracts return data - seemed very easy to do in Jelly. Specifically, bytes are so valuable on the blockchain and we use more bytes than we need to. 
      3. Room for optimisation with bytecode there."
50,50 Modular.network - Christopher Brown.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Truffle for building, testing and compiling 
      1. Can be sketchy on deployments, though this has improved recently. Built our own deployment script to get around it though. 
         1. Test, compiling and running are cool, but none of them are linked very well. 
         2. Being the devs of both ganache and truffle -putting the scripts together that would run the whole suite would be awesome. 
      1. Needs easier integration with CI tools. 
   1. Test scripts from zeppelin (in the sol libraries that pulls up testrpc, gives it a bunch of accounts and then executes whatever you have written). 
   2. Dive into lower level Ethereum libraries a lot - ethjs-utils especially. 
      1. You have to understand what is going on and WHY you’re doing it. This context is tough to get across and the libraries here are just not as well advertised, which is a pity. 
      2. It’s a maturity thing: early on you’re just trying to attract people and get them to get their hands dirty. As the community matures, you need more forward-facing, lower-level libraries that are well documented available is absolutely key. You can only do so much with vanilla web3.. 
      3. One of their new implementations is a new multisig wallet, picking up some stuff from ERC 191, added some things to address security concerns. 
         1. None of that stuff is in web3, so using ecsign method from utils in order to avoid going onchain all the time to get info that is available elsewhere. 
         2. More attention around lower level components is useful as we mature. 
   1. Ethereumjs-tx, ethereumjs-wallet, solidity-sha3, to get identical hashes 
      1. Little bit more control to JS devs. 
   1. Web3 1 looks good 
      1. Biggest mistake: made it default installer when web3 v1-beta came out and this is a crucial error!!  
      2. But scrypt is such a heavy package to deal with. We use that for local encryption/decryption now. Can it even be compiled into an Electron app for instance? 
      3. Necessary because everyone running full nodes is never gonna happen."
50,50 Modular.network - Christopher Brown.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. Proof of Stake overlays will be really interesting! Bring on the FFG!! 
   2. Getting WASM out there will be really important (and finding a use case ) )"
50,50 Modular.network - Christopher Brown.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. The community is doing a good job and a lot of the stuff we need is already being worked on by someone. 
   2. ETHDenver and the gas visualisation tool that came out of that. 
      1. Became apparent that there are places where you see red and you can’t change that and these sorts of insights are useful - do I really, really need to put this piece of data on chain etc. 
   1. More visual tools that you could wrap around smart contract code (that doesn’t get compiled). 
      1. Has there been any thought around wrapper code for SCs for developer-specific tools or libraries that give you the visuals you need to understand more of what is going in. 
      2. Having a logger that works well and you get outputs similar to solidity-coverage and doesn’t only point out errors, but also information - showing scope and which state variable it has access to etc. 
      3. Think about in context of Parity issues we had: the fact they tried to structure a lib as a contract could have been picked up by something like this.  
      4. Or, in Ownable contracts, specifically printing out a report that says “The owner of this contract is the only one who can access this specific state, as opposed to other users” etc. Point out how to establish an owner (if not already set in initialisation function)."
50,50 Modular.network - Christopher Brown.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. Having a sequential getting started stuff on ethereum.org is totally, absolutely necessary.  
   2. List of tools and resources and even an appendix-like structure of what things like Distributed Applications even mean. 
   3. Defining use cases for those don’t wanna be in blockchain is still really hard today. 
   4. Solidity readthedocs is very good though. Web3 v1 is much better documented too. 
      1. There is a disconnect between web3 v1 and latest geth: the way we were fetching tx receipts were not syncing correctly 
      2. v1 websockets are still kinda screwy and not handled as well as they need to be. 
      3. Ended up putting the service using the node in the same container and just ipc 
   1. Resources themselves, you really need to dig for. 
   2. Geth has resources that are very outdated and fragmented - please can we fix this! 
      1. Not having definitive resources and docs is a big problem in general. 
   1. Search github and Reddit to find random answers that I need."
50,50 Modular.network - Christopher Brown.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Full stack web dev, working in finance and some other industries. Started in Eth after reading WSJ after Frontiers release. 
   2. VM was interesting - run code in the blockchain is really interesting. 
   3. Modular.network - working on a hybrid solution with Blossom. 
      1. Several microservices in AWS that are coordinating with SCs on the blockchains - all that talk to a frontend dashboard 
      2. Token contracts 
      3. More extensive libraries now - we have an open source repository for ETH contracts. 
         1. Math 
         2. Token 
         3. Crowdsale 
         4. Array handlers 
         5. Linked lists handlers 
      1. Landed on Status repos first when looking at this stuff :) 
      2. Looking at zeppelin’s libraries and they didn’t seem as organised as other strong OSS libraries. 
         1. All about documentation!! Seemed lacking and this is the focus at modular.network. 
         2. Not deployed libraries you can link to. 
         3. Modular deploys on all networks and you can link to them specifically using delegatecall. 
         4. Take ERC20 - no reason to have 10000 Full implementations out there, just need contracts to hold their own storage and implement the right interface. 
   1. Bridging tech is most important for foreseeable future due to efficiency concerns on chain. 
   2. ETHPM required for graceful handling of libraries and packages, easily, securely etc. Really need to focus on that.  
      1. Have some thoughts about using on chain tests for upgradeability."
50,50 Modular.network - Christopher Brown.txt,Christopher Brown,Christopher Brown
40,40 Kyokan - Jacky & Matthew.txt,," 
"
40,40 Kyokan - Jacky & Matthew.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Matthew: 
   2. Working on plasma and writing it in Go. Focussed on interoperability between Geth and smart contracts. 
   3. My development style: 
      1. I really like Java. – enterprise-y tools make me productive. 
      2. IDE could be really improved. 
         1. I use IntelliJ’s Solidity plugin to edit Solidity. 
         2. “Jump-to-def” “jump-to-implementation” syntax highlighting 
         3. Big difference in productivity. 
         4. E.g. when I’m writing Go code, I can jump to the Geth definition. This is amazing. 
      1. I’m switching between Solidity / Go, or Solidity / Javascript 
         1. Solidity Javascript bindings through Truffle are good. 
   1. Integrating libraries designed for cryptocurrencies with front-end apps is hard: 
      1. Bundle sizing: different behavior if you’re running in the browser or in the backend. 
         1. E.g. if you compile a contract with truffle, you get a JSON file – which has the bytecode and all this stuff beyond the ABI. 
            1. This is heavy and unused. 
         1. Crypto.js has unnecessary dependencies: 
            1. Eth.js includes an ASN.1 parser which parses digital certificates –– which isn’t needed for any crypto.js uses. 
         1. Google Chrome places a size limit (3 MB) on service workers in Incognito mode. 
            1. Bundle sizing is important – need to take out dependencies. 
   1. Standardize the interfaces for all these libraries. 
      1. E.g. a standardize library to read BIP39 seed words – across different programming languages. 
   1. Is there a Javascript API to boot a testnet, deploy contracts, and run tests against it? 
      1. For running application tests – 
         1. I want integration tests that run against Truffle easily 
         2. Having the ability to do this via Javascript is important 
         3. E.g. automate this: https://github.com/machinomy/machinomy/blob/master/run_integration_tests.sh 
   1. People don’t know how to productionize a geth node: 
      1. On Ubuntu: you can ‘apt-get install geth’ 
      2. Now, how do you secure it, monitor it, etc? 
      3. People say: “just use Infura” – but then you’re tied to Infura. 
      4. Some ideas: 
         1. Docker instances Chef or Ansible scripts that setup a Geth node which has a bunch of best practices around it. 
      1. As an example: 
         1. Your RPC port shouldn’t be open to the external world, but should be accessible to the front-end. 
            1. You need a layer sitting between the geth node and the external world, and gives: 1) analytics, 2) authentication, and 3) audit logging. 
            2. The dashboard could configure geth on the fly. 
         1. How do you secure a geth node with an RPC port: 
            1. Need only certain keys to be allowed to interact with it 
   1. Jacky: 
   2. Integrating Metamask with Dapps  
   3. Building a new wallet for Spank 
      1. It’s a service worker 
         1. Three threads running at once: 
            1. Runs a bunch of background processes 
            2. The Wallet 
            3. The Dapp itself 
         1. The messaging between these three threads sucks. 
            1. Cross-window JSON RPC library. 
            2. Wallets are pushing the limits of what Chrome is capable of. 
               1. They’ve had to file two bugs with Chrome in the last month. 
         1. Runs into the service worker size limit. 
      1. Mostly Javascript and Web3 work 
      2. Lot of code repetition in loading state and confirming transactions 
      3. Web3 is kinda hard to use – large ABIs 
      4. Biggest problem has been around event management. 
      5. Key management is not that complicated – Web3 has a good handle on it. 
         1. The Web 3 interaction with the wallet: 
            1. Web3 provider talks to the blockchain –  
            2. Spank and Metamask – the provider is an instance of the ZeroClientProvider – written by the Metamask team 
               1. The ZeroClient makes all calls when there’s no key needed. When a key is needed, it calls into your codebase. 
      1. Biggest problem is around the communication of gas costs. 
         1. The UX around this. 
         2. Users pick really high or low gas costs. 
         3. There are better ways to estimate gas. 
      1. Would be nice: currency conversion utility tools. 
         1. Existing tools are pretty buggy. 
            1. ETH has many different units. 
         1. Units conversion. 
   1. Matthew: 
      1. I write all my own methods – other than lowdash where I pull specific utils out. 
   1. React / Redux. 
      1. Need a way of shoving Web3 stuff into your Redux state.  
      2. Managing the lock state of your wallet 
      3. E.g. you need the lock-state of the wallet, because the UI changes. 
         1. They written a util that queries the wallet, gets it’s lock-state, and puts it into the Redux state. 
      1. Authentication: people have public/private keypair use this data as login. 
         1. Having a canonical way to npm install and have authentication build off of Metamask. 
   1. Nice to haves: 
      1. Typescript typing for crypto libraries. 
      2. Postgres types to manage Ethereum stuff –– addresses, wei,  
         1. Have these methods: .toFinney"
40,40 Kyokan - Jacky & Matthew.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. Plasma: the future is close – will see this live in 3-6 months. 
   2. Generalized state channels: L4 and Spankchain. 
   3. Plasma Cash: 
      1. The idea of a coin that you sign over to different parties – it’s kind of like a cheque. 
         1. Can replace other entrenches business –  
         2. Can attach it to a stablecoin. 
   1. In-browser Ethereum light-client: Mascara. 
   2. We’re in the internet before packet-switching.  
      1. After that, everything is open and possible.  
      2. Can integrate cryptocurrency with your everyday life."
40,40 Kyokan - Jacky & Matthew.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Matthew: 
      1. Cofounder of Kyokan, CTO   
      2. Client work 
      3. Plasma and Plasma Chain. 
      4. State channels work with Spankchain. 
      5. Infrastructural work + Solidity. 
   1. Jacky: 
      1. Cofounder of Kyokan  
      2. Building / integrating with Ethereum wallets 
      3. Solidity"
40,40 Kyokan - Jacky & Matthew.txt,3/26/2018,3/26/2018
40,40 Kyokan - Jacky & Matthew.txt,Jacky & Matthew,Jacky & Matthew
46,46 Loom - James Duffy.txt,," 
"
46,46 Loom - James Duffy.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Truffle / Ganache. When it’s time to test on a real network, sometimes just deployed to mainnet . 
   2. In-House guy out of NYC that does contract audits 
      1. Open Zeppelin stuff is awesome 
   1. Use own ETHFiddle to hack on code in the browser and share things with other people 
      1. Compiler output not good: just does a diff check. 
      2. Tried embedding Solidity Compiler, but errors weren’t descriptive enough "
46,46 Loom - James Duffy.txt,1. Other bounties?,"1. Other bounties? 
   1. Some type of tool that would take ETH Smart contracts, pack them up and automatically deploy them to mainnet.  
   2. Heroku style CLI deployment tool or in-browser version. 
   3. Making deployment easier for testing and production. 
      1. Solidity is really “bare bones” 
         1. Hard to manipulate strings -- not present in Solidity 
         2. When trying to give examples in CryptoZombies -- couldn’t do much 
            1. Comparing strings -- no substring function   
      1. Would be nice to have more “Utils” 
      2. Started Solidity X  
         1. Superset of Solidity that compiles to Solidity (intelligent defaults and prevents security issues) 
         2. Think coffee-script for Solidity -- plan to continue development in the future"
46,46 Loom - James Duffy.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. Loom - tell us more about games on the blockchain 
   2. Lots of people working on games and some early successes inspired lots of people. 
      1. Games will be first real use case outside of financial payments  
   1. In-game assets that you physically own and can trade real digital scarcity and users running nodes with the power of forking (nodes can reject changes to games) means an entirely new frontier of possibilities. Developers can’t shut down the game! 
      1. Shared game worlds because data is open on blockchain 
      2. Think it’s going to be easy to gain user adoption with in-house game studio and building three games. 
      3. Loom is developing an SDK to the point where it can be packaged and used by public 
         1. Games and social apps -- anything could run on these sidechains 
         2. Need constant feedback of teams trying to use it, so we can iteratively improve it 
         3. Pluggable consensus mechanism. 
         4. DPOS that we built in-house (like Steemit type) social sites 
         5. We plan to support Casper / Tendermint. Not usable version that’s public, the byzantine fault tolerant mechanism specifically.  
   1. Core developers are close 20. Cofounder has done projects at Bloomberg, Digital Ocean, spoke at 20 Go conferences over past couple of years. Friend out of India runs team of senior developers, have had a team there from the get-go. 
      1. Not being based in US means cost is much lower 
      2. A lot of: senior back-end developers that had worked with distributed systems 
      3. 1 SDK building in-house games to demonstrate platform, onboarding game companies (Unity)  
      4. Make it easy for normal devs to make the jump into building blockchain dapps! 
   1. Core developers at Loom are close 20. Cofounder has done projects at Bloomberg, Digital Ocean, spoke at 20 Go conferences over past couple of years. Friend out of India runs team of senior developers, have had a team there from the get-go. 
      1. Not being based in US means cost is much lower 
      2. A lot of: senior back-end developers that had worked with distributed systems 
      3. 1 SDK building in-house games to demonstrate platform, onboarding game companies (Unity)  
      4. Make it easy for normal devs to make the jump into building blockchain dapps!"
46,46 Loom - James Duffy.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Deployment is “tough” - initial problem we set out to solve 
   2. When first building DAPP, testnets are a mess: 
      1. Just don’t work at all - people eating up all the transaction bandwidth or DDOS them. 
      2. Faucet to get ETH on testnet is hard to find and use at scale. 
      3. Setup local development with Truffle / Ganache, which is fine, but once you want to get it live to demo or do anything really useful, it is quite a headache. 
      4. Our CTO just deployed it to testnet, which was less of a headache. However, deployment to mainent itself is quite difficult 
      5. ETHDeploy: auto populate wallet with huge amount of Ether test things without having multiple steps blockchain clone. 
         1. Became less of a focus for us. Doing something with Loom had potentially a much bigger audience and more use cases. 
      1. Still need transaction costs on main-net down! 
         1. Our argument is that not everything involves high storage of value / sensitive data (doesn’t need full decentralization), but we still want important parts on main-net (character data, owning items) 
         2. Delegate Call (first app): users earn karma and tokenized karma they can transfer to mainnet for contributing to site. 
            1. Could load cryptokitty into platform (ERC-20 + ERC721) 
            2. Storing hashes of large amount of data verifiable on side chain. Mostly using relay to transfer tokenized assets 
      1. Limited experience on mobile, which limits user adoption. Steep learning curve there 
         1. Metamask is most straightforward thing, but not sure how to improve.  "
46,46 Loom - James Duffy.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Hybrid online marketing + developer 
   2. Invested in Bitcoin since 2013, huge fan of the philosophy of crypto. I forgot about it during the 3-year bear market, then interest resurged in 2017 when I discovered Ethereum 
   3. My co-founder Luke was working as lead developer at crypto company called Block Mason 
   4. I wanted to build new project because I was running into scalability issues on Ethereum. Matt was running into same issues -- things were too expensive and some really bad UI in general. 
   5. The project evolved a lot: the initial idea was called ETHDeploy. We were giving people a way to spin up EVM-based side chains on private test networks for demo’ing and user trials. 
   6. Digital Ocean style way to spin up ETH-based blockchains. 
   7. To get adoption, we needed to build up our own applications. When we started doing that, we realized it didn’t make sense to build EVM stuff in Solidity and built in Go. 
   8. Need developers building on platform - so built CryptoZombies 
   9. First, we built ETHFiddle which is Fiddle for Solidity -- like JSFiddle (inbrowser IDE for Ethereum to share code. Like Remix, but you can quickly share code snippets.)"
46,46 Loom - James Duffy.txt,James Duffy,James Duffy
3,3 1Protocol - Axel Ericsson.txt,," 
 
 
"
3,3 1Protocol - Axel Ericsson.txt,1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. Human thinking and auditing. 
   2. Will find some external team to do a professional audit."
3,3 1Protocol - Axel Ericsson.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Truffle suite. Before that, built our own unit testing system."
3,3 1Protocol - Axel Ericsson.txt,1. Other bounties?,"1. Other bounties? 
   1. Breaking out a javascript library for web pages that are accepting payments, which allows you to accept any kind of wallet mechanisms: Ledger, Metamask, Priv key, encrypted keystore, etc. 
   2. Same thing needs to exist for desktop software. Need a simple desktop wallet that accepts any kind of access to payments."
3,3 1Protocol - Axel Ericsson.txt,1. Was anything easier than expected?,"1. Was anything easier than expected? 
   1. Writing smart contracts is surprisingly neat. Not actually as hard as it seems. You can have a mental model of all the moving pieces in your head, which is actually harder with other kinds of software."
3,3 1Protocol - Axel Ericsson.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
      1. Just web3JS and the python raiden client"
3,3 1Protocol - Axel Ericsson.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. Raiden is the golden egg in the space. The experience of actually using Ethereum will improve a ton. 
   2. “Counterfactual” team building some general purpose state channels. 
   3. Less bullish on actual applications on Ethereum right now."
3,3 1Protocol - Axel Ericsson.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. There is no tooling or anything related to state channels that is trusted yet. 
   2. Need the MEW of state channels."
3,3 1Protocol - Axel Ericsson.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. Solidity is changing so quickly that, as an example,  
      1. changes to visibility modifiers (public / private etc.) has gone through a view iterations. 
      2. It would be great if there was a resource that combined solidity read the docs with the github releases[a][b] 
   2. Needing to resolve problems like how to setup web3, talk to contracts, remote vs constant transactions. Lots of re-implementing solutions."
3,3 1Protocol - Axel Ericsson.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. I have built 1Protocol 
   2. It lets smart contracts sign up as miners on different proof of stake protocols 
      1. Let users provide the contract with the stake 
      2. It’s like a mining pool, but for staking 
   1. Three things 
      1. Interface for signing signatures (like MEW) and sending tokens to mediators 
      2. Building actual contracts that accept tokens and are signed up in Raiden as a mediator 
      3. Actually running the mediating machine on Raiden. 
         1. Eventually, anyone can send tokens and anyone can run the machine 
         2. For this, simply writing software around the Raiden node client. Raiden has published a python client. When you run it, it exposes an API on your computer, and 1Protocol is writing software that interacts with that API."
3,3 1Protocol - Axel Ericsson.txt,Axel Ericsson,Axel Ericsson
3,3 1Protocol - Axel Ericsson.txt,[a]This sounds like an easy bounty / fix,[a]This sounds like an easy bounty / fix
3,3 1Protocol - Axel Ericsson.txt,"[b]If that is of any help: The documentation is actually versioned, you can switch back to older versions and they are coupled with the releases. What might be bounty-worth (not sure if that was meant here): Expand the release changelog to make it easier to understand for people not too deep into solidity and add links to the documentation. We could even add that to the official documentation as an expanded changelog.","[b]If that is of any help: The documentation is actually versioned, you can switch back to older versions and they are coupled with the releases. What might be bounty-worth (not sure if that was meant here): Expand the release changelog to make it easier to understand for people not too deep into solidity and add links to the documentation. We could even add that to the official documentation as an expanded changelog."
53,53 Newline - Nate Murray.txt,," 
"
53,53 Newline - Nate Murray.txt,1. How do you handle smart contract verification and security? ,"1. How do you handle smart contract verification and security?  
   1. Wish i knew better how to do audits. Would love to know list of auditors. However, even if I could get in touch with auditors it sounds expensive. 
   2. Use solc linter when developing. "
53,53 Newline - Nate Murray.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. At first, getting contract working use Remix or testing framework built into truffle.  
   2. I don't use Ganache.  
   3. I really like connecting my contracts a real instance, and I like using console to connect to node. 
   4. I do it in layers. First start developing against testrpc because its faster. Then use geth."
53,53 Newline - Nate Murray.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. I use python for numeric analytics (not really around dapps).  
   2. For desktop apps I'll use Electron.  
   3. For contract development I use solidity, and web3.js for a connection to the blockchain.  
   4. Zeppelin's libraries for solidity.  
   5. 0x has excellent repo for js."
53,53 Newline - Nate Murray.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Everything seems super easy getting started, especially once you understand how the blockchain works.  
   2. Then you learn about security vulnerabilities like re-entrancy, other well known hacks, etc. Developers don't think about that when doing web dev. 
   3. Newline's third class is ""Hack smart contracts"", and it covers DAO hack. The goal is to teach folks about security."
53,53 Newline - Nate Murray.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. Logging within solidity is hard, you can emit an event.  
   2. Tools around gas are hard, its so opaque.  
   3. Remix and gas is maddening, different gas limits, might have contract call that works in one env that doesn't work in another. 
   4. Formal verification we need something better than solidity. Bamboo seems cool. 
   5. interested in the successor to serpent - vyper."
53,53 Newline - Nate Murray.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. Tutorials are out of date.  
   2. API totally changed in web3 beta.  
   3. Understanding the Ethereum blockchain & program execution model.  
   4. What it means to ""call"" and get (for free) or ""send"" and updating the blockchain for a fee. What it means for you transaction to be mined. This is covered in newline.  
   5. If high performance computing today is extremely parallel, then blockchain computing is embarrassingly serial."
53,53 Newline - Nate Murray.txt,1. Who are the other people you think we should talk to?,"1. Who are the other people you think we should talk to? 
   1. Interesting smart contract platforms coming out.  
   2. LISK dapps in eos web assembly."
53,53 Newline - Nate Murray.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. I started by creating my own token using the tutorial on Ethereum.org.  
   2. I also did some of the other tutorials on the Ethereum.org page. 
   3. Rich user-facing Dapps using a modern JS web tech stack.  
   4. Solidity for writing smart contracts and web3 for the connection to the blockchain.  
   5. Next thing I'm working on: solidity, truffle, javascript, ipfs."
53,53 Newline - Nate Murray.txt,Nate Murray,Nate Murray
15,15 Decentraland - Esteban Ordano.txt,," 
"
15,15 Decentraland - Esteban Ordano.txt,1. Other bounties?,"1. Other bounties? 
   1. Biggest request: have ERC20 upgraded to ERC223. 
      1. We have troubles with small re-orgs – transferring immediately upon approvals causes issues. 
         1. This was a problem with our code hard to develop. 
      1. Have watchers on the Blockchain, and sending transaction to make correct transfer, e.g. for MANA token."
15,15 Decentraland - Esteban Ordano.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. Pains: 
      1. The gas issues – the expensiveness of the whole process. 
      2. We are subsidizing the whole process of deploying the land. 
         1. We are also subsidizing the second transaction after the ERC is assigned. 
      1. This whole process will take 12 million, 150 ETH. 
   1. We also had to make the contract upgradable – with the delegate proxy pattern 
      1. We are worried that Solidity will change, and the structure of storage will change. 
      2. Our thinking: we’re doing some engineering on how to sell the next batch of land – we came up with a better system to sell that land – it’s going to be pretty neat. We’re not going to have this issue. 
   1. Decentralized exchanges: 
      1. Looking forward to 0x adding a version of their protocol for non-fungibles. Which has now happened! https://blog.0xproject.com/introducing-0x-protocol-v2-9f5bda04d38d 
   1. State channels: 
      1. Looking forward for Raiden 
      2. Was thinking of funding Lightning Network for ERC20 network 
         1. Simulating a UTXO model on ERC20 tokens 
         2. Wants for interoperability between Bitcoin and Ethereum. 
            1. Olaoluwa (from Lightning) is the best coder in the world. 
            2. Bitcoin world is more secure. 
               1. Lightning code is written like poetry."
15,15 Decentraland - Esteban Ordano.txt,1. Who are the other people you think we should talk to?,"1. Who are the other people you think we should talk to? 
   1. Should speak with Fede –– should collaborate together –– they’re interested in throwing money at sidechain & Plasma chain."
15,15 Decentraland - Esteban Ordano.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. I’m hiring two or three people – excellent engineers – to build tooling.  
         1. We’re calling the project Voltaire Labs, after the Voltaire house. Trying to get Sergio Lerner to help with that. Getting people I know from Google. Maybe we should join efforts? Will intro to Federico Bond. 
      1. Our infra: 
         1. MANA token which is an ERC20. 
         2. Auction of Land. 
         3. Land smart contract which is an NFT token standard. 
            1. Got tired of not hearing back re ERC non-fungibles improvements. Proposed alternative ERC. 
            2. Land registry of who owns which land parcel. 
            3. These link to IPFS or IPNS for content of land. 
         1. Decentralized exchange of land parcels. 
         2. Small tool for sending emails whenever an event is triggered on your contract. EthAlarm: takes address of contract, ABI, pick events that you’re interested in. 
      1. We run the land auction off-chain, we had a period of registration where you’d send the MANA you wanted to use in the auction. At the end of the auction, we distributed the NFT tokens and returned MANA. 
         1. Auction was mostly an independent application – better UX, less fees 
      1. Why the auction was off-chain: 
         1. We processed around 115k bids. The UX for the auction was great. We managed to provide the user with an experience that was way better, because it wasn’t blockchain-based. 
            1. Both on the browser and the server, we exchanged cryptographic receipts –– “I’d like to bid for the following parcel (x,y), (x,y) – at the end you’d receive a signed receipt” – the server would receive that message, and say back “I’ve received a bid, and here’s your receipt”. All these receipts are public. 
               1. Anyone in the auction everyone could act as an independent verifier of the auction. 
            1. We returned a receipt had a nonce ––  
            2. We can audit the whole auction. Can prove every bid that we received. 
      1. How we’ve been running auditing 
         1. We sold $16m worth of parcels of land. 
         2. We wanted to make sure that they weren’t messing up. 
         3. Not many people were checking – but a few did and even reported back some issues community trusted them. 
         4. Would be best if this was run on a decentralized protocol so people didn’t have to trust these guys. 
      1. We’re building a voting scheme with MANA: 
         1. “How tall should this building be?” 
         2. We are repeating the same pattern as the auction. 
         3. Our voting scheme is offchain and non-binding, because the project is early enough that people can back out."
15,15 Decentraland - Esteban Ordano.txt,1/16/2018 - Sina & Robbie,1/16/2018 - Sina & Robbie
15,15 Decentraland - Esteban Ordano.txt,Esteban Ordano,Esteban Ordano
85,85 Zeppelin - Facu Spagnuolo.txt,," 
"
85,85 Zeppelin - Facu Spagnuolo.txt,1. Are there any other questions we should be asking?,"1. Are there any other questions we should be asking? 
   1. I would love to know how people got involved and how they managed to be where they are right now: i.e. what path did they walk to get to where they are now.  
   2. I would really like to know if we are all doing the same things to get to where we are, or if there are smarter ways to grow quickly without losing culture/vision. Sometimes it feels like we’re all alone in the jungle, struggling to survive, and it would be awesome if not everyone had to feel this way going forward. 
   3. Would also be helpful to see how other companies are organising themselves on a day-to-day basis and how they collaborate with other teams, with remote workers etc."
85,85 Zeppelin - Facu Spagnuolo.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. We use Travis CI. 
   2. Coverall for coverage tests, also for solidity coverage using solcoverage as a plugin. Super useful to us. 
   3. Write plain mocha tests (integration and unit) and we aim for 100% coverage always. 
   4. When working on DApps we usually have standard paths to test how the UI works. 
      1. This is another developer tool that is missing: a tool to test UIs when signing transactions."
85,85 Zeppelin - Facu Spagnuolo.txt,1. Other bounties?,"1. Other bounties? 
   1. For governance: 
      1. We are still exploring which models are better for upgradeability. How to take into account the community, dev team, investors etc. We need a governance pattern that works specifically for upgradeability decisions, which tend to be more focussed than larger governance questions and might lend themselves to specific, narrow mechanisms. 
      2. It may be possible to modify the way the compiler maps state variable to storage, so that we can allow people to implement similar patterns to ours without all the inline assembly stuff. Might make a nice bounty - improving the compiler in general to allow new features specifically in terms of what you can do with the EVM. 
   1. Having a scheduler implies huge gas costs, so we need to find scheduling mechanisms that will allow the community to run transactions in a feature for you and be rewarded with tokens or Eth or whatever. (see chronologic for this kind of stuff too) 
   2. We are trying to see if there is anyway to use TCRs and token curation markets in order to handle on chain standard libraries and upgradeability too. The idea behind zeppelin OS is to encourage other teams to build their own on chain standard libraries and provide them through zeppelin OS to be used in other projects. We would love to see the community come forward with suggestions about how this could be best managed."
85,85 Zeppelin - Facu Spagnuolo.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. Upgradable smart contracts? 
   2. We’ve been exploring many different approaches over the last year, all of them using proxies: i.e a contract using a delegateCall opcode to make things happen. 
   3. Biggest problem: we had to store information about 2 different domains, 1 of them being the proxy information and the other the contract that needs to be upgraded. 
      1. Proxy information: delegates each call to implementation contract. Storage in proxy contract, logic elsewhere, so not something new (Parity also uses this pattern). 
      2. We don’t see how upgradability works without some kind of mechanism for governance: the proxy needs to ask someone/something if the contract can/should be upgraded. This information needs to be stored as well: the “owner” and the implementation details. 
      3. The way solidity manages storage, the contract that was going to be upgraded needed to follow the storage slots where the proxy was saving the relevant information because it is important not to overwrite them. 
      4. We found a final approach that manages this very elegantly: using inline assembly to store variable and bypass the way solidity performs its own checks. We are using storage slots that solidity will never be able to access, which is how we can ensure our approaches are really safe and that we can have upgradeable smart contracts that don’t overwrite important information. 
   1. Why should we even have upgradeable though, if immutability is such a big thing? 
      1. We really don’t think upgradeability works without governance. 
      2. We have storage in one place and logic in another. So the storage actually remains immutable and will never forget what is put into it. We can modify it, but that is part of the history and you can inspect those modifications easily if you like. 
      3. We are not leaving immutability then, just handling it in a smarter way. 
      4. The idea came from exploring the strategy Solidity itself uses for mapping of variables, but with some delta to make sure Solidity won’t overwrite things."
85,85 Zeppelin - Facu Spagnuolo.txt,1. What are the best educational resources?,"1. What are the best educational resources? 
   1. People in zeppelin are the best resources I have! 
   2. One of the things I love most about Ethereum in general is the community, so we try to get to know as many other projects as we can and collaborate with them. This is a great way of finding quick answers to hard questions and getting an overview of the best current tools available. 
   3. Google, ethereum stack exchange too. But the community is the best resource we have."
85,85 Zeppelin - Facu Spagnuolo.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1.  Truffle - I don’t really like it, but have to use it. 
      1. We can improve a lot of things here and build some more things on top of it. 
      2. Testing your contracts easily across any network and setting your own defaults through the console is not as easy as it should be. 
      3. Truffle scripts allow you to deploy your application, but the truffle environment itself is very difficult to manage, especially if you need to modify it to fit your specific project. You can lose days trying to do that.  
      4. We should start thinking about providing an interface that can be consumed, extended and used by other cmd line tools, and things like zeppelin_OS. 
      5. The testing environment is really good, but could still provide some extra features (like better debugging and changing variable easily between tests without needing to recompile everything). 
      6. I haven’t yet found one chance to run the debugger properly - but we really need that and it really needs to be easy to use. 
         1. When I try to debug my contracts on the network, I start logging events on the smart contract to see what is happening. This is really slow, it is a waste of gas and is not the way I want to handle things in the future. 
      1. We also use open zeppelin a lot in our own projects: i.e. DApps we build ourselves, and zeppelin_OS - an on chain version that can be used as a standard library for zeppelin OS. 
         1. Currently you have to deploy manually the smart contracts from our libraries that you want to use. But now, with zeppelin_OS, everyone can build a standard library that can be linked to a project that is using zeppelin_OS and everyone can use the same source code. 
         2. Say goodbye to all those deploy-time issues ) 
      1. We use many small helper libraries: e.g. to do tricky things like testing low level calls, crafted transactions where you need to specify very small things to do with the data as an array of byte or whatever. Truffle provides no friendly way to do this, so you have to start playing with buffers of bytes and hashes and all sorts of nonsense. 
         1. Ethereumjs-abi, ethereumjs-utils etc. 
      1. Web3 is a great library. It’s very simple, though it’s been a long time that they have been promising a stable 1.0 version. 
      2. MetaMask is also really useful - makes life easier in so many ways. 
      3. We use both geth and parity as we have our own nodes to test things. 
      4. Remix is really cool and it works really well. I encourage people to use it and look forward to new releases from them. 
         1. Sharing sets/suites of contracts easily can be improved."
85,85 Zeppelin - Facu Spagnuolo.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. Zeppelin OS!! 
   2. Really excited to see a lot of projects on mainnet.  
      1. Decentraland, Aragon and Status are the most exciting. 
   1. Interested by Cardano: they have a really different way of writing smart contracts on a  blockchain and we can learn a lot from them. They also have a really good team, which is always a good lense for me to assess projects through. 
   2. Neo is another interesting project. Haven’t used it yet, but met them at a conference and they were really focussed and clear about what they are going to be doing over the next little while. 
   3. Cosmos is really interesting! It’s really huge, but I am excited to see what happens there. 
   4. Plasma, eWASM, state channels - all these things are going to be exciting to explore more."
85,85 Zeppelin - Facu Spagnuolo.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Speed of testing in Truffle is taking ~15min and it should be 1-2 at most. We need to speed that cycle up badly. 
   2. Ropsten is really slow when we need to test something in a “real” network. We have needed to cancel manually our own transactions and follow many rabbits down many different holes to figure out what happened. We need a better, more realistic testnet, for all our contracts. 
   3. You can’t set breakpoints when debugging contracts, or end-to-end transactions on the network and this can cause you to lose the whole day when you miss something as simple as a flag or a param in a contract etc. 
   4. No easy way to log things in Solidity, which makes missing the stuff above much easier than it should be. 
   5. The linter tools also take too long. It should just be possible to install and run these sorts of things without needing to do any config of your own, which is not currently the case. 
      1. Solcoverage has to be set up manually, and the docs kind of suck around this. It took us a long time to figure it all out for ourselves. 
   1. Plain solidity console/interpreter to test your contracts where you can play with the types, variables and scopes without needing to recompile everything.  
   2. Volatility of the markets - really hard to convince people to join and use the currency because of this. 
   3. Legal issues around launching companies and products are a real PITA. We need proper DAOs and soon. 
   4. Came out of web dev industry, and it is really mature. They have a lot of methodologies for running projects and organising teams. Most people in Ethereum are very young and these sort of processes are generally a mess. 
      1. There’s a lot of pressure on the back of the price, and this or that ICO and we need to make sure that the community supports and contributes to better, clearer, slower processes that actually achieve the desired goals rather than cutting corners to ship not-really-decentralized products. 
      2. We need to figure out some new processes too unique to the problems we face in crypto."
85,85 Zeppelin - Facu Spagnuolo.txt,1. Who are the other people you think we should talk to?,"1. Who are the other people you think we should talk to? 
   1. Fran Giordano from Zeppelin - knows a lot about the EVM especially. 
   2. Alejo Salles from Zeppelin - worked with quantum physics, neuroscience and AI. Mind-blowing."
85,85 Zeppelin - Facu Spagnuolo.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. I studied Computer Engineering and am a full stack dev. I started my career by programming web stuff and distributed systems. 
   2. A year ago I had heard a lot about BTC and “blockchain”, so I got involved. 
   3. My life goal is to build the technologies that will make people’s lives easier and more free. 
   4. Cryptocurrencies clearly can do this, but Ethereum specifically - because of the community, and the fully functional VM on a chain - is clearly the best platform we have so far. 
   5. I knew Manuel from before, and so got together with him and decided to start building some tutorials and interaction guides to walk people through the same forests I was exploring. Started contributing to Zeppelin as a security researcher, because that is the major focus at the company. 
   6. This gave a lot of background as I really had to grasp how thing happen in the EVM. You have to be incredibly conscious and attentive about the stuff you’re programming. 
   7. Auditing well-known projects also really helped me grow my knowledge of how the whole ecosystems works and what the best practices are. 
   8. I am now building Zeppelin OS - upgradable smart contracts, with a scheduler, and on chain standard libraries. 
      1. It’s a huge challenge to build this on Ethereum currently, so I became a core member and we are releasing our first version today!!"
85,85 Zeppelin - Facu Spagnuolo.txt,23/05/2018 - Andy,23/05/2018 - Andy
85,85 Zeppelin - Facu Spagnuolo.txt,Facu Spagnuolo,Facu Spagnuolo
48,48 MetaMask - Aaron Kumavis.txt,," 
 
 
 
   2. Transaction confirmations 
   3. We need to explain what is happening to our users. The DApp could be lying about what’s happening, which makes it extra complicated/interesting. 
   4. Metamask receives a tx from the DApp, but no more info. 
   1. How do you convert that into a message to the user? 
   2. “It looks like its talking to a token contract or sending a random blob of data...” 
   1. Take that low-level data and have to convey to the user what’s happening. 
   2. We have special cases – e.g. a token transfer, this is an ERC721, this is a DAO proposal, etc. 
   3. There’s non-normal stuff – e.g. what’s it like for a sidechain? 
   4. Multi-network –– how would it work for non-Ethereum stuff? 
   1. E.g. secure scuttlebutt. 
   2. E.g. Filecoin, Dfinity, etc. 
   3. E.g. Plasma chains inside of Ethereum. 
   1. Standardization of transactions, blocks, signatures, etc.  –– not bounty-able right now. Need to build an architecture around it. 
   1. Then, you need plugins, which could be a good fit bounties. 
 
 
      1. Scaling. We have 1m users... 
      2. A lot of the work for scaling has happened inside of Infura. 
      1. Part of it is just throwing money on the fire. 
      1. They developed a REST api for json rpc. So now they can put a CDN in front of it, and get caching. 
      1. But now, a standard provider can’t point at the REST interface. 
      1. Seems like the big need is for standardization. 
      1. E.g. Maker’s ERC20 version doesn’t match the standard. 
      1. That’s not because we don’t have enough conversation, it’s that we don’t have real governance. 
      2. Infura is an existential risk for Metamask, because it’s expensive and we’re a non-profit. 
      1. We’ve been working for a while on their light-client. We’re blocked by some libp2p internals."
48,48 MetaMask - Aaron Kumavis.txt,1. Other bounties?,"1. Other bounties? 
   1. We’ve had good experience with bounties – Gitcoin, 
   2. One issue: bounties denominated in ETH or tokens, which leaves them open to volatility and potentially unhappy contributors. 
   3. Gitcoin, has ERC20 support, so you can use DAI now, which should help significantly. 
   4. People sometimes do crappy jobs, then get angry that they’re bounty wasn’t accepted. This is, in a general, a problem between intrinsic and extrinsic motivation which still needs to be solved. 
   5. Internally requirements change sometimes, leading us to not wanting to accept the solution even it abides by the initial spec, because we’d need to do a refactor around it."
48,48 MetaMask - Aaron Kumavis.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Usability 
   2. Challenging because there’s a large range of users. 
      1. E.g. Kenny at MakerDao who’s now at RChain. Hiss job was to manage the multisig for their funds. He’s sent a 1000 transactions on Metamask, he’s always signing, approving, etc. 
      2. E.g. other people have no idea what’s going on, want to participate in an ICO. Any extra information you give them confuses them. 
   1. Toyed around with the idea of presenting two different ideas. Advanced mode. 
   2. We have a whole support team. 
   3. Some tickets are sophisticated bug reports. Some are “hey, you stole my money”. 
   4. We’re trying to build general education resources. 
   5. Bounty: Ethereum for dummies. 
      1. In Metamask support – 
         1. What is a private key, what is a seed phrase (most important!) 
         2. Tokens are initially straightforward. But looking at a block explorer, it says my tx was sent somewhere else. 
         3. Why do I need to pay ETH to send a token to someone? 
         4. Gas prices. 
   1. Metamask can share learnings from their support team. 
   2. Whymarrh is introduced in contributing few hours. 
      1. Thinks videos or walk-through could be the best medium for explaining complex things. 
   1. Kauri can have specific documentation for technical stuff."
48,48 MetaMask - Aaron Kumavis.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Whymarrh: contracting in the space, working on Metamask UI, working at Kyokan. 
   2. Kumavis: co-founder of MetaMask. 
      1. wallet functionality  
      2. not losing your private keys  
      3. showing you what you’re signing, and what the side-effects of that are  
      4. choosing a good gas price 
   1. Using Ethereum.js, Eth.js. 
   2. One thing we don’t do well – conveying on-chain errors that happen during tx execution. 
      1. Want to be able to go deeper. 
         1. Source map tooling. Here’s where it exactly went wrong. 
   1. Want: an API to get source maps for published contracts. 
   2. Source mapping tool already exists. 
      1. Give it the trace information. They can generate this themselves using the json rpc. 
      2. Find where it reverted. 
      3. Throw that into the source maps. 
      4. That’ll give you the original line it was on. 
   1. Could do more fancy analysis: find what values in the state are. 
   2. Not sure how useful this would be the average user."
48,48 MetaMask - Aaron Kumavis.txt,"5/17/2018 - Andy, Robbie, Sina","5/17/2018 - Andy, Robbie, Sina"
48,48 MetaMask - Aaron Kumavis.txt,Aaron Kumavis,Aaron Kumavis
60,60 Pragma - John Palmer.txt,," 
 
 
 
 
"
60,60 Pragma - John Palmer.txt,1. Are there any other questions we should be asking?,"1. Are there any other questions we should be asking? 
   1. Antonio Juliano 
   2. Nick Johnson"
60,60 Pragma - John Palmer.txt,1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. Linting 
   2. Code review on my own and with other people. Check best practices from Consensys"
60,60 Pragma - John Palmer.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. First of all, I write unit tests in javascript and run those locally. 
   2. Interact with smart contract through remix solidity or Pragma. 
   3. Test my app in my own UI. Check etherscan to make sure that happened."
60,60 Pragma - John Palmer.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Web3.js  
   2. 0x.js 
   3. Truffle 
   4. Testrpc 
   5. Infura 
   6. Remix Solidity 
   7. Etherscan"
60,60 Pragma - John Palmer.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. Would be really excited to have a mobile metamask. Wallet Connect seems promising on that front. 
   2. Seeing Dapps do live token swaps using 0x (functionally exchanging coins in an application). For example, being able to swap tokens in a game."
60,60 Pragma - John Palmer.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. The smoothest user experience happens with MetaMask, but MetaMask has tons of bugs. Regularly need to disable/re-enable MetaMask. Causes a lot of headaches because there is a lot unexpected behavior."
60,60 Pragma - John Palmer.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. It’s not possible to bundle two different transactions together and pay with them at the same time with MetaMask. 
   2. I wish errors in contracts were surfaced better. Generally, it is hard to know when things go wrong in contracts[a]. 
   3. Gas limit 
      1. Wish I could do more within the fallback function. I know it’s limited purposefully, but I would like a secure way to execute code in it."
60,60 Pragma - John Palmer.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. Biggest pain point was learning Solidity. Not knowing how everything executed.  
   2. Not as easy to write something and test it right away, longer feedback loop.  
   3. Solidity documentation was out of date. 
   4. What would be the hardest part of teaching somebody to build a dapp? 
      1. Explaining the difference between wallets and contracts, and explaining to them the concept of Gas and how that dictates what they can store in their contract. Explaining how computation works on the network."
60,60 Pragma - John Palmer.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Web applications that interact with smart contracts, usually through MetaMask or Infura. 
      1. We built www.hashheroes.com as our first dive into Ethereum. 
      2. We built www.withpragma.com to make Ethereum development easier. 
   1. We built www.onhexel.com to make it easier for anyone to experiment with tokens and try new ideas."
60,60 Pragma - John Palmer.txt,JOHN PALMER,JOHN PALMER
60,60 Pragma - John Palmer.txt,[a]This is consistent message -- Maybe we list the top 7-8 problems at the end and then think through how they can be solved,[a]This is consistent message -- Maybe we list the top 7-8 problems at the end and then think through how they can be solved
82,82 Wyvern - Christopher Goes.txt,," 
"
82,82 Wyvern - Christopher Goes.txt,"05/18/2018 - Andy, Parker","05/18/2018 - Andy, Parker"
82,82 Wyvern - Christopher Goes.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Oyente 
   2. SolCoverage is super useful 
   3. Javascript tests 
      1. Current experience writing tests in solidity is terrible. Could be better with a better interpreter. 
      2. Current static analysis tools focused too heavily on reentry bugs, post-DAO 
      3. Security audit on Wyvern revealed that a non-zero contract balance tool 
      4. More edge cases needed between Solidity and EVM gotchas"
82,82 Wyvern - Christopher Goes.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. What are the barriers to Wyvern usability (by relayers) and liquidity? 
      1. Wyvern is an exchange contract, not a platform 
      2. Platforms will diverge in their purpose 
      3. Openseas could use Wyvern 
      4. Economic model set up which they could take fees. Can be used by relayers to take fees in Wyvern orders 
      5. Would more expect relayers in different verticals, more 
      6. Wyvern makes it easier to share liquidity (between relayers)"
82,82 Wyvern - Christopher Goes.txt,1. What are the best educational resources?,"1. What are the best educational resources? 
   1. Introduction to Ethereum Medium post: https://medium.com/@preethikasireddy/how-does-ethereum-work-anyway-22d1df506369  
   2. EVM yellow paper, Solidity documentation 
   3. Edge cases can be super technical - go look at the hardcore docs if you really want to know. There are no easy answers for some things, after all."
82,82 Wyvern - Christopher Goes.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Solidity, Typescript, Truffle for deployment, JS front end 
   2. Bytecode checking handled by libraries  
      1. Bytecode of your order (constructed in UI) is checked vs orderbook 
   1. How are you building the front-end to construct bytecode? 
      1. https://exchange.projectwyvern.com/ 
      2. Wyvern schemas library maps bytecode to visual representations"
82,82 Wyvern - Christopher Goes.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Solidity - I find it difficult to write complex, high-assurance code vs Rust/Ocaml etc. 
   2. Wyvern uses large exchange core contract 
   3. System of several contracts (delegate calls) needed to validate order 
   4. I wish there were easier ways to use typescript rather than javascript with solidity. Calls to the contract (from javascript) are mostly untyped. I definitely want better statically typed testing tools that are clear and easy to use."
82,82 Wyvern - Christopher Goes.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. Local, easy Solidity interpreter 
      1. Currently, tests are done on EVM through a blockchain 
      2. Most things you’re testing don’t rely on blockchain features (timestamps, block # etc.) 
      3. Easy interpreter that runs locally on computer not through ganache 
   1. Also, Better gas measurement- line by line gas cost analysis 
      1. His workaround was using solidity assembly code (well documented) 
   1. User account experience would be better if people used contracts instead of standard accounts 
      1. Wyvern already uses user-owned smart contracts as their user account 
      2. Instead of ERC-721 way (smart contract approved to spend your funds). If users had proxy accounts, they could create global limits on spending of tokens. Wouldn’t need to track approvals via various individual contracts. 
      3. Custom rules for fraud detection/reversal could be set up (i.e. double confirmation/ time period required for transactions > $xxxxx)"
82,82 Wyvern - Christopher Goes.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Wyvern is an application agnostic protocol for exchange of transactions, not tokens 
      1. Parameterisable orders - kitties with blue eyes, discovery mechanism 
      2. NFT, bonds, collateralized debt obligations, pools of cats, where people care more about the  parameters of the asset 
      3. Buying and selling of smart contracts. Use case- rental of smart contracts in exchange for fees 
   1. Like the 0x for transactions, ethereum assets 
   2. Proxy account system where users create DEX orders that execute transactions under specified conditions.  
   3. Abstracting over Ethereum bytecode - anything you can send over eth transaction you can buy/sell 
   4. Mostly written in January 2018"
82,82 Wyvern - Christopher Goes.txt,Christopher Goes,Christopher Goes
35,35 HelloGold - Dave Appleton.txt,," 
"
35,35 HelloGold - Dave Appleton.txt,1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. Helps that I’ve been coding for a helluva long time. 
   2. The hardest thing for new devs is getting to contact the people they need. 
      1. It’s also hard to find non-expensive auditors. 
   1. Gitter community is the key 
   2. Best dev communities or Gitter channels: 
      1. Go-ethereum 
      2. Solidity 
      3. Parity 
   1. I go to the specific one I need at the time."
35,35 HelloGold - Dave Appleton.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. Programming languages: Go 
      1. Compiled program with strong type checking, before the code even runs. 
      2. Enforces code standards, meaning your code is maintainable. 
         1. The linter formats the code in a certain way. This makes it very easy to understand. 
      1. I choose readability over speed Go over Rust."
35,35 HelloGold - Dave Appleton.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. About a year ago, it was ok running blockchain on your machine. 
   2. Switched from geth ropsten to Parity. 
   3. It’s hard to run a Parity node now – the toll it takes on your machine. 
      1. Both on mainnet and testnet. 
   1. You can’t do serious stuff with Infura: 
      1. e.g. getting events reliably 
      2. In Geth or Parity you can do some event filtering, but is tough to get right and maintain 
         1. Infura limits the number of logging or block calls -> to limit server complexity or costs. 
   1. Debugger 
      1. Ethercamp 
         1. Promote hackathons. 
         2. Ethereum Studio - what happened to it? 
            1. Gave you break points in Solidity code (?!) 
               1. You’re running in a simulated VM. You’re in your own dev environment. 
            1. Let you see all the state and local variables & methods 
         1. Came up with a node that EF took over and turned into EthereumJ 
         2. Ethercamp code is open-source -> Look into this… 
      1. I use Remix for prototyping something. 
      2. Will probably be a niche product.. Because not many developers are getting that low level. 
   1. Web3.js is another pain point: 
      1. Getting up to speed trying to do Web3.js is quite hard. There’s a lot of conflicting information. The examples don’t work. This is where you find that the node you’re using doesn’t support features. 
      2. Go-ethereum wrapper: abigen. This is my favorite tool."
35,35 HelloGold - Dave Appleton.txt,1. Who are the other people you think we should talk to?,"1. Who are the other people you think we should talk to? 
   1. Talk to Andreas to get to people in Singapore. 
   2. Rick Bale @ The team at Endorse.io 
      1. Or also talk to the CTO."
35,35 HelloGold - Dave Appleton.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Lead blockchain dev @ HelloGold. 
   2. Token backed by gold. 
   3. Does consulting as well – writing smart contracts & backend for blockchain projects"
35,35 HelloGold - Dave Appleton.txt,2/8/2018 - Robbie & Sina,2/8/2018 - Robbie & Sina
35,35 HelloGold - Dave Appleton.txt,Dave Appleton,Dave Appleton
42,42 L4 - Liam Horne.txt,," 
"
42,42 L4 - Liam Horne.txt,1. Are there any other questions we should be asking?,"1. Are there any other questions we should be asking? 
   1. It would be interesting to have a meta bounty for the most valuable stack overflow answers and that person gets a 1ETH reward. 
   2. If that became a really legit place that people in the community took seriously, that would be really great and of high value. 
   3. Getting a good mod on staff to manage this and then put it out!"
42,42 L4 - Liam Horne.txt,1. Was anything easier than expected?,"1. Was anything easier than expected? 
   1. Ethers.js. Really, it is super simple to use."
42,42 L4 - Liam Horne.txt,1. What are the best educational resources?,"1. What are the best educational resources? 
   1. I just read the code, man. What is the latest commit by ChrisEth on solidity? That is the best source. 
   2. Otherwise, Richard Moore knows everything. Literally."
42,42 L4 - Liam Horne.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Truffle suite. 
      1. Highest level comment: nice for specific use cases, but our use case does not match this. It’s built for writing a bunch of contracts, deploying them and interacting. 
      2. Our whole framework is based around off-chain interactions, for which Truffle is not well suited. 
      3. The whole Truffle networks thing is kind of annoying. If you want to ship a simple build that you put in your browser and run, it doesn’t work locally. You need to set up your own test environment. 
         1. Would be great to have a tool that could put together a super minified version of your ganache DB so that we could test across the same data.  
         2. We did some of this, but it’s not well known and not the default across the ecosystem. 
   1. Use ethers.js a lot 
   2. ABI encoder v2 
      1. Not supported by truffle. 
   1. Ganache 
      1. Can be very unreliable for a lot of important things. 
      2. E.g. bug in ecrecover on bytes (even if signed correctly) it will not return the correct address, It is just not implemented correctly, so we had to port over to Parity. 
      3. However, the parity dev client doesn’t throw errors on revert, it just logs them, and there is no option to change this. 
      4. The fact that the behaviours are different between these two things is concerning and frustrating. 
   1. Parity and Geth 
      1. I don’t understand why there isn’t just one-click Ganache replacement. If I just went to parity.heroku.app with a big button to launch an instance, that’d be awesome. Seems like low hanging fruit that could really be quite easily worked on. 
      2. Getting around all the configuration details is such a headache. 
      3. I just want to launch testnets, and even do so locally in a way that actually works in practice. 
   1. Anything to do with solidity at all really. 
      1. Libraries and tools 
      2. Remix 
   1. Playing with rust for its ability to write once, run everywhere. 
   2. Tonne of JS tools to quickly iterate 
   3. Typescript  - state channels need to run in the client, you want to be able to have code client side to decide what to sign and whether it is safe, and this is easiest in typescript. Would be better in WASM, but it’s not there yet."
42,42 L4 - Liam Horne.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Better UI testing. Would be awesome to have am MetaMask mock - wanna launch Chrome Canary, Safari, Moz and ganache will auto inject into the page some provider that could be used to test the full flow. We have also started work on this. 
   2. We need more to more people working on ethers.js!! 
      1. It is the best library out there, especially for quick operations, and we need like 5 more people at least working on it, 
      2. Web3 is too opinionated about exact use cases, whereas ethers is much more generic and simple and can have a lot of tools built on top of it. 
      3. We have been hesitant to develop non JS stuff, and haven’t yet because there is no ether.js equivalent. If there were an ethers equivalent in Rust that would be awesome. 
   1. In terms of solidity: ABI encode and decode (not written well yet, but will be super useful) are really game changing! It should be 0.3 or 0.4 or something!  
      1. Really bad documentation, especially around nuances to do with memory or storage objects etc. 
   1. When things happen in solidity, what you can do with it is not explained well. 
      1. For instance, one thing you can do is now use returndatasize to get the output bytes from some call you make. The minimum amount of code you need is a few lines of assembly. 
         1. However, this is not well known or used.  
         2. Our whole system is based on off-chain contract, and the rules in there need to be enforced by on-chain contracts. So I need to be able to interpret arbitrary function calls based on arbitrary logic/user input. This is very hard… 
         3. We do conditional payments, and these ensure that a bunch of things  are true, and then interpret the results of a bunch of functions and then take those outputs and pay people. All of these inputs, not contracts, and it gets complicated. 
   1. There is a specific error called unimplemented_error which comes up in a few cases. The only way to figure this out is to google it and there are 3 or 4 options to pick from, which seems sloppy.  
      1. Error messages could be much more specific about WHAT is unimplemented. 
      2. Would be great to see also in the docs WHY certain things are not yet implemented. 
   1. There’s some subtleties around exactly how libraries work in solidity. Will send through more details when editing. 
   2. Would be nice to have a debug mode for events, so that they will trigger regardless of whether or not there was an error so that we can use that as a console.og 
      1. Also, there should just be a console.log ) 
   1. If you emit an event with a dynamic struct and pass it a dynamic struct, the whole thing doesn’t make it back in the logs: it only shows the top of the event. It certainly doesn’t show the whole thing. 
   2. Whenever you hit gasLimits, you should be able to find out easily where it stopped and what line it is stopping at.  
   3. Better documentation on the assembly command sand specific example usage of them would be really good. 
   4. Breakpoints with context - these are the variables and scope etc. I will sometimes play around with delegatecall and then I don’t even know which context I am in anymore and this can block me for extended periods of time. 
   5. There’s a bunch of sneaky tactics: like keyless signatures. There is a way to generate a sig for an exact and specific kind of tx from an account whose nonce is 0, because then the create opcode gives back a deterministic address. 
      1. Please can we document this!? There should be a person on stuff who just plays around with this stuff and then documents it. 
      2. This is very serious stuff, if there were a keyless-sig library, so many other things would also be available. 
   1. Better google results for Ethereum! 
   2. More literature on how Ethereum can be used to do the things people think other blockchains are better at. 
      1. Highlight ethresear.ch and some post sthere, like one from Vitalik about businesses paying gas fees for their uses, which is EOS’ biggest argument. 
      2. Even worse, explaining plasma, where it should be feasible to have no fees at all."
42,42 L4 - Liam Horne.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. WASM is likely most useful for us medium term.  
   2. State channels are very light in terms of the actual contract code. But the off-chain contract code is a lot more complicated. It would be nice if all of the things we’re doing were easily runnable in the browser. 
   3. We have this concept of a module, which is some software that wraps a particular state channel application. We need code running in the client that determines whether or not it is safe to sign the next transaction, and where you store it, if you show it to the user at all etc. 
   4. We then have to implement a copy of what the contract does in JS and it would be way nicer if we just had a local environment to run some eWASM code because then we wouldn’t need to worry about the node at all. We wanna have it work in any random browser and WASm enables that. 
   5. Plasma and state channels require stripped and straight forward teams to work on this stuff that can build out all the tools we need. 
   6. Truebit is exciting."
42,42 L4 - Liam Horne.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Co-founder of L4 and Counterfactual. 
   2. Two main things: 
      1. Leading the development of counterfactual: a generalised state channels framework and protocol. It’s a simple, intuitive framework for developing DApps using state channels - so we do a lot of work on Solidity code and general work around EVM interactions. 
      2. Co-founders of ETHGlobal - so I spend a bunch of time talking to hackers and making sure that these events represent genuine progress and that people aren’t just stuck on bugs. The output to time ratio needs to be as high possible."
42,42 L4 - Liam Horne.txt,23/05/2018 - Andy,23/05/2018 - Andy
42,42 L4 - Liam Horne.txt,Liam Horne,Liam Horne
11,11 Consensys - Jon Maurelian.txt,," 
"
11,11 Consensys - Jon Maurelian.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
      1. We use Truffle a lot (never had to use Dapple or Embark) 
      2. Zeppelin used by clients -- would like to use EPM more 
      3. Runs a Geth node myself  
      4. Solhint linter  
      5. Solidity Coverage is test measurement coverage tool 
      6. ETHGasReporter (Takes your Mocha reports and says how much Gas your test used.) 
         1. Would like to see a fuzz tester. 
         2. Excited to learn more formal verification + bringing into practice – intro to Sergio?"
11,11 Consensys - Jon Maurelian.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Auditing: 
      1. A lot of my time is spent understanding what the developer was trying to do. There’s lots of back-and-forth and I want to maximize the probability that this is the only audit the company needs to do (end up doing a lot of free work this way & comms)  
         1. I would like to see better standards in what the idea of “ready to launch” is / what docs should exist / what the depth of testing should be. 
         2. https://media.consensys.net/preparing-for-a-smart-contract-code-audit-83691200cb9c 
      1. I want to see: 
         1. More efforts on gas optimization. 
            1. Using Assembly to do things. 
            2. Use different languages. 
      1. One thing that kills me: 
         1. When people copy-and-paste from Zeppelin or other libraries. 
            1. As an auditor: do I run a git diff? 
            2. Large inheritances. 
            3. Ugly repos. Not tidy. Clean directory structure is key. 
               1. These are real contracts. 
               2. These are testing contracts. 
         1. Wrote blog post so far. 
      1. What are most prevalent errors: 
         1. People should use EPM to import / or Dapphub. 
         2. Add linting -> Solehint (?) / Solium. 
      1. What happens in a security audit: 
         1. Run the tests. Usually because of different truffle or testrpc version. 
            1. Have npm scripts to run local version of truffle. 
         1. The easier it is to read tests, the better. 
            1. Self-referential tests. 
         1. Code coverage. Want all code to be run during testing important code to be run multiple times. 
         2. Test the full specification. 
         3. Static analysis: we use a tool called Nifroll (?) 
            1. Look at Solc warnings & analyze bytecode. 
         1. Reading the code is the most time-consuming part. Best opportunity to make us all more efficient: automated tools to help auditor pay attention to right parts. 
            1. This is the most annoying part of the process. 
            2. Devs need to have written down their intentions for the code. 
               1. Specification is evidence of thoughtfulness. 
         1. Use Oyente but it doesn’t find anything new generally. 
      1. We also think through game-theoretic attacks: 
         1. E.g. front-running (transaction-ordering stuff). 
      1. What’s ideal process for testing: 
         1. 1) run local testing 
         2. 2) run that test suite on some testnet. 
         3. Put system on mainnet with 2 week bug bounty. 
            1. E.g. ENS bugs weren’t caught on testnet. There was a typo that didn’t get caught. 
         1. Want: more scenarios were there’s economic incentives to break the system – vs. just out of good will of devs spending time. 
1. What are your biggest frustrations? 
   1. Documentation around best practices external to writing smart contracts 
      1. E.g. how to safely deploy your system. 
         1. There’s easy tricks how to make this easier.. 
         2. There’s lots of operational & security related info to share.. 
         3. Bounty this into one doc as resource list."
11,11 Consensys - Jon Maurelian.txt,1. Who are the other people you think we should talk to?,"1. Who are the other people you think we should talk to? 
   1. Piper Merriam 
   2. Nick Johnson 
   3. Christian Lundkvist (@ Consensys) 
   4. Joseph Chow (@ Consensys) 
   5. Mike Golden (@ Consensys)"
11,11 Consensys - Jon Maurelian.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. I work at Consensys Diligence doing audits similar to Zeppelin. 
   2. Also, I do technical communications / writing blog posts about best practices around security / Consensys docs / token repos."
11,11 Consensys - Jon Maurelian.txt,1/10/2018 - Sina & Robbie.,1/10/2018 - Sina & Robbie.
11,11 Consensys - Jon Maurelian.txt,Jon Maurelian,Jon Maurelian
33,33 Golem - Alex Leverington.txt,," 
 
 
"
33,33 Golem - Alex Leverington.txt,07/02/2018 - Robbie & Sina,07/02/2018 - Robbie & Sina
33,33 Golem - Alex Leverington.txt,1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. It would be nice if some of the audits were completely opened up – rather than some statement from the auditors. Could be a security issue. 
   2. What we have right now for audits can be improved upon with better tools. 
      1. Audits and testing framework go hand in hand. 
      2. Auditor should be able to write a test to demonstrate the problem at the EVM level. 
         1. Instead of the auditor suggesting some workaround or wrapper. 
      1. Or auditor provides proof for something that works well."
33,33 Golem - Alex Leverington.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Haven’t come across any tools for game-theoretical stuff. 
   2. For code: using scripts for testing. 
      1. Ideally there would be a testing env that can do “introspection” & which can evaluate the state of the memory. It should test the effect of code rather than the output of the code and make sure that the tests all integrate with Solidity.  
      2. It’s really hard to write unit test for the EVM state, as a result of some code executing. It would be good to have a test for this[a]. 
         1. Will be looking at tools in the next two weeks. 
         2. Having a tool which exposes the EVM state – for this you need some code that understands how Solidity stores data in the EVM. 
         3. For looking at EVM state: 
            1. Remix is ok. 
            2. Aleph0?! Doesn’t exist any more. 
         1. Some cases where your code doesn’t change, but the environment around your code changes –– having actual tests."
33,33 Golem - Alex Leverington.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. Debugging Solidity and EVM 
   2. Robust distributed system for content delivery. 
      1. Swarm and IPFS are both in Proof-of-Concept form. 
      2. IPFS is minimally viable when you use gateways. But there’s potential for improvement 
      3. I haven’t used either in a while –– but my understanding is: 
         1. Swarm is a little slow 
         2. IPFS is ok –– but you need the client software to run multiple p2p nodes. 
      1. All the demonstrations use HTTP gateways –– there aren’t tools and packaging for having production software on the p2p protocol. 
      2. Integration should be in the offchain code. "
33,33 Golem - Alex Leverington.txt,1. Who are the other people you think we should talk to?,"1. Who are the other people you think we should talk to? 
   1. Ambisafe - Olekseii. 
   2. Lunyr - they’ve been kind’ve ahead of the curve in implementing things. 
      1. I advise them. 
      2. They & cryptokitties have production code on mainnet."
33,33 Golem - Alex Leverington.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Can’t say what I’ve working on in a concrete way, but I am building a team and starting a new project. 
   2. I’m advising some projects. 
   3. Did some original stuff on the P2P system."
33,33 Golem - Alex Leverington.txt,Alex Leverington,Alex Leverington
33,33 Golem - Alex Leverington.txt,[a]Review,[a]Review
17,17 Dharma - Nadav Hollander.txt,," 
"
17,17 Dharma - Nadav Hollander.txt,1. Are there any other questions we should be asking?,"1. Are there any other questions we should be asking? 
   1. “What is the thing that makes debugging solidity code the hardest?” (for me, it’s that you can’t log anything at all, and no working debuggers)"
17,17 Dharma - Nadav Hollander.txt,1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. Write down in plain text documents what the invariants are for the contracts. Just very clear human speak for how the contract should behave. 
   2. Then write unit tests relentlessly. 
   3. Ideally, there would be code review, but he is coding solo in his stuff write now. 
   4. Finding an audit is a crappy process. No information on who is doing it, what prices look like, which auditors are good / have good reputations. 
      1. Talked to zeppelin 
      2. Talked to Consensys diligence 
      3. Talked to Quantstamp"
17,17 Dharma - Nadav Hollander.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Truffle to write JS unit tests. 
   2. ** There are not good mocking libraries for solidity ** 
      1. Had to roll my own mocking contracts for testing 
   1. A better native solidity testing framework with mocking would be awesome 
   2. No manual testing. 
      1. It’s still pretty painful to do this too"
17,17 Dharma - Nadav Hollander.txt,1. Other bounties?,"1. Other bounties? 
   1. A GREAT SOLIDITY DEBUGGER 
   2. A turnkey solution to the “trusted relay chain” thing. Just make it easy for people to spin up a side chain, run their programs on it, rewind history to a specific point in time, etc. 
   3. Also let you set up rules on it like locking up deposits for a week between the side chain and the main chain."
17,17 Dharma - Nadav Hollander.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. I like to use Typescript for testing. 
   2. 0x team built a great tool for generating typescript tests from ABI’s 
   3. Using truffle to test."
17,17 Dharma - Nadav Hollander.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. Good logging and debugging 
   2. Setting up your own side chain easily to test things on because it would be way faster"
17,17 Dharma - Nadav Hollander.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Building Dharma - open protocol for tokenized debt 
   2. Pretty much exclusively at the contract level, sometimes using stuff like libraries that wrap around contracts."
17,17 Dharma - Nadav Hollander.txt,Nadav Hollander,Nadav Hollander
49,49 MetaMask - Dan Finlay.txt,," 
"
49,49 MetaMask - Dan Finlay.txt,1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. Regularly TDD. Write a lot of tests. Truffle, dapphub etc.  
   2. eth-js or web3 to deploy contracts and write tests over to that.  
   3. Low-level js test. Thin wrapper around json-rpc, compile with solc, deploy straight to rpc. Used truffle v1 and they changed api, so truffle was behind. Switched to remix. 
   4. On metamask we use tests and QA. Automated tests and user tests. 
   5. Understanding the blockchain in the first place.  
   6. What’s happening under the hood and why I would care.  
   7. A big challenge people hit the first time is reading from blockchain versus proposing a change."
49,49 MetaMask - Dan Finlay.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Test network, mainchain, local test rpc, mocked user interface."
49,49 MetaMask - Dan Finlay.txt,1. Other bounties?,"1. Other bounties? 
   1. https://ethereum-magicians.org/t/strange-loop-an-ethereum-governance-framework-proposal/268/24  
   2. There’s a road map that needs to be executed for this to work. If I had to guess, here’s how it might unfold: 
   3. A client team with incentive to encourage a hard fork might implement “accepting on-chain hard fork proposals with client parameters” as a way to make it easier to develop the hard fork, in a community-focused way that gives users the power of choosing future forks in general, not merely supporting their own interests. 
   4. Once one client has implemented this, they should advertise their client as the client that gives the user the most control over the fork policy that their client uses, in hopes to either steal users to that client, or pressure other client developers to relinquish their own privileged decision making position by implementing support for the same. 
   5. There will probably be a friction period, either where some client devs don’t want to support this feature (either out of conviction or seeing it as a waste of time, since they may not want or need any hard forks), and so it might come down to people who have the most at stake (for example, people hoping for a funds recovery) to fund the development of this general feature for all clients. 
   6. If core client developers aren’t interested in supporting user-chosen hard fork policies, and refuse to review/merge these PRs, that might be a good reason to fork those clients, with hopes to merge after the changed version is proven stable. 
   7. IMO, any client not favorable to a user configured fork choice rule is entrenching their own power, and informed users should flock away from those clients as other alternatives emerge."
49,49 MetaMask - Dan Finlay.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. EIP-719 would make a great bounty to make this. Contracts exposing a way to request a human readable. render approval screen.  
   2. Could make transaction process human readable.  
   3. Moonlay by Mist team[a] is interesting and deserves more attention. 
   4. Browser permissions. These require browser vendor cooperation. The only way to expose web3 is to require read/write access to all websites. But we actually only want to expose to a few participating websites. 
   5. Web3 api"
49,49 MetaMask - Dan Finlay.txt,1. What are the tools/libraries/frameworks you use? ,"1. What are the tools/libraries/frameworks you use?  
   1. React, gulp, javascript, browserify. 
   2. Mocha for testing, build live reloading.  
   3. web3 api and rpc api.  
   4. sinon mocks.  
   5. Create a UI for smart contracts, run testrpc, deploy contracts, and query it. 
   6. If not already mentioned, are there any libraries you rely on regularly? 
      1. web3, eth-js, provider engine deprecating for json rpc engine, react. 
      2. bip-39, web crypto libraries.  
      3. Currently developing eth-keyring-controller"
49,49 MetaMask - Dan Finlay.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. Looking forward to helping people access funding for opportunity they didn't have before.  
   2. Non-profit to voluntary social infrastructure, small businesses that would have.  
   3. Social token launches. Make it more accessible to launch and sell coins for small businesses.  
   4. WeTrust, Bancor, Circles, Curve token issuance, Puddle, Ripple’s trust lines which is getting adopted by Raiden, Open Baazar Trusted, Keyva, Geo, Sherpal, Building Societies.  
   5. Also excited about remote keys stored as a service, i.e. some service to store consumer keys."
49,49 MetaMask - Dan Finlay.txt,1. What tools don’t exist at the moment? ,"1. What tools don’t exist at the moment?  
   1. The ability to make really lightweight user interfaces that subscribe to blockchain state.  
   2. Would prefer that json-rpc return promises.  
   3. json-rpc is unperformant, wish it was easier to contribute to."
49,49 MetaMask - Dan Finlay.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. Ultimately these things are not usable yet, because blockchain isn't scalable, and blockchain hasn't scaled. This is not a pleasant way to build applications.  
   2. Also, a lot of patterns aren't defined yet.  
      1. For example, in CryptoKitties when you lock a kitty, another user might retry kitty.  
   1. In general, conveying to the user [who is interacting with a smart contract] what's happening under the hood is frustrating.  
   2. There is a big chasm between what people are used to with current application and blockchain applications, i.e. things like gas. 
   3. Cryptokitties is great example of what developers are capable of creating on the blockchain. Established web design firm. What decisions did they make based on docs?  
   4. We need to address what constitutes a production grade app. 
   5. Scaling is eventually a part of that. Plasma chain interaction might look like in a web app."
49,49 MetaMask - Dan Finlay.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. User interface platform apps - Apps that enable other apps.  
   2. A few gateway apps.  
   3. First layer of education making it easier for users to interact with other apps. 
   4. I started with the original “Hello, World” Greeter contract from ethereum.org.  
   5. I liked it so much I forked it.  
   6. Originally they had 3 tutorials: Greeter, Voting, and Crowd-funding - would be great to see that kept more up-to-date..."
49,49 MetaMask - Dan Finlay.txt,Dan Finlay ,Dan Finlay 
49,49 MetaMask - Dan Finlay.txt,[a]All three of these deserve some research --,[a]All three of these deserve some research --
6,6 Augur - Jack Peterson & Sparkle.txt,," 
"
6,6 Augur - Jack Peterson & Sparkle.txt,1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. Pay others to think about it - no process yet.  We write a bunch of units tests, and we are going to run things through Oyente (Formal Verification). 
   2. Biggest problem - always has been - test thoroughly and comb through the code. Use static analysis tools. The biggest thing holding us back: 
      1. Maybe better standards for writing this stuff (NASA) 
      2. Create linting rules?   
      3. Have people working on project exhaustively review the code is the only way to do it right now. Certain classes of errors can be caught with unit tests, but we don’t catch everything."
6,6 Augur - Jack Peterson & Sparkle.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. Let’s talk specifically about UI issues / scaling? 
   2.   Stabilisation of contracts: we need clearly defined API’s against contracts. 
      1. When you change behaviours on a contract it has a multiplicative effect on the UI. One small change can have effect where you change 10 views. This lengthens dev cycles and having an API defined is important. 
      2. In general, it is hard to write business logic layer. Augur is writing a middleware node to overcome this. 
      3. Impractical to fetch large amounts of data from blockchain - it’s too slow. It takes a minute and half to get data (how do you manage that experience in the UI?). Running a remote geth node - fetching data from logs + contracts is not fast either. This can be improved. 
      4. Have an Augur node or SQL database -- pre-fetches and pre-processes Augur gnodes to make them available… But this also constitutes an annoying extra thing between ETH and client which can be slow / unusable. 
      5. Lookup mechanisms are primitive! 
   1. Size limit on contracts is really annoying -- can’t deploy to Ropsten because of it. It took significant engineering to put something on testnet (had to 51% attack it to increase block size). 
   2. Getting TestNet eth is hard ---  not a way to get a good amount of rinkeby (can only get a little bit from faucet -- don’t want people spamming it with transactions) 
   3. Really intense test suites running against Ropsten (Raiden…) 
      1. Would be great if we could easily spin up private chain to deal with that. Build a service to spin up private test nest that would have a certain amount of nodes. 
      2. Currently, this takes days of work -- what about standard service to do this?? People run these in different setting -- EC2 that is configured would be very useful..  Could store copies of Rinkeby and boot them up when people ask for them…  (Infura will evolve into this)  
   1. What would be the hardest part of teaching your Mom how to use a dapp? 
      1. How ETH account is different than an account on a regular website.  
         1. Few ways to login to Augur -- can create an account on the website, but you have to keep track of it (like creating an account on the website). 
         2. Airbit will create accounts for Augur that will behave like regular website.  
      1. Had 2 bounties -- posted on Bounties Network -- and it worked 
         1. Linter rules -- portable debugger 
         2. Unit tests die and you attach a debugger to it -- nobody supports break points."
6,6 Augur - Jack Peterson & Sparkle.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Back-end: Visual Studio Code with docker images that run pythereum for unit tests. 
      1. Solidity compiler - Solium linter everyday 
      2. Integration tests run against Geth/Parity nodes   
      3. Custom libraries -- all their own RPC code. 
      4. No web3.js (ETH.js libraries are better)  
      5. Can run locally or dockerized - have a CI pipeline (Travis) 
      6. Push to Github and deploy to Rinkeby 
   1. Custom deploy tools are a huge headache. Doing a full custom deploy is like launching a satellite into space. There is a huge chasm to cross and a lot of the stuff is non-obvious  
   2. Truffle is used for this -- very challenging because it lacks deep modularity and customizability. 
      1. Failed at random on different networks after working reliably against testrpc. It won’t tell you why and is deeply opaque. There is no error messaging and it is hard to use in general. The dependency of contracts gets very complicated (because logic is complicated). 
      2. There is definitely more work to get Truffle smooth for everyone  
   1. Actual contracts / delegate contracts -- build system is incredibly specific to their framework and difficult to adapt/customise.         
      1. Use Geth / Parity   
      2. UI -- react / redux. 
      3. Augur node is typescript ..  
         1. Lots of small things -- middleware library called ethereumjs-blockstream. 
         2. Library for generating keys and key files -- keythereum. 
            1. Key management is tough -- self signing (so can leave unlocked Geth instance, which is not good either)"
6,6 Augur - Jack Peterson & Sparkle.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. Raiden is coming shortly and will be very cool. 
   2. Looking forward to Proof of Steak.  
   3. UPort going live will be cool on Rinkeby. Is now integrated with Augur. 
   4. Nothing blocking Augur yet."
6,6 Augur - Jack Peterson & Sparkle.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Lack of a debugger - by far the biggest issue.  
   2. Need to print things from failing transactions and can’t do this 
      1. Right now, we just attempt the transaction until it doesn’t fail. We are often unsure why things fail, just keep going until it doesn’t. What’s missing is break points and executing code from that. That will shorten feedback cycles.   
      2. Development environment is really bad right now…"
6,6 Augur - Jack Peterson & Sparkle.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. Setting breakpoints in tests!  
   2. Salesforce Development:  Public thing where you post your code to it and everybody works off of it (lots of bounties projects now up from Status Open Bounties to Gitcoin and bounties.network). 
   3. Having clean Dev Nth without 30 things to set up:  
      1. React project will need to talk to Geth / IPFS / local = lot of setup is irritating. 
      2. If a transaction fails, the logs don’t get written. This needs to be in the EVM 
      3. Having many slacks is a big problem. We should have 1 slack with all developers. 
      4. Documentation is also terrible. 
         1. What documentation would you like to see? 
            1. Tooling / documentation / community takes like a decade to develop. (Check Kauri for a possible solution) 
            2. “How does Geth estimate Gas” - need to ask a bunch of people and it’s not written anywhere. 
            3. How much gas does a particular operation cost? Is this written down anywhere?  (People point you to yellow paper, but it’s very hard to understand.)  
   1. Issues are not addressed so well by the Ethereum Foundation. We’re talking about normal software development issues and sometimes the Foundation seems unfamiliar with best practices."
6,6 Augur - Jack Peterson & Sparkle.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. What steps do I need to follow to write these apps?  Isn’t anywhere here that helps you that much. 
      1. Development cycle for Augur has been roughly three years - and mostly not development stuff. We had first working version of Augur on testnet after 4 months (been iterating since then).  
      2. It worked, but it didn’t scale and we found security problems. One can’t release software with bugs in it. So this weird balance needs to be kept as we cannot actually “move fast and break things” 
         1. Start with simple system and iterate on it. 
         2. Only way to do it is to do it on testnet first!  There, you inevitably encounter edge cases or developers notice something."
6,6 Augur - Jack Peterson & Sparkle.txt,Jack Peterson and Sparkle,Jack Peterson and Sparkle
23,23 Ethereum Foundation - Fabian Vogelsteller.txt,," 
"
23,23 Ethereum Foundation - Fabian Vogelsteller.txt,1. Other bounties?,"1. Other bounties? 
   1. Need good IDEs: 
      1. Remix is good, but has problems. 
      2. Omkara – Remix for Atom. Sophisticated Solidity IDE for the Atom browser 
         1. This project can get a lot bigger. Could add debugging. 
   1. Formal verification 
      1. Write specifications for smart contract implementations, generated proofs that can be tested against EVM code.  
      2. Smart contract security / best practices 
         1. Also comes down to an editor – gives you recommendations, formatting, etc. 
   1. More examples in the Solidity documentation 
      1. There’s someone at the EF working on documentation now. 
   1. Unit-testing for Solidity contracts 
      1. Dapple: a tool for testing Solidity contracts using Solidity contracts – unmaintained for 2 years now. 
      2. How is it that we don’t have unit-testing for Solidity contracts?! 
      3. OpenZeppelin works on these audited pieces. 
   1. Ideas:  
      1. “Results-based” bounties. 
      2. having smaller tasks, having a lot of eyes on the project and setting smaller bounties. 
      3. Incentive structure for the reviewers & maintainers. 
   1. Idea: standing bug-bounties for large ecosystem projects & contracts, funded by EF."
23,23 Ethereum Foundation - Fabian Vogelsteller.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Web3.js 
   2. History: 
      1. Initially, it was built by Jeffrey Wilke. 
      2. Then Marek was working on it. Then I joined. 
      3. After Marek left, I took over. I’ve been on it on my own for the last and a half year. 
   1. Did a full refactor. I changed everything to be more intuitive, simple, how I thought it should be. 
   2. Changed to a Pub/Sub model – can currently subscribe for logs, transactions, block headers. In the future, you should be able to subscribe to state changes, account balance changes, or anything else.  
   3. It’s harder now to make global changes across Ethereum – because of different clients, agreements take time 
      1. E.g. Parity has the Pub/Sub model, and a parity-Pub/Sub model. 
   1. A lot of work around promises resolving based on conditions 
   2. Better documentation. 
   3. Account generation, key generation, signing, … 
   4. ABI Encoding, decoding, all are exposed. 
   5. Going forward: the API is good now, so someone should simplify the internals.  
      1. e.g. scrypt package is super large. 
   1. We hired a new person who starts in July. 
   2. The security model: either the person developing web3 is trusted, or you need a lot of people looking at it. 
   3. Would love to at some point decentralize & bountify the project. 
   4. The project doesn’t need too many more people. The main work is done, but future addition could take more work. 
   5. There are two groups around the identity profile now: 
      1. Put it off-chain: for privacy etc. 
      2. Put it on-chain: ERC725."
23,23 Ethereum Foundation - Fabian Vogelsteller.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. My future project: Lukso blockchain: EVM-based blockchain. 
   2. Working on industry-specific blockchains. 
   3. Built the Mist browser and Ethereum Wallet(worked with Alex van de Sande, who came up with the idea / design, and Fabian built it). 
   4. Works on web3.js. Proposed ERC20, ERC725/735 identity standard. 
   5. Joined Jan 2015 before mainnet. First person to make the user-facing / developer-facing tools intuitive. Simplified the RPC API. 
   6. My main focus now: half-time: web3.js & half-time: Lukso."
23,23 Ethereum Foundation - Fabian Vogelsteller.txt,5/7/2018,5/7/2018
23,23 Ethereum Foundation - Fabian Vogelsteller.txt,Fabian Vogelsteller,Fabian Vogelsteller
4,4 AmbiSafe - Oleksii.txt,," 
"
4,4 AmbiSafe - Oleksii.txt,1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. We have written our own tools which tell us, for instance, that “this variable is never used.” 
   2. Also includes optimizations to improve gas usage –– e.g. read address value and store in memory before loop, then call into it. 
   3. For contract address, for state variables, etc."
4,4 AmbiSafe - Oleksii.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. What are other great tools you have used? 
      1. Ethercamp – a smart blockchain explorer: 
      2. Heuristics while parsing and indexing the chain. 
      3. Had a convenient interface to explore the storage of the contract even without an ABI, the heuristics allowed you to see that e.g. “this key is this address”. And then showed this stuff in a human-readable way. 
      4. Then, they kind of stopped their resources. 
   1. More details on you data collection & devops tools? 
      1. For it to be useful, it requires time for refactoring. 
         1. It’s usable right now, but code could be improved. 
      1. Making complex deployments possible. 
      2. It won’t be too complicated to build. 
      3. Tool for: pulling balances of some tokens of some addresses 
      4. Tool for: making airdrops cheaper to do. E.g. 20k addresses with batch deposits happening through a smart contract. 
   1. LLL language? 
      1. If you’re using Solidity, you can’t have the maximum optimization in your contract. 
      2. Convenient way to write contracts in Assembly? 
      3. He wrote bytecode by hand, for the contract they deployed a million times. 
      4. Having a better low-level language that compiles to bytecode. 
   1. The call trace in Ethereum? 
      1. It doesn’t currently provide you with any help. 
      2. Using 4byte.io, you have the ABI of all the functions in the trace. 
      3. You can build a human-readable layer above it, and see what’s going on. 
      4. Can have a real stack trace for function calls between contracts, with what values. 
   1. Action items? 
      1. Oleksii to outline needed features / requirements for smart deployment tool. 
      2. Us: intro him to others interested in in collaborating on above & scoping out requirements."
4,4 AmbiSafe - Oleksii.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Our original vision was to do everything – testing, deployment, etc - through Truffle. 
   2. But, in reality, we’ve only used for testing. 
   3. First version of truffle was using the testrpc snapshots for reverting – good for unit testing. 
      1. In second, third versions this was removed. 
   1. Most companies use truffle for testing, on testrpc. 
   2. We made our own helper to make snapshots and do reverts on testrpc before/after tests. 
   3. Now, you can deploy the contracts from inside the tests you’ll have a freshly deployed contract. 
   4. Truffle’s designed to be used by a single project –– a fixed set of contracts that doesn’t change much. 
   5. But most of our projects have different platforms, so we end up deploying different versions of our contracts over and over again. 
   6. When Ethereum started being regularly congested 
      1. Built functions to overcome this – tool for: re-submitting transactions with higher gas prices when they don’t get accepted. 
   1. People don’t track nonces correctly: 
   2. Tool for: figuring which nonces were skipped, and creating transactions for them. 
   3. We check for compiler errors + static warnings in Remix. 
   4. I haven’t used automated tools like Securify. 
   5. I just read the contract for as long as possible, so that I understand the contract as if I wrote it myself."
4,4 AmbiSafe - Oleksii.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Started working with smart contracts in early 2016. 
      1. Started by writing tests using Truffle for other people’s contracts. 
      2. Then, started educating himself on Solidity, became a smart contract developer. 
   1. What do you do at Ambisafe? 
      1. Do custom development for clients. 
      2. Our own products: e.g. webhooks for contract calls. 
      3. Scalable supernode solution – logic to make the node robust, etc 
      4. Platform to issue tokens. Fixed set of contracts, but for every new token, they deploy a new contract as a gateway. 
         1. Gateway token contract – implements specific logic of different tokens. Fees, etc. 
      1. + Toolkit for DevOps / deployment: 
         1. Javascript functions to solve common problems, tx propagation issues, … 
            1. Tx propagation issues: sometimes your node gets a tx, but doesn’t propagate to any other ones. Mostly seen in Parity. 
         1. Deployment scripts 
            1. Checking that the gas that’s going to be spent if enough gas is provided. 
            2. Scripts to collect info from the blockchain, doing sanity checks to make sure it’s all good before proceeding, then collecting data after, … 
            3. COULD THIS BE A BOUNTY TOOL? 
      1. Cloning of contracts. 
      2. Most of their contracts don’t copy any code anymore."
4,4 AmbiSafe - Oleksii.txt,"5/17/2018 - Sina, Robbie, Andy","5/17/2018 - Sina, Robbie, Andy"
4,4 AmbiSafe - Oleksii.txt,Oleksii,Oleksii
38,38 Kleros - Clement Lesaege and Nico Wagner.txt,," 
"
38,38 Kleros - Clement Lesaege and Nico Wagner.txt,05/07/2018 - Andy,05/07/2018 - Andy
38,38 Kleros - Clement Lesaege and Nico Wagner.txt,1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. Write our own functional tests - but don’t provide proper security against malicious actor (can’t simulate those kind of network conditions easily). This is where fuzzing would be really, really useful. Try to understand how contracts could be exploited in ways that the developers can’t directly specify in tests."
38,38 Kleros - Clement Lesaege and Nico Wagner.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. Pre-interview review from Nico: 
   2. It would be great to have a language like python, C to build smart contract to avoid learning a new syntax even if the syntax solidity language is good like the viper project (https://github.com/ethereum/vyper). The developers lose time to learn it. 
   3. To have a js tool to communicate with the node it is very stable and useful. We have encountered many problems with the web3 library. The library https://github.com/ethereum/web3.js/ (0.14.0): 
      1. dependencies installation sometimes broke 
      2. use callback (promise is much better) 
      3. callback to know if a tx is mined break sometimes 
   1. So we choose to use ethjs.js instead of this tool. Apparently this has been fixed recently in version 1.0. But I haven’t tested it yet. 
   2. An easy tool to make a hash with a salt. It’s very difficult (for me) to find a library/hash function with the same hash than ethereum even more when there is a salt (https://gist.github.com/f43d7807b69402060dd6e4c8db730afc.git) 
   3. A boilerplate to build a dapp like http://truffleframework.com/boxes/. The last time I tested this tool it was very unstable, so we prefer to build our own boilerplate .https://github.com/kleros/dapper.  A very good tool like this can be very useful for the developers to easily build a dapp with all tools to communicate with the ethereum protocol. 
   4. A tool to sync the front-end state with the ethereum state like drizzle http://truffleframework.com/docs/drizzle/getting-started  
      1. I haven't tested this tool yet but I was told it was unstable. 
   1. Truffle doesn’t support the last solidity compiler (0.4.22)"
38,38 Kleros - Clement Lesaege and Nico Wagner.txt,1. What are the best educational resources?,"1. What are the best educational resources? 
   1. Github and Reddit are the most useful. 
      1. r/ethereum sometimes has posts with a lot of documentation and that is almost always a great place to start. 
      2. Trawling through GH issues looking for the comment that leads you in the right direction. 
   1. Readthedocs is also super useful - esp for Truffle and Solidity. 
   2. Can be very fragmented - there are a lot of sources and some are out of date etc. Not necessarily too bad to have a lot of sources as Google can generally lead you to the right place. 
      1. GitHub should be the hub for developer documentation particularly. 
   1. When I can’t find a solution, just googling is always very helpful. Sounds cliched, but someone else has almost definitely had that problem before. This often leads to a gitter conversation and the dev channels there tend to be fairly responsible."
38,38 Kleros - Clement Lesaege and Nico Wagner.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Smart contracts - Remix 
      1. Being able to copy address directly is really cool now. 
      2. Stopped using remix core because writing tests in truffle is actually quicker than clicking everywhere through the `remix IDE. 
      3. Solidity - can’t do operations in bytes. Want to split bytecode into address and integer and there is no easy way to do that. Could write some assembly (difficult to understand) or some hacky workaround that uses a lot of gas. 
      4. Byte manipulation is really needed in Solidity. 
      5. Add a solidity linter to Remix (already exists in Atom at least, but would be nice for having a properly integrated environment). 
      6. We really need a light client to use a DApp on a smartphone. 
   1. Truffle to run tests 
      1. Relying on other random libraries sometimes breaks things. If you use a library for tests that is not being used by your contract. I.e. it is very difficult to customise tests in truffle and you have to know some (undocumented) tricks in order to get around some basic stuff. 
      2. Better testing is required, more extensible and adaptable. We don’t need over-engineer things, but a better debugger and a properly integrated environment is necessary. 
      3. Truffle doesn’t work with latest solc - keeping all the tools in sync and up to date is a tough task and it delays and blocks developers from using the latest tools if they have not yet been supported across the ecosystem. 
      4. No warnings for deprecation!! 
   1. Frontend - ethers.js to communicate due to instability of web3. React, redux and redux-saga. Architecture with an API that is used to share methods needed to use Kleros easily. 
      1. Ethers.js is not well-known and it would be better to standardise things and have a  common library for everyone to use. 
      2. Main issue with web3 lies in callbacks. They don’t use promises because the 1.0 version does not support them well."
38,38 Kleros - Clement Lesaege and Nico Wagner.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. Decentraland rocks!! 
   2. 0x 
   3. Truebit 
   4. Proof of Stake in general will be very important going forward. In fact, everything that allows for scalability and lower tx fees with higher tps is absolutely critical. 
   5. IPFS is interesting too - right now they are hosting some part of the website/DApp themselves and that constitutes a central point of failure, so easy-to-use and maintain decentralized storage would be really, really great."
38,38 Kleros - Clement Lesaege and Nico Wagner.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. We REALLY need a very good web3 tool that is actually stable - the errors returned through the json-rpc are impossible to decode and find info on. Making this library more performant is a key issue."
38,38 Kleros - Clement Lesaege and Nico Wagner.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. A tool to analyse security of smart contracts better, especially complex smart contract suites. Very excited to see formal verification, whenever that comes out. 
   2. Fuzz testing is super important!! 
   3. Great to use truffle boxes, but all of them are unstable and not well maintained. Would be great to see more effort put in there. 
   4. Trying to implement chain-view: a tool to share the workflow of the ethereum protocol with the clients. Mostly used to analyse transactions (i.e whether they are successfully included in a  block) Can be very useful for client-side devs and i.t.o providing end users with transparency. 
      1. Not open source currently."
38,38 Kleros - Clement Lesaege and Nico Wagner.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. Building safe smart contracts takes a lot of experience and understanding of game theory, cryptography, complexity skills and an insight into the edge cases that can be used to exploit certain patterns and implementations. 
   2. There is no single point to learn about all these domains, so it can be really challenging to get exposure to all of the required fields, and eve to realise that these fields are important to writing good SCs. "
38,38 Kleros - Clement Lesaege and Nico Wagner.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Working on dispute resolution through smart contracts 
   2. Arbitration - process to decide who is right/wrong. Looks more like an arbitration DAO - system of incentives.  
      1. Enforcement 
      2. Decision-making 
      3. Incentivising people"
38,38 Kleros - Clement Lesaege and Nico Wagner.txt,Clement Lesaege and Nico Wagner,Clement Lesaege and Nico Wagner
18,18 dYdX - Brendan Chou.txt,," 
"
18,18 dYdX - Brendan Chou.txt,"05/18/2018 - Andy, Parker","05/18/2018 - Andy, Parker"
18,18 dYdX - Brendan Chou.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Mocha, js unit tests on Truffle"
18,18 dYdX - Brendan Chou.txt,1. What are the best educational resources?,"1. What are the best educational resources? 
   1. Solidity readthedocs, stack overflow, google searches etc."
18,18 dYdX - Brendan Chou.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Remix for smart contracts 
   2. Writing Javascript tests  
   3. Truffle for compiling and test, NPM to manage packages,  
   4. SolCoverage"
18,18 dYdX - Brendan Chou.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. Anything that helps us iterate faster. Tests currently take ~20 min. Currently doesn’t run more than one ethereum node per computer. Could be cool to split up tests on different ethereum nodes. 
   2. If you modify contract that inherits from another, you have to tell truffle. End up recompiling often."
18,18 dYdX - Brendan Chou.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Running tests in Truffle doesn’t show you why/where it reverted 
   2. Must search through binary instead 
   3. TIME uncertainty (for interest rates). Given that time is discrete on chain, it’s hard to determine the interest rate at a given block, and it gets even harder when you think about how to do that in as decentralised and trustless a way as possible. 
   4. Not being able to run untrusted code. If a borrower goes to repay a lender, it would be nice if that borrower could call a function to notify the lender to run arbitrary code in a safe way - maybe an obscure design pattern though. 
   5. Sending ERC token allowances are annoying.  
   6. Changing token standards is difficult but may be necessary (see ERC 233 and 277) 
   7. Creators and owners currently have control over smart contracts, not truly decentralized 
   8. >0 less efficient  than !== 0 due to Solidity handling of ints. These kind of edge cases in general are difficult to learn about and it is only really by writing contract yourself and testing them endlessly that you discover stuff like this. 
   9. Doing floating point arithmetic on chain, using Euler’s number, e, and other fun things (30,000 gas, not too expensive which is awesome). "
18,18 dYdX - Brendan Chou.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. On chain derivatives for erc-20 tokens 
   2. Open sourcing their code in next week or two 
   3. Only smart contracts protocol so far, no UX/Dapps"
18,18 dYdX - Brendan Chou.txt,Brendan Chou ,Brendan Chou 
16,16 Decentraland - Matias Bargas.txt,," 
"
16,16 Decentraland - Matias Bargas.txt,1. Was anything easier than expected?,"1. Was anything easier than expected? 
   1. No, not really. 
   2. Actually, extending the open zeppelin stuff was pretty easy. 
   3. Someone tried to exploit Decentraland and because we validate with open zeppelin it was safe, and we got that for free! 
      1. It’s great to see that security is taken seriously (though I still have a tonne of concerns about managing funds on public networks)."
16,16 Decentraland - Matias Bargas.txt,1. What are the best educational resources?,"1. What are the best educational resources? 
   1. I came from a strange backend doing tooling for languages for the last 6 years, so I don’t have the right approach to learning for most, I think. 
      1. Should be readable, reliable and consistent. E.g. I prefer typescript over js because it behaves as expected and has been validated by the communicated. Java > python because it also behaves better and more in line with your expectations. I need a language with only one way to do things. 
      2. If Solidity fulfilled this, why do we need to test it with javascript? 
   1. I never did any course, I just read contracts and code that seemed interesting. 
      1. Started with Zeppelin’s ERC20 and went from there through GitHub and started writing little tweaks and commits myself. 
   1. I had also had some experience with React, so that set me up well for DApps. 
   2. Having awesome and intelligent colleagues is such a bonus too!"
16,16 Decentraland - Matias Bargas.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. The whole Ethereum stack, basically. 
   2. Truffle 
      1. Integration with common developer tools is not fantastic. We need to start thinking about and building our tools in such a way that is easier for the guy/girl who comes after me to fix the issues that come up. 
      2. If we are changing the world, why are we still thinking in narrow ways about how our tools should be used and by whom? 
   1. VS Code 
   2. React, typescript, nodejs 
   3. Bablyon.js as an engine for VR 
   4. Web3 
      1. One of team members rewrote web3 into typescript for EthBuenosAires and all the tests are passing! Will post a link here after the hackathon. 
      2. There were typos there! 
      3. There was functionality not working (and there are billions of $’s running on top of it!)  
   1. IPFS for decentralized deployments. 
      1. Scalability is a concern here. If we want to deploy the whole metaverse in IPFS, we actually can’t. We need to replicate data in, I don’t know, Amazon or something because we can’t supply the level of connection we need to (just 100,000 users or so, not even in the millions). And even this will require bootstrapping nodes like crazy. 
      2. The IPFS cluster is still in alpha and not as stable as we need it to be. 
      3. We are waiting for scalability, but we don’t have the tools to monitor and handle that amount of information anyway, and this is a concern for us. 
   1. I haven’t used this yet, but this seems to be an interesting tool: https://github.com/nomiclabs/buidler "
16,16 Decentraland - Matias Bargas.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. The Decentraland client!! Woot woot. 
   2. Something that helps me to generalised solve side channels. 
   3. Status."
16,16 Decentraland - Matias Bargas.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Real monitoring information is tough to come by. I come from enterprise where this stuff just exists and the ability to fetch the data you want to fetch is never really in question. 
      1. Browsing through a node that has a huge list of unindexed transactions without all the information you need in an easily accessible place is hard. 
   1. With our own tools, we are building our own framework in order to move tx information from the blockchain to the db and from the db to the app. 
      1. We need transformations between each layer (which wasn’t that hard to build). But now we need a really generic way to do this and to publish it for people building DApps and using our SDK. And with a centralised DB, this is not possible. 
   1. We are failing with dev tools in general. 
      1. Let’s think about Java a bit. You have the JVM, a mature language and a complete set of IDEs. You also have a tonne of framework for building Java applications. There are also great monitoring tools. 
      2. Logging systems are a great and practical example of this. How can I log failures from Solidity without using events in a way which they weren’t really intended to be used? We need a Splunk equivalent. 
      3. Terraform, AppDynamics, etc - these things don’t exist for blockchains and really need to be built. 
      4. We need to focus more on tech and shipping things and less on the people with money or how our token is performing. 
         1. We care about nothing but the tech we ship. We encourage others toward similar feelings ) "
16,16 Decentraland - Matias Bargas.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. Starting from the infrastructure stuff: we need a new language to describe all the set of things that you need to do in order to deploy one or more contracts. 
      1. You have you application made up of a set of contracts that are all talking to each other: we need a decentralized logging system to make sure they are all still working properly and the events that are being dispatched by the nodes are correct. 
   1. A complete set of tools for testing. Truffle is not adaptable enough. 
   2. The work being done by Zeppelin on securing contracts and providing best practices around how to use audited contracts is great."
16,16 Decentraland - Matias Bargas.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. I used to be an investor, but came to crypto and Decentraland at the same time. 
   2. I used to work with Juan and 2 other guys who all joined the team at the same time. I really wanted to leave enterprise companies and loved the team already there. 
   3. It’s about the open philosophy, and break down the walls around the 1% of the 1% and diffuse power into the hands of everyone. 
   4. I was working on an online IDE for an in-house language at MuleSoft. Now the engineering manager at Decentraland."
16,16 Decentraland - Matias Bargas.txt,26/05/2018 - Andy,26/05/2018 - Andy
16,16 Decentraland - Matias Bargas.txt,Matias Bargas,Matias Bargas
58,58 Phil Castonguay.txt,," 
"
58,58 Phil Castonguay.txt,06/05/2018 - Andy Tudhope,06/05/2018 - Andy Tudhope
58,58 Phil Castonguay.txt,1. Are there any other questions we should be asking?,"1. Are there any other questions we should be asking? 
   1. Mostly about tools and enhancing developers lives. Finding information and answers is also really important, so ask more about the docs if you can."
58,58 Phil Castonguay.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. I struggle with fuzzing: it’s very useful for when different people are working on the same standards  - so we could easily run fuzzing between entirely different teams and see if the way they implement all the functions behave the same way and make sure the different implementations of the same standard are the same. Better standardisation is key. 
   2. Writes unit tests myself and try for 100% coverage. 
      1. I uses Mythril and am looking forward to formal verification. 
      2. Standards checking!! Here is a standard, put your contract next to it and check that it conforms to the standard implementation and then reuse a lot of the unit tests etc. that come with that standard."
58,58 Phil Castonguay.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Using Truffle, Ganache, testrpc 
      1. Most of the tests are not run in parallel, under-utilising my compute resources, can’t be adapted easily or extended. 
   1. Remix for quick prototyping 
      1. Actually quite enjoy using the debugger - I find it fairly easy to use. Would be great to play with single function testing locally so that you don’t have to run a full suite to test one or two things. 
   1. Typescript (mostly for testing) 
      1. Mostly following 0x standards - transcribing from typescript to js that make it really easy to define statically-typed tests. 
   1. Mocha, chai"
58,58 Phil Castonguay.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. 95% of the projects are not ready for the mainstream. Mass adoption necessarily requires state channels or plasma, or secondary consensus layer like a sidechain - so that is where we really need the most development as soon as possible.  
   2. Loom network etc. is also really exciting. 
   3. Sharding comes later, and is really exciting, but the stuff above needs to happen first."
58,58 Phil Castonguay.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. Nothing exists for state channels regarding how you pass messages and other p2p tools that allow different agents to communicate easily with each other. 
   2. Not easy to document this. 
   3. No easy way to test how peers are interacting with each other and you want to run simulations in state channels. 
   4. Scheduled transactions: we need a queue to avoid race transactions, can help lower gas costs. But we need off-chain system for nodes to communicate in order to implement that. 
   5. Easy to use and easy to test frameworks for this stuff is going to be super important. 
   6. Would be awesome to have some kind of simulation tool for multi-agent networks of this kind (even relevant for whisper and other parts of the Ethereum network, like zeppelin doing token mechanics simulations and analysis, especially around bad agents). More of a research tool than developer specific. 
   7. Simulator for the cross-client, cross-account signature schemes and management - right now the only way to test these schemes are to actually plug in a ledger and then test. Would be great to be able to test this from one place! 
      1. Couldn’t make this work in Truffle, passing in byte code and passing. But then, using mycrypto or Remix, it failed because the encoding, libraries and dependencies are different!! 
      2. Very confusing how bytecode arrays are passed in different tools and how you can convert from one type to the other, how we could concatenate a range of arguments in a single contract and then vice versa. Figuring out how that works (argument encoding) is really difficult to get right."
58,58 Phil Castonguay.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. Coming from a non web-dev background and more from data analytics meant that everything related to async was difficult to grasp. It’s unintuitive. 
   2. Solidity dev is not particularly difficult, but the best practices are extremely important and it is only really by experience that you learn the best and safest patterns. You need to know most edge cases and most potential attacks before you can write contracts that can actually be used. 
      1. Reading about past exploits really helps. Ethernauts is really great. 
      2. Each opcode and how much gas it costs - there are tables online, but not updated and it takes some time to search properly the Yellow Paper. In fact, anything related to code optimisation could be really cool to see. 
      3. Educational content focussed on code optimisation. Has not seen as much of it as he has of security and both are equally important. I.e. “Try to rewrite this contract in under 5000 gas” kind of thing. Who can achieve this, this and this with the least amount of gas. 
         1. Now implemented: https://g.solidity.cc/ "
58,58 Phil Castonguay.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Used to work for 0x, now I work as a SC dev and researcher independently. 
   2. I was the developer relations manager at 0x. 
   3. I am now focussing on state channels, signature-based improvements in general smart contracts, blockchain storage (utilising merkle trees and improving best practices). 
      1. Working with a gaming project that utilises state channels, unrelated to Raiden. 
      2. A lot of things that could be done off-chain by simply using different signatures: for crowdsales instead of using on-chain whitelist, you send a signed message for every participant and then they need to pass that message along with sending their Ether. Used by Polymath to get around the gas costs (could cost up to $15 000 just to whitelist everyone). 
      3. Working with chronologic on Ethereum Alarm Clock and other secondary markets, e.g. conditional execution where I want to make sure if x happens somewhere on chain, then do y.  
      4. Right now smart contracts don’t listen to each other and require 3rd parties to watch the chain and inform them."
58,58 Phil Castonguay.txt,Phil Castonguay,Phil Castonguay
83,83 XLNT - Matt Condon.txt,," 
"
83,83 XLNT - Matt Condon.txt,1. Are there any other questions we should be asking?,"1. Are there any other questions we should be asking? 
   1. All of the people in Cape Town that I just met."
83,83 XLNT - Matt Condon.txt,1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. Nothing, no real process besides following best practices. 
   2. Gets auditing. Should be running Mythril but hasn’t set it up yet. They have a great blogpost on finding unchecked self-destruct."
83,83 XLNT - Matt Condon.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Try not use truffle test.  
   2. Never written a solidity test, but written a lot of JS tests.  
   3. Also do some manual integration tests using Remix to deploy to Ganache or something. Using remix for this testing."
83,83 XLNT - Matt Condon.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Truffle, Infura, MetaMask, Etherscan, Remix, Solidity flattener. 
   2. If not already mentioned, are there any libraries you rely on regularly? 
      1. Web3, BigNum, moment, Numeral, Chai, Mocha"
83,83 XLNT - Matt Condon.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. Biggest hype tech is token-curated registries. Curate a set of things such that the resulting registry is more valuable than the sum of its parts. Use that to create economic incentives around rational behavior for the curation process. 
      1. E.g.: machine learning if you want to create public images for a dataset 
      2. E.g. structure government as a token curated registry where laws are curated into a constitution. If someone thinks their expertise will increase the value of the constitution they can become a curator 
   1. Mostly interested in 2nd layer projects that don’t exist for crypto’s sake"
83,83 XLNT - Matt Condon.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Iteration cycle is slow, especially compared to webdev 
   2. No visibility into errors in solidity. No error logging, no line numbers. Complete black box. 
      1. People end up commenting out lines, deploying testing, re-editing just to figure out bugs. 
      2. Needs to be fixed at the EVM level. 
   1. Logging is undefined. don’t really know how you’re supposed to log even though I have read all the docs. 
   2. The solidity inheritance interfaces are weird. Really likes Bamboo for this reason. 
   3. Ganache fixed a lot of testrpc issues. But it doesn’t support websockets so that’s annoying. But at least you can actually use geth in dev mode now. 
   4. Are you running into problems with any of the following: 
      1. Gas limit: Yes, in general. 
      2. Off-chain computation: Yes, open problem for TrueBit. There’s gotta be some best practices for setting up state machines and stuff like this. 
      3. State Channels: Haven’t used them."
83,83 XLNT - Matt Condon.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. Truffle has a lot of rough edges (documented elsewhere) 
   2. Gas profiling 
   3. Interactive debugger that works"
83,83 XLNT - Matt Condon.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. Mental model of how blockchains work. Also mental model of how Ethereum works. 
   2. I wrote an article called “Getting up to Speed on Ethereum” that answers the vast majority of question I had when starting. 
   3. Tokens are just numbers in a database with an API to add and subtract. Not some native object or something. 
   4. Solidity the language, besides its quirks, is not hard to learn. The hard part is understanding the environment it’s executed in, and what that means for your program 
   5. What would be the hardest part of teaching a software engineer to build a dapp? 
      1. “Solidity is just like javascript” - THIS IS SO LOADED WITH WRONG IMPLICATIONS 
         1. People’s understanding of web development doesn’t really transfer 
         2. Software engineering principles transfer, but it’s not just web development."
83,83 XLNT - Matt Condon.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Built a raffle contract, but didn’t ship it because I didn’t want to deal with real money in early 2017 
   2. First thing I shipped was steak.network 
   3. Now building XLNT and gnarly 
   4. Solidity contracts.  
   5. Off-chain clients.  
   6. Frontend interfaces for blockchain-backed stuff."
83,83 XLNT - Matt Condon.txt,Matt Condon,Matt Condon
66,66 Samsara Protocol - Gustavo Guimarães.txt,," 
"
66,66 Samsara Protocol - Gustavo Guimarães.txt,1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. Here in Berlin I have worked with solidity,berlin and they are amazing. Do really comprehensive audits. 
   2. Have also used formal verification tools: most often Mythril, sometimes Oyente. 
      1. I am also aware that the invariance checks etc. are also created by humans, so might not be entirely comprehensive. 
      2. 3 levels of checks: write code, write tests for the code, pass to another engineer to check, then formal verification tools, lastly do the audit."
66,66 Samsara Protocol - Gustavo Guimarães.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. I test in JS - unit tests mostly. 
   2. On average the ratio is 15:1 testing to smart contract lines of code and this can cause things to be quite slow, but it’s still good practice and seems necessary for immutable contracts. 
   3. Overall, quite happy with what comes out of the box with Truffle. 
   4. Have only added await async calls to make things easier to read. Have some Mocha extensions added for the same reason. 
   5. Prefer readable code, rather than fast code, especially when it comes to testing."
66,66 Samsara Protocol - Gustavo Guimarães.txt,1. Was anything easier than expected?,"1. Was anything easier than expected? 
   1. I was pleasantly surprised the first time I connected to a node using Infura, to the point that I decided then and there to not use my own node."
66,66 Samsara Protocol - Gustavo Guimarães.txt,1. What are the best educational resources?,"1. What are the best educational resources? 
   1. What I love about Ethereum is that most of the code is out there in th open - so I go and read it. 
   2. I often go to the Aragon repos and check out what they are doing and how they do it. 
   3. Already mentioned the open zeppelin library. 
   4. This is how I learn - just keep up-to-date with the best teams and the latest features the Solidity team is rolling out.  
   5. The solidity readthedocs is pretty good. 
   6. I have written some blog posts myself about how to do things in the Ethereum ecosystem. I sometimes go back to these and they are often very helpful."
66,66 Samsara Protocol - Gustavo Guimarães.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Use Truffle heavily. 
      1. Still a long way away from good debugging tools. 
      2. Using Remix out of habit, especially to check and step through opcodes. 
   1. Remix to dig deeper into what is going on with my solidity code. Especially the debugger there to dive into the EVM. 
      1. Have got used to the debugger here, but it is still so obscure when something throws an exception and difficult to find out why. 
      2. I have developed some intuition for this, but it’s really, really difficult for people just beginning. 
      3. No break points! 
   1. Use open zeppelin as reference for smart contracts - have worked on some educational projects with the Zeppelin team. 
      1. No issues with this. Haven’t looked into zeppelin_os yet. 
      2. But the idea is quite interesting - upgradeability and on chain libraries are cool. 
   1. Truffle-flattener library - make all your modules into one file. Use this to deploy, rather than doing it file by file. 
   2. React for frontend stuff. 
   3. Web3 to hook it all together. 
      1. Websockets (wss) are tough to work with. Having difficulty connecting to them through the infura nodes. 
      2. Overall, really happy with the new version - it solves a lot of problems, particularly around signing transactions safely."
66,66 Samsara Protocol - Gustavo Guimarães.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. Really excited about the research around scaling Ethereum. I am myself working on side project to do state channels. 
   2. There was an awesome lecture at EDCON, and was super inspired by David to try it out myself. 
   3. Not necessarily in the next 3 months, but there are so many ideas out there that it is bound to be exciting for anyone getting exposed to it."
66,66 Samsara Protocol - Gustavo Guimarães.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Syncing my node to the chain has become really difficult. I used to do this a lot last year, but now I use Infura because the node is so heavy/hard to maintain and it is just easier to do it this way. 
   2. Not at all good for fast development cycles. 
   3. I have learned to embrace how slow testing can be because everything is async there. 
   4. For the raffle system I need to draw a random number, and right now this is kind of impossible in the EVM. The holy grail would be to produce a really random number at compilation time that cannot be tampered with by miners etc. 
      1. Right now I am just using an oracle to do this."
66,66 Samsara Protocol - Gustavo Guimarães.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. Would be nice to have a tool that could get bytecode and re-engineer it into solidity code. 
      1. Sometimes I want to check if a function or some functionality and, if the contract has been deployed but not verified, it’s not really possible. 
   1. Open source block explorer."
66,66 Samsara Protocol - Gustavo Guimarães.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Blockchain engineer, working in the space since 2016. Mostly as a freelancer, helping companies solve business problems using blockchains. 
   2. Middle of this year, started Samsara Protocol. Started with idea of selling real estate on chain, and decided to use a raffle based system to do this. 
   3. Abstract idea from property to raffling all kinds of assets. 
   4. Smart contract developer in general."
66,66 Samsara Protocol - Gustavo Guimarães.txt,31/05/2018 - Andy and Mitch,31/05/2018 - Andy and Mitch
66,66 Samsara Protocol - Gustavo Guimarães.txt,Gustavo Guimarães,Gustavo Guimarães
45,45 LivePeer - Yondon Fu.txt,," 
 
 
"
45,45 LivePeer - Yondon Fu.txt,1. Are there any other questions we should be asking?,"1. Are there any other questions we should be asking? 
   1. Have we considered Grants, for longer-term things, vs. simply bounties? 
      1. E.g. Debugger would require longer-term maintenance, needs to develop in pace with Ethereum development. One-time bounty might not be enough. 
      2. Might be a fit for longer-term projects. Milestone-based? 
   1. Nicola Greco had some interesting ideas about incentivizing more open, collaborative academic research - are there learnings from thinking in this design space that can be applied to general open source?"
45,45 LivePeer - Yondon Fu.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Livepeer that runs as Daemon, unlock your wallet, give this an in-memory key. They have a DPoS protocol built-in. 
      1. Similar operational problems as someone running a validator node for Casper FFG 
      2. How does Daemon have access to private key, in non-manual confirmation from you? How do you do this securely? 
      3. What’s the proper key management flow. Not necessarily a bounty, but shared knowledge. 
   1. Need better documentation 
      1. Some of the new things you need to use are not documented yet. Writing documentation is a good way to introduce someone to internals of a project (they need to understand stuff to write the docs). 
         1. Example: heard this from Eric at Livepeer, there’s a tool in Geth called Pupeth: uses Docker containers to set up an Ethereum private network, gives you dashboard - would be awesome. 
         2. libp2p (networking layer for IPFS) especially since it’s gaining a lot of adoption but the examples for getting started are still a little sparse"
45,45 LivePeer - Yondon Fu.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. Smart contracts: 
      1. Contract compilation time is slow. We use Truffle compilation, which I thinks uses Javascript-bindings for C++ compiler.  
         1. Sometimes the compilation takes longer than the tests. 
         2. Running C++ compiler (solc) without the Javascript binding is way faster. 
            1. Can Truffle use the Solidity compiler internally, without the JS binding? 
            2. Maybe this is an easy feature add[a]. 
         1. I’ve played with DappHub. It’s much faster. 
      1. It would also be helpful to specify a compiler version to use without using a completely different version of Truffle 
      2. If you make a change, Truffle tries to be smart about which contracts to recompile. Sometimes this doesn’t work and you need to blow away /build dir and recompile. Not a great UX. 
      3. In ‘truffle console’: using JS promises are annoying –– can be verbose and hard to read. 
         1. Would be cool: having a transformation of that console, if it had async/await, or some kind of wrapper to make things seem synchronous. 
      1. If I see an error in a contract: 
         1. Debugging sucks. Right now: comment out code, recompile, deploy, run again. 
            1. Solidity is adding a “reason” string for the revert message. So you can have reasoning! 
      1. They have an internal Ethereum testnet running. 
   1. Writing the Go client: 
      1. Pain point: nonce management – 
         1. Options: 
            1. Geth web3.sendTransaction: geth sets the nonce for you. 
            2. The other option is to pick the nonce yourself. 
         1. For our client, we do the nonce management ourselves: there’s a method to get the Nonce, and includes transactions in “pending” state, but you don’t know them if you’re not a miner. 
            1. This is an issue if you submit concurrent transactions. 
            2. Parity has a custom method called nextNonce, which works properly –  
      1. Parity vs. Geth different methods – there’s more room for cross-client feature sharing, adding things into the standard RPC interface."
45,45 LivePeer - Yondon Fu.txt,1. Who are the other people you think we should talk to?,"1. Who are the other people you think we should talk to? 
   1. Guys at Aragon – Jorge or Oliver. 
      1. Ethereum Natural Specification style – basically a commenting style that can have auto-generated comments from it. Aragon is building a custom version of this. 
   1. Zeppelin. 
   2. 0x 
      1. Been putting out good developer tooling. Really into Typescript, static typing."
45,45 LivePeer - Yondon Fu.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Previously: working on smart contracts. 
      1. Truffle, testrpc / ganache-cli. 
      2. Expanded our test suite so they could run on multiple clients: could point at testrpc, at geth or Parity on PoA mode. 
   1. Now: Golang for our node. 
      1. Integrating our smart contracts with their node that does video-processing. 
      2. Working with Geth. There’s packages for interacting with EVM."
45,45 LivePeer - Yondon Fu.txt,1/10/2018 - Sina.,1/10/2018 - Sina.
45,45 LivePeer - Yondon Fu.txt,Yondon Fu,Yondon Fu
45,45 LivePeer - Yondon Fu.txt,[a]Research this --,[a]Research this --
22,22 Ethereum Foundation - Christian Reitwiessner.txt,," 
"
22,22 Ethereum Foundation - Christian Reitwiessner.txt,1. Other bounties?,"1. Other bounties? 
   1. Gas profiling: 
      1. Solidity does some upper-bound gas cost estimation – but its not very useful because it’s just an upper bound. 
      2. How to calculate: run the EVM with specific inputs? 
      3. Or: run the function with larger and larger arrays and find a “gas function” as a function of input size. But this also depends on state. 
   1. Solidity – 16 stack slots issue: 
      1. Soon: we’ll have structs, and this will be less of an issue. 
      2. When we have IULIA, this requirement will go away. 
         1. When IULIA compiles to EVM, it can move variables from stack to memory, after analyzing which is used or not. 
         2. Interesting: IULIA will compile to eWASM. 
   1. Inlining common function calls: 
      1. We’re conservative when it comes to adding new features in the code generation flow. 
      2. We already have an optimizer for IULIA which does inlining so that will resolve this. 
   1. The optimizer (in solc) has a switch which decides what to optimize for: code size, execution cost. 
      1. This exists, but is rather crude – it assumes every opcode is only run once and this assumption breaks down if you have a loop. 
      2. Have Remco share his 0x example with Christian – and how it could be improved in terms of gas estimation. 
   1. Constant delegation. 
      1. Have Remco to share example of hash not being calculated at compile-time. 
      2. Having a good technical writer – who can understand the technical details of Ethereum, and improve the documentation. 
      3. Another model could be to create bounties for improving the documentation. Won’t be bounties for a specific issue but general rewards for improvements to the documentation. 
   1. Improving the documentation for Solidity 
      1. They’re too deep inside this. Having an external viewpoint would be helpful. 
   1. In the research area: due to the way research funding works – people publish the work, but do no maintain the software or integrate with other tools. 
      1. Integrating research software with development tooling & keeping them up to date. 
      2. Big example: Formal Verification software 
         1. Five or six tools that similar to Oyente. 
      1. Remix has a plugin architecture – possibly supports Oyente. 
   1. Idea for tool: being able to test very quickly if a contract implements an interface. 
      1. The problem is that you cannot enumerate the functions of a contract. 
      2. There’s a way to resolve this."
22,22 Ethereum Foundation - Christian Reitwiessner.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. Tell us more about computational scalability on SNARKs, STARKs, Truebit? 
      1. Research on SNARKs implementation – ZoKrates project. Only a PhD student right now – Jacob. 
         1. A toolchain for creating ZkSNARK-enabled smart contract 
         2. Need help there, and can pay $ for it. 
            1. Why they haven’t focused on getting more people, is the project management burden there. 
            2. What kind of help we need: 
               1. Implementation. 
               2. The project is a compiler that takes a high-level language, turns it into an arithmetic circuit. It’s PoC stage right now. Also needs help with the direction the project needs to go. Needs an evaluation of use-cases. 
               3. Also needs people with cryptography backgrounds who can implement efficient arithmetic circuit gadgets. 
               4. Someone who can deal with Rust as a language finite-fields. 
               5. Open-source on Github. 
               6. Potential help: university research partners –– Dan Boneh? 
         1. It’s early, PoC stage. –– currently the elliptic curve pre-compiles are too pricy. 
            1. The first step is to see how much it costs, and if it’s feasible because of this. 
            2. Analyze use-cases, and see whether its not too expensive. 
            3. Improve the trusted setup experience. 
   1. Solidity? 
      1. Development resources: we’re pretty much good right now. 
      2. We have issues marked: “good first task” or “help needed” – these are good to pick up by external contributors. They’re small in scope, so maybe doesn’t make sense for large bounties. 
         1. Usually someone creates a PR, we have comments, they update the PR, we make comments, then the contributor loses interest. 
         2. Maybe: could have a person who is responsible for external contribution across all projects? 
         3. Another project: analyze external contributions, and understand why they weren’t completed. What was missing in the description / what was the issue? If you’re creating an issue for external contributors, what is the detail / info you need so it gets picked up. 
      1. Where we need help: 
         1. External people to translate the documentation. 
            1. This is a big effort. Requires management. Need to keep translation up to date. 
            2. This doesn’t really exist right now. Only have a Russian / Spanish translation that are old and rudimentary. 
            3. There’s people to do the translation –– need someone to do the project management. 
         1. More feedback from people who try out the most recent version of Solidity before it is released. 
            1. Before – Remix was set to the most recent development snapshot. Now it’s set to latest stable, so don’t get immediate feedback. 
            2. Truffle and etc only upgrade manually – so its more stable – but slows down the feedback / dev cycle. 
            3. How would this work: 
               1. “Reminder: people please try out new versions.” 
               2. Way to give feedback exists: creating an issue on Github OR their Gitter channel. 
            1. Most people can’t use the latest the version – because the toolset doesn’t allow it. 
               1. As part of the CI, we’re running some tests with specific libraries. 
            1. Possible solution: 
               1. People submit their contracts to Solidity team. 
               2. They get integrated into their CI pipeline – every time a new version is pushed, their contract tests are run. 
               3. We get contacted if tests pass re new version working. 
         1. Tools for developing Solidity 
            1. It’s written in cpp, we usually cmake toolchain for building, cpp-ethereum for semantic tests thinking about switching to their own interpreter to speed up tests. 
            2. Uses cpp-ethereum with a few extra RPC endpoints. Let’s you rewind the blockchain to a particular block. It’s also allows you to modify the timestamp in the next block. 
               1. They’re standardizing these API endpoints. -> include ganache-cli in these discussions? 
               2. Ganache needs to have this ability. 
            1. Having a testing only Ethereum blockchain 
               1. Has a memory-only blockchain is mainly meant to run tests on smart contracts. 
               2. Similar to ganache but performance could be improved? 
                  1. Ganache has a UI 
                  2. To improve: high-throughput, many txes at once. 
   1. Notes on IULIA: 
   2. Compilation from IULIA to EVM is finished. 
   3. Optimizer is 90% finished. 
      1. This is why the ABIcoder isn’t out yet, because it depends on the optimizer. 
   1. Big remaining chunk of work: 
      1. Writing code generator to go from Solidity to IULIA – this is in solc. 
   1. A year away."
22,22 Ethereum Foundation - Christian Reitwiessner.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. 90% of my time: design of Solidity language and its implementation 
   2. Formal verification part of the language – 
      1. Deprioritized over the last 2 months. Will take on again in April. 
   1. Other projects: 
      1. General research 
         1. Less research re sharding or plasma – More research on computational scalability of SNARKs, STARKs, Truebit 
   1. Handed off cpp-ethereum to Pavel – not working on it as much."
22,22 Ethereum Foundation - Christian Reitwiessner.txt,2/26/2018,2/26/2018
22,22 Ethereum Foundation - Christian Reitwiessner.txt,Christian Reitwiessner,Christian Reitwiessner
76,76 Ujo Music - Simon de la Rouviere.txt,," 
"
76,76 Ujo Music - Simon de la Rouviere.txt,1. Are there any other questions we should be asking?,"1. Are there any other questions we should be asking? 
   1. Curious about how we plan on dispersing the money? How do we decide on spinning up new teams to work on stuff or find existing teams working on it and enabling them. 
   2. Wouldn't make sense to fund multiple implementations of something? Take the block explorer: what about etherscan, alethio etc?"
76,76 Ujo Music - Simon de la Rouviere.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Mythril is very useful and we use it. 
   2. Writing extensive unit tests in Truffle covers a lot of the low hanging fruit and gives you a great understanding of your contracts and how they really work. 
   3. It really depends on the use case: i.e. checking for over- or underflow means you sometimes need to be really careful. 
   4. Best resources to learn about tests? 
      1. The EVM is notoriously bad at providing good error reports. 
         1. Revert with reason will be really helpful for this. But there might still be edge cases where it is not certain what transpired. 
            1. You used to require a lot of context in order to sense what 
      1. A lot of my knowledge comes from debugging myself and following the traces through the EVM. Sometimes you just have to vasbyt (an Afrikaans word meaning, roughly, grit your teeth and just hold on). 
         1. Solidity is moving more towards safer defaults in general, which allows more advanced devs to take the guard rails off when we know what we are doing: 
            1. Explicitly setting the constructor (to avoid some of the Parity hacks) 
            2. Addition of transfer function to automatically check for failure of sends (which was previously manual). 
      1. After DAO hack, I started collecting information and Smart Contract best practices repo, which is now maintained by the Consensys Diligence team.  
      2. Infura uses a load balancer between multiple Eth clients, but these have different tx pools, so during the migration process, it is pinging infura, but it is shuffling the request to different node each time, which eventually cause the migration to fail. 
         1. However, the error reporting from the client claims that the nonce is too low, which is technically true, but not at all descriptive about why the migration actually failed."
76,76 Ujo Music - Simon de la Rouviere.txt,1. Other bounties?,"1. Other bounties? 
   1. Autonomous artist blueprint has existed for more than a year. Someone just needs to copy-paste and build it: https://medium.com/@simondlr/lets-summon-an-autonomous-artist-a-bot-that-creates-owns-and-sells-its-own-art-ada1afad086a  
   2. A lot of curation market stuff: usage, governance and management of the community. 
      1. There are different interesting ideas around this. Dmitry from Ocean proposed a model where a bounty is funded collectively, then it graduates to an NFT after a certain threshold. Will go back to him for more details on this. 
      2. The usage of curved bonding for network effects on bounties: let’s say Status wants to issue a bounty. The buy Status bounty tokens on a curved bond, backed by SNT or Eth. This is valuable because, over time, if Status only uses Status bounty tokens for their bounties, you slowly build up a network effect around that token. Can either sell out or hold the tokens if you believe more people will fund more bounties in the futures. This allows people to speculate on the work being done in Status - it is a really a super-powered donation though. 
      3. It’s kind of like network effects for investment or VC."
76,76 Ujo Music - Simon de la Rouviere.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. What are the biggest challenges for Ethereum right now? 
      1. It’s still uncertain to me how the development experience will change when scalability improvements start to get deployed. 
         1. Whether it is sharding, plasma, side channels etc, what changes from a development perspective? 
         2. How do we choose which shard to inject our contracts into? How does the network load balance this? 
         3. What does a dev need to change for Plasma, and what does it mean for UX? Does it need a separate MetaMask, or do we need to build our own in-browser wallets again?"
76,76 Ujo Music - Simon de la Rouviere.txt,1. What are the best educational resources?,"1. What are the best educational resources? 
   1. Google, gitter, ETH stack exchange. 
   2. Some Consensus resources that we all use. 
   3. Most of Consensys’ internal stuff is moving toward being external-facing and most of his stuff should be open in the future."
76,76 Ujo Music - Simon de la Rouviere.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. I am the smart contract lead at Ujo, so spend most of my time writing Solidity and tests. 
   2. Writing tests in Truffle and to deploy contracts. 
      1. Generates helpful build file with info about deployment that can then be ported into any frontend app through a simple JSON file that can have multiple networks and contracts specified in it. 
   1. Sometimes use Remix, mainly for catching syntax errors more quickly (than Atom at least, my other IDE). Works well for quick interaction (using MetaMask) with smart contracts. 
   2. Just truffle’s contract libraries to interact with frontend 
   3. Use Oraclize for on-chain price oracle for Ujo stores. 
   4. Strings library built by Nick Johnson that helps us parse strings in the registry more easily. 
   5. Wrote our own ERC-721 implementation as well. 
      1. After CK came out, there was no fully standardised implementation. The community was still iterating over the standard, OZ also wrote one. There were some stylistic changes that Consensys wanted over the OZ work, so we still needed our own implementation. 
      2. Also just helps with my own understanding to write this stuff myself. 
   1. Curation market specific tools? 
      1. Trent from Ocean Protocol is pioneering the engineering approach to analysing token systems using well known tools from his trade that I don’t understand as well as he does. 
      2. We use a lot of different curves for curved bonding markets, and there are some curves that are more easily visualized and assessed. 
      3. xkcd graphs makes some interesting and easy to understand stuff."
76,76 Ujo Music - Simon de la Rouviere.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. Curation markets! 
   2. More collectible stuff. The art scene is finally catching on, which is great. The cypherfunks, which were four years too early, are being discovered again through no work of my own, which is awesome. 
   3. I just want more people to be able to do what they want to do, more often."
76,76 Ujo Music - Simon de la Rouviere.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. For me, it’s always been harder to evaluate this, because I come from building on BTC, which is orders better than the dev experience there. 
      1. It’s always been “good enough” for me, even though it is improving rapidly all the time. 
   1. Issues with Infura detailed above cost me quite a bit in failed deployments, and the only way I figured it out was by having direct access to the Infura team, which others obviously won’t and that is an issue. 
   2. How deployments work with different gasPrices - it’s not clear if you should worry about things like time outs during the process. What if you set a low price, end up waiting hours, and your internet suddenly drops? What if there is a time out on the request to an API somewhere that fails? 
      1. I always default to a higher gasPrice when deploying to make sure it actually passes and is including. 
      2. Better documentation around best practices and common pitfalls here is definitely needed. 
   1. Ganache has visual interface to their test explorer. Sometimes you want something with a more visible understanding of what transpired with certain transactions. Like etherscan displaying internal transactions and well-known contract events, but with visuals. 
      1. Visual analysis/element would really help developers understand what is happening in the network. 
      2. When you have multiple contracts for a DApp, you need an up-to-date document/visual interface that shows you latest deployed contract and its methods/interfaces.Auto-generating visual tools for SC that are meant for developer aid. 
      3. At Ujo, we have 4 contracts, a registry, a payment handler, badges (collectibles), oracle. Gets put into JSOn file in /build, but this is not visible or particularly useful for anyone but me.  
         1. Take some info out into separate document so the rest of the team can easily see where they are deployed and what they do at a higher level."
76,76 Ujo Music - Simon de la Rouviere.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. One thing that comes to mind is a mature, incentivized storage platform does not really exist, still. Swarm has never really answered my immediate needs, and I worry sometimes that it is a bit too similar to something like S3. 
   2. Wouldn’t need to solve all problems immediately, just needs to be better than what we have today. Infura provides access to the IPFS network, and then backs them up themselves so that they have guaranteed access to it. Which is good enough, for now. 
   3. In the future, if you’re going to have 1000’s of GB of media, this will need to be looked at much more closely. 
   4. Protocols labs multi-hashing scheme is very useful in addressing the content."
76,76 Ujo Music - Simon de la Rouviere.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. I have been in blockchain since 2013 working in BTC. I have always looked at this stuff as a tool to enable creators, so I built an app that let people sell digital goods for BTC. 
   2. Started building on Ethereum when it was announced in 2014, and then more actively late 2014, working in the stack. 
   3. Currently most time on: Ujo music - decentralized licensing platform for musicians. 
   4. 30% of time on Curation Markets - monetize new networks of value and coordinate toward shared goals."
76,76 Ujo Music - Simon de la Rouviere.txt,23/05/2018 - Andy,23/05/2018 - Andy
76,76 Ujo Music - Simon de la Rouviere.txt,Simon de la Rouviere,Simon de la Rouviere
10,"10 Chainsafe - Greg, Stu and David.txt",," 
 
 
 
 
 
 
"
10,"10 Chainsafe - Greg, Stu and David.txt",1. Are there any other questions we should be asking?,"1. Are there any other questions we should be asking? 
   1. Where do we actually find out more about all these tools? ← highlight top-mentioned tools in report."
10,"10 Chainsafe - Greg, Stu and David.txt",1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. Mythril, as mentioned above."
10,"10 Chainsafe - Greg, Stu and David.txt",1. How do you handle testing?,"1. How do you handle testing? 
   1. Mostly unit tests in mocha and chai. 
   2. Mostly using Travis to automate the pipeline. 
   3. Projects are fairly young and PoC - so not necessarily a major concern at this point. 
   4. If not already mentioned, are there any libraries you rely on regularly?"
10,"10 Chainsafe - Greg, Stu and David.txt",1. Was anything easier than expected?,"1. Was anything easier than expected? 
   1. Community! Going to EDCON was an eye-opening, validating experience. Impostor syndrome is real and the remote work can be very isolating, but you can also own that and it is inspirational to see. 
   2. Perfectly OK to make stuff up as you go. 
   3. Availability of people, and the amount of people who can and will answer your dumb questions. 
      1. Also, it’d be awesome to actually put computer science background to use."
10,"10 Chainsafe - Greg, Stu and David.txt",1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. JetBrains suite as an IDE. Remix comes in there for extra convenience but has it faults and is not totally integrated. 
      1. Biggest problem with Remix is that it is written in jQuery and it is monolithic. Don’t know when it compiling/rebuilding contracts. Spinner doesn’t spin more than once, no responsiveness, very frustrating. Well laid out for an MVP ) 
      2. Pass in data as strings and not having it parsed as strings is frustrating. 
      3. Will meet with Remix team this week to advance development further. Seeing it as only 2 devs hammers home how under-resourced a lot of this software infrastructure is. 
      4. Debugger has not really been touched since the first version. Critical software lagging behind is not good. Still better than the truffle debugger though. 
   1. EVMLab - has an old school debugger that lets you step thru opcodes and examine what is happening in memory and storage. Has not been maintained recently, so you need to hack it together yourself. 
   2. Web3 and truffle sometimes, but not often. Often Remix and a couple RPC calls with console.log()s suffice. 
   3. Looking over Mithril and visualisation of the control flow seems really interesting. Handles all the low hanging fruit, as an automated system should."
10,"10 Chainsafe - Greg, Stu and David.txt",1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Up to date documentation!! 
   2. System dependence stuff would also be great to include (Mac OS/Windows/ Linux) 
   3. Thing s are fairly minimal, often have to hack together things yourself because the specific functionality you need is not implemented 
   4. When doing tests, get very unhelpful errors. Make them more specific! EVM errors in general are garbage. 
      1. Their error handling, geth specifically, basically used the same error in most cases to propagate it out. Go through subsections of EVM and write proper errors[a]. 
   1. Are you going to be using revert with reason in that case? 
      1. Call contract that deploys another contract. If gas is too low, it will just revert with no clear error. Needed to raise the gas, and it took 3 days of trial and error to figure it out (not clear if they will be or not, answer was more general about past problems they have had)/"
10,"10 Chainsafe - Greg, Stu and David.txt",1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. EVMLab certainly has some of the features required, but they are very inaccessible 
   2. Directly execute arbitrary code and trace through it in nice fashion that is not just some JSON output. 
   3. Need to be able to step through those traces easily, which is also not possible there currently. 
   4. Go implementation of parity bridge (to make it leaner). Only one bridge that is open source, so having another one would be useful, especially seeing as Parity devs don’t document well, especially changes between versions. 
   5. Some level of standardisation around bridges and agreement about how they should be structured. 
      1. What does interoperability actually mean in this context?"
10,"10 Chainsafe - Greg, Stu and David.txt",1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. Greg: Looked at web3 documentation (as it was more web based stuff at first). 
   2. Truffle pet shop worked well for a lot of people 
   3. David: Ethereum wiki was starting point, but you HAVE to talk to people about it. 
      1. Reinforcement comes through discussion and USE. 
   1. Stu: some limited solidity tutorials, go on to gitter and ask questions with code snippets nd other organic community involvement."
10,"10 Chainsafe - Greg, Stu and David.txt",1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. David: EVM layer stuff: interactions between opcodes, JS dev and web3 also comes into this at the other side 
   2. Greg: Reimplementation and adding functionality to the EVM and a lot of “bridge work” 
      1. Setting up bridges, working with parity bridge and other existing contracts 
      2. Added efficiencies for personal needs to types when blocks are getting written. Basically recreated in the EVM to get a sender. 
      3. Way blocks are written into the merkle tree. 
      4. Parity bridge is cumbersome because it is not well versionized and depends on the version of the EVM you are running/that you forked from. Often requires a ton of extra configuration. 
   1. Stu: solidity and PM (managing groups of people working at that layer of the stack), building smart contracts for clients"
10,"10 Chainsafe - Greg, Stu and David.txt",5/14/2018 - Andy and Mitch,5/14/2018 - Andy and Mitch
10,"10 Chainsafe - Greg, Stu and David.txt","Greg, Stu, David","Greg, Stu, David"
10,"10 Chainsafe - Greg, Stu and David.txt",[a]possible bounty,[a]possible bounty
25,25 Ethereum Foundation - Martin Swende.txt,," 
 
 
"
25,25 Ethereum Foundation - Martin Swende.txt,"04/19/2018 - Andy, Robbie, Connor, Parker","04/19/2018 - Andy, Robbie, Connor, Parker"
25,25 Ethereum Foundation - Martin Swende.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Definitely a need for more developers, either full time or for some scoped project. And not just people wanting to work on ethereum-js!! 
   2. Proper debugger would be easy enough to scope out. Built into geth VM, a standardised debugger with hooks so that it can be hooked to FireFox debugger etc. 
   3. Network visualisation analysis tool is also very NB."
25,25 Ethereum Foundation - Martin Swende.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. I was a security professional, doing consulting, came into Ethereum a couple of years ago solving bounties for VMs. 
   2. October 2016 - became Head of Security at The Foundation.  
   3. Monitoring mainnet. 
      1. Being able to react when there is a consensus flaw. Had an API call to geth, called getBadBlocks. Geth will save bad blocks and you can query node for it. 
      2. So, we run geth and parity simultaneously. Ask parity node for last block, ask geth for bad blocks, If they match, can see more easily why and who might have acted badly. 
      3. But can’t do it vice versa - been nagging Parity to add that end point so we can do the same process in reverse. 
      4. Geth client has a lot of metrics: how many i/o connections, db writes, block processing times, peer connects. Can export from geth and display in any charting you like. So, that’s exactly what we do get nice graphs about tx churn, how txes were rejected, queued, pooled. 
      5. Optimizations in geth which made block processing faster in the past month. You can also monitor for performance, not just security... 
      6. Shanghai attacks taught us that performance very much related to security. 
      7. P2P network information, protocol dissector / analyzer -- if I can see what is happening on my node and what my peer capabilities are, what have they seen, etc.  Is there any one peer that is sending me transactions that I reject? That way, I can identify bad behaving or lying peers (more in-depth view of what people are telling me over the network) 
         1. Would be difficult as an add-on (need node keys, decrypt data, etc.),  Much simpler to do within a client.  Protocol layer in Geth. 
   1. Build tools for analysis, especially when things are going wrong: hacks, network problems. 
      1. E.g. transaction propagation when network was overloaded with txes going back & forth between parity and Geth. 
      2. Needs for lots of testing around hard forks as the existing tools were not sufficient to cover all cases. 
         1. Coverage guided fuzzing - generate code and run on instrumented version of Geth / Parity. This matches code coverage, generates new code and increases coverage using fuzz tactics to mutate inputs and can test geth and parity differentially. Do they have the exact same stuff in the stack, in memory etc.? 
         2. Another fuzz testing tool based on EVM Lab that can generate tests for CPP ethereum and can cover py-ethereum etc by running in docker container with a switch that enables an output after every opcode and compare internal state differentially again. Run this 24/7. 
         3. Caught 5-6 consensus issues with this. Last hard fork was a controversy as Parity had done a whole bunch of releases prior to the hardfork and the suggestion was to postpone, which would have caused its own issues and forced clients to update again. 
            1. If patched before hard fork - no problem. Beat the drums and tell everyone to upgrade. 
            2. If you find a consensus issue on an existing client it is a bit more problematic.Telling everyone means giving people the chance to exploit it - tough to handle. 
            3. Examples of consensus issues: make a tx which invokes a precompile like verify_signature and if that, in one case returns true and in another returns false, or if they cost different amounts of gas (i.e. x on geth and y on parity) then post-state will be different so they won’t accept the same blocks and then we have a fork. 
            4. There was a consensus issue that happened after Spurious Dragon when we implemented state cleaning. Chain split for 200 blocks, which were created on the wrong chain that were then abandoned. Block 2 600 000 or so.  
            5. Developers need to be alerted as soon as possible so they can fix it ASAP. People can lose money in the meantime, txes can be reverted. All exchanges need to be alerted to hold deposits and withdrawals. 
               1. Have built tools to detect this, so we consider it solved from a technical p.o.v. 
               2. Recommend that exchanges run all clients, but not sure if they do. Could be standardised with docker containers that could be more streamlined. Documentation around best practices, automated tooling etc. 
      1. Building something like Ethstats but more detailed. If there is a consensus failure, you might want to see exactly which tx in which block caused it. Nice to see blocks, txes and intermediate root hashes between each tx. Then you can see different post-state hash, i.e. that is where we should start looking. 
         1. Need detailed traces of exactly what happened in every opcode of this transaction. 
         2. One of the things I built in EVM Lab is a reproducer. Synthesises pre-state for that particular tx, then executes it and gives you a detailed trace from geth and parity that you can then compare. 
      1. Not much active development on EVM Lab. Use it mainly for investigating certain condition or opcode or potential attack. Pretty easy to put together desired scenario in an EVM assembly-like way by setting genesis you want and then run & benchmark it. 
         1. It is usable right now and I have no immediate plans to do anything in the near term. Might need some updates and it is not so user friendly.[a] 
   1. One of core devs for go-ethereum.  
      1. We want to expand - have 2 interns now, but had to turn someone away recently too. Send interested developers to Peter. 
      2. Working a lot with the signer, which was just merged in latest release. Standalone binary which can run off some secure enclave, USB armoury, parallel VM, some other machine on your network. Can be used for offline signing and has trusted UI.  
      3. Can be configured with particular rules written i.e. in JS. Definitely needs more work on the UI. has implemented one in python-qt and python-cleft. Can also be run in a console, with remote ports etc so you can decouple pvt keys from your daily computer. 
      4. Hoping MetaMask will integrate with it directly. Has spoken with Dan and another guy called Jordan building a tool called (?) which has integrated it already. 
      5. Hard problem: how to make it more secure for end users. Surf internet with unpatched browsers with 0 days and they get exploited. How can we improve upon that so that you have a sign what you see flow. Submit a tx, see the details of that tx when you approve it. 
      6. Unlock feature is most horrible thing he has seen where it will sign every tx sent to it for a given period. 
   1. I don’t do too much DApp development, so I’m not up to speed with capabilities of current tools and how they have matured over the last 6-8 months. 
   2. I have heard there is a debugger out now which I remember as being one of the main pain points."
25,25 Ethereum Foundation - Martin Swende.txt,Martin Swende,Martin Swende
25,25 Ethereum Foundation - Martin Swende.txt,"[a]Upgrading, extending and maintaining might be an interesting long term bounty to look at and experiment with different payment models.","[a]Upgrading, extending and maintaining might be an interesting long term bounty to look at and experiment with different payment models."
77,77 Virtue Poker - Alvaro.txt,," 
"
77,77 Virtue Poker - Alvaro.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Whisper 
      1. Building a p2p game. We tried using Whisper for real-time communication – does not have receipts we have discarded it right now. 
      2. Read a Stackoverflow about Status’ problems building on top of Whisper. 
      3. The P2P is tough – need to be direct peers –– need to run neighbor nodes yourself. 
         1. Connecting the mesh is tough. 
         2. SO post said that Whisper doesn’t acknowledge receipt of messages. 
      1. Running whisper on a geth node is optional. 
      2. PROBLEM: whisper has low adoption. 
      3. As a result, the game cannot be decentralized. All messages that are passed to each other between clients, are going through a centralized center. 
      4. People use WebRTC with direct connections. But won’t work for them because they don’t want to reveal people’s IP addresses. 
      5. There’s also a protocol called Telehash. 
      6. DHT. 
   1. Web3 
      1. Switching to new release soon – interface change is coming. 
      2. Callbacks are annoying should use promises. 
      3. We promisify the functions themselves. 
      4. We’ve only used web3. 
         1. A web3 alternative, ether.js (from L4)  
   1. Solidity 
      1. Why doesn’t it have common data structures? e.g. a simple array if you delete one item, you get a hole in the array. 
         1. Need a way to store data that is indexed and where it can be safely deleted. Manually doing this stuff is bad.. 
            1. There are many implementations of this but having a standard implementation would be really helpful. 
         1. A lot of these things should be built into the language. 
      1. SafeMath. I don’t use a lot of libraries otherwise. 
      2. EthPM? -> It worked, kinda? 
         1. Creating more low level libraries[a]? 
      1. I like Remix. It has improved a lot. 
         1. I had no problem with the UI. 
         2. Like testing in Remix – though the debugger could be improved. 
      1. Truffle is good, as well. "
77,77 Virtue Poker - Alvaro.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. VirtuePoker – offchain game, smart contracts to represent state of a poker game – offchain consensus of consensus, and submit to onchain.  
         1. Building poker with Ether, that can be played without an intermediary. 
         2. When you leave the table, you cash out with the stake which you have left"
77,77 Virtue Poker - Alvaro.txt,"1/23/2018 - Robbie, Sina, Vivek","1/23/2018 - Robbie, Sina, Vivek"
77,77 Virtue Poker - Alvaro.txt,Alvaro ,Alvaro 
77,77 Virtue Poker - Alvaro.txt,[a]What low level libraries would be interesting,[a]What low level libraries would be interesting
56,56 Parity - Nicolay Wolf.txt,," 
"
56,56 Parity - Nicolay Wolf.txt,1. Other bounties?,"1. Other bounties? 
   1. Research for cost of running WASM on different architectures and machines. 
      1. Scientific proofs on how this correlation works. 
      2. Or also computational analysis? 
      3. This will be used to assign costs to Opcodes, and also know exactly why. 
      4. Parity is using eWASM’s results for this currently."
56,56 Parity - Nicolay Wolf.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. What is the difference between eWASM and parity-wasm? 
      1. Parity works closely with WASM –– 
      2. Parity uses the same endianness as EVM. But eWASM uses little-endian / WASM uses little-endian. 
      3. How does eWASM callcode, because it depends on hardware architecture? 
      4. Parity forbids some useless constructions, e.g. “internal memory” ––  
         1. Any WASM module can include private memory according to wasm-spec it’s not accessible at runtime Parity forbids this. 
   1. Projects working on WASM: 
      1. Parity, eWASM, Dfinity, Bitfury 
         1. Bitfury has Exonum – solution for enterprise blockchains with WASM runtime. 
   1. Higher-level languages: Rust or anything else that compiles into WASM. 
      1. They’ll move away from Solidity. – good to have for backward compatibility (so someone making solidity-wasm compiler would be good) but not necessary. 
   1. Standardizing WASM implementations: 
      1. Can do renames to match eWASM or something like that.  
   1. Interoperability amongst WASM implementations: 
      1. Will have a simple tool that can compile eWASM to parity-wasm to etc etc. 
   1. WASM vs. EVM: 
      1. WASM doesn’t force you to use the 256-bit machine. 
         1. E.g. if your computations fit 32-bit, you don’t have to deal with this inefficiency. 
      1. WASM has strong teams behind it. 
         1. They’ve made a bet on WASM so there will be resources behind it. 
         2. Bugs will get fixed by the wider community. 
      1. WASM can be targeted by mature languages: c++, Rust, Haskell is coming, etc 
   1. Resources: 
      1. Who’s working on Parity-wasm: 
         1. Nicolay & Sergey.  
            1. Nicolay is moving to part-time on this stuff since there’s lots of other work to do. 
      1. There will be another meeting about Ethereum sharding & wasm. 
         1. Thailand, end of March. 
      1. Our libraries: 
         1. Parity-wasm: serialization & deserialization library – for changing / transforming the wasm module. 
         2. Wasmi: the actual wasm interpreter 
            1. https://pepyakin.github.io/wasmi/wasmi/index.html 
            2. https://github.com/pepyakin/wasmi 
   1. What’s left to do with parity-wasm: 
      1. Need good libraries – Rust-specific – to interact with blockchain storage 
         1. Solidity gives you this out-of-the-box – but we need to build it for Rust"
56,56 Parity - Nicolay Wolf.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Not developing lots of dApps. 
   2. Foundational work for WASM: 
      1. WASM interpreter 
      2. Runtime environment – which allows to run wasm within any network. 
      3. Forking Kovan – allowing wasm contracts to run 
      4. Running wasm on private chains 
   1. WASM interpreter: 
   2. Main problem:  
      1. Making the Rust interpreter deterministic. 
      2. WASM is not strictly deterministic –– need to narrow down to deterministic opcodes. 
         1. Need to ban several opcodes, e.g. floating points. Simple solution: just parse WASM and fail if there’s any floating point opcodes. 
         2. Other option: to canonicalize the NaN constant –– you need to bring all these flags under one definition. 
            1. One idea: you could check after each floating point opcode –– to see if its NaN and use canonical. 
            2. BUT this is not worth the effort, because no blockchains apps will have floating point anyway. 
      1. Other sources of determinism: deterministic stack for execution 
         1. WASM doesn’t enforce size of the stack ––  
            1. When you get to JIT compilation of WASM, this compiles into using a register-machine specific to the hardware architecture this process is actually deterministic. 
               1. But it’s non-deterministic when you go to run it. 
            1. E.g. when a function uses a lot of stack –– e.g. a recursive function that calls itself and itself –– it can fail when it hits the stack limit of the operating system. 
               1. This can fail at different times for different machines. So, it’s non-deterministic. 
         1. We’re transforming existing WASM into this modified WASM that takes care of these issues. 
            1. Any WASM implementation that takes untrusted code from the network needs to have this stuff done. 
      1. eWASM collaboration will be helpful ––  
         1. Mozilla has a Rust-WebAssembly group. 
   1. Gas metering – not challenging but needs to be done 
      1. We have tools which transform WASM from free-form to gas-metered form. 
         1. Includes how much opcodes cost. 
      1. eWASM has this also –– we’re taking a more scientific approach to this. 
         1. Parity simply uses the eWASM table. 
         2. Don’t need to be super precise, just need to protect against malicious users. 
         3. Memory also costs gas. 
            1. Simple way is to charge for memory linearly. 
            2. The original idea is to charge for extra memory quadratically more given how much memory was allocated before – but you don’t need to do this anymore, because there’s new ways to allocate memory. 
      1. Gas costs are embedded into the bytecode. 
   1. Proving the correctness of implementation 
      1. Fuzz testing against various interpreters – spec implementation 
         1. Fuzz test: allow the interpreter to run code it should fail or do the same thing at exactly the same spots as other interpreters or existing codebases. 
      1. The interpreter should not panic in any case –– otherwise, malicious actor could crash certain nodes 
         1. They use cargo-fuzz for rust 
         2. There are also fuzzing tools for WebAssembly: which can generate randomized wasm modules –– can take this put it into your implementation and the reference implementation and see that they do the same thing."
56,56 Parity - Nicolay Wolf.txt,2/26/2018,2/26/2018
56,56 Parity - Nicolay Wolf.txt,Nicolay Wolf,Nicolay Wolf
41,41 L4 - Andrey Petrov.txt,," 
"
41,41 L4 - Andrey Petrov.txt,1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. Write a lot of tests myself. Get other people to read it. Keep it as simple as I humanly can. "
41,41 L4 - Andrey Petrov.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Truffle - not his favourite, but best thing out there right now 
   2. Vim for everything 
   3. Etherscan a lot 
   4. Remix IDE - trying this out sometimes, but also my own editor 
   5. Truffle  
   6. Also my own runner, written in go."
41,41 L4 - Andrey Petrov.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. What dev tools on near horizon that would change things?         
      1. Web 3 stuff is almost there but not quite 
      2. Need to look more into the ZK stuff which is cool, but needs more researchers on it. 
      3. Tons of room improvement for wallets 
      4. Mobile dapps are in the VERY early stage. Mobile wallets that can run dapps are just reaching market.  
         1. Status 
         2. Ethers wallet has it 
         3. Metamask for brave mobile 
         4. Cipher"
41,41 L4 - Andrey Petrov.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Dapps: web3js stuff sucks. In the doc, it’s in a weird halfway state where its deprecated but there’s nothing superseding it. Its pretty broken in many ways. At least 4 solutions that are about 80% done. 
         1. (ethers.js, but it doesn’t speak well to metamask. Fixed now 11/05/2018) 
   1. UX stuff? 
      1. CryptoKitties situation - lot of people want a basic way to swap a transaction with one with higher fees. That’s kind of an ethereum specific thing. 
   1. Scaling? 
      1. Lightmode thing with Geth -  a lot of users use the lightmode. In terms of scaling user base, that’s relevant. Eventually most users use lightmode, and right now its broken. [Related update: https://vipnode.org/] 
      2. Spinning up more nodes is useful! 
      3. (Campaign to show selfies with your nodes, every office should have a node or many, etc.) 
   1. Are you running into problems with any of the following: 
      1. Gas limit 
         1. Probably a truffle problem: it returns a lot of errors related to the gas limit, but they are not actually errors. Error messages are probably just not great.  
         2. Better errors on the gas limit would be useful to address underlying problem.  
      1. Off-chain computation 
         1. Been thinking about some game ideas, and a lot of them require off-chain computation."
41,41 L4 - Andrey Petrov.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. Things I want improved with truffle: it has a lot of moving pieces. Reliant on the nodejs ecosystem and all that. Would like to see a binary runner - want to be able to have a binary, give it some solidity, and it knows how to run it in a simulated environment. Really useful for deploying continuous integration and stuff."
41,41 L4 - Andrey Petrov.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. A lot of tooling that isn’t there. Ecosystem is “bursty”: there was a big burst of dev for web3, but then it stopped, it’s not done, and it’s not advancing. Truffle seems to be same thing. Why? Well people build the stuff they need, and then they stop building.  
   2. Operational security of the thing. Easiest way to use it right now is to install metamask, which is not great. If you install ina browser with other extensions, its as secure as other extensions. Installing mist is not happening. Sure it says write down seed so it’s safe, but doesn’t explain full meaning or ramifications of that.  
   3. Do better about default backup practices. There could be automatic backup processes.  
   4. Biggest risk is loss, not theft"
41,41 L4 - Andrey Petrov.txt,1. Who are the other people you think we should talk to?,"1. Who are the other people you think we should talk to? 
   1. Max Veytsman"
41,41 L4 - Andrey Petrov.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. https://thousandetherhomepage.com/ "
41,41 L4 - Andrey Petrov.txt,ANDREY PETROV,ANDREY PETROV
5,5 Aragon - Jorge Izquierdo.txt,," 
 
 
"
5,5 Aragon - Jorge Izquierdo.txt,1. Other bounties?,"1. Other bounties? 
   1. Infura that is more decentralized. A full-node infrastructure[a]. 
   2. An open-source explorer."
5,5 Aragon - Jorge Izquierdo.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. Tell us more about getting deep into the EVM? 
      1. Natspec lets you evaluate functions within call – this is problematic security wise. 
         1. It’s not turing complete at this moment 
         2. No one describes what transactions are going to do Radspec is the answer to this! Everyone use it, please.  
         3. Standard around commenting exactly what a transaction does. 
            1. Documenting what the source code does 
            2. Solidity puts a hash of the code, at the end of bytecode. 
               1. This process of automating the comments could be automated pulls comments from Solidity source code, add them as comments for devs 
   1. Integrating dApps with blockchain? 
      1. Local caching in the browser what are the block numbers do a Reduce to see how an event impacts the state. 
      2. Problem with the caching layer: the info not only comes from the Event, but data you get back from contract depends on the block number 
      3. Performance is an issue:  
         1. Augur: ethereumjs-blockstream. 
   1. Library-driven development & upgradability? 
      1. If Solidity changes how variables to storage blocks, if it changes this, there’ll be problems. They want to build a tool that does a sanity check that checks still works[b] 
         1. Tool to do a sanity check over the storage layout 
         2. If new contract uses different version of Solidity, could get that directly through proper use of interfaces. "
5,5 Aragon - Jorge Izquierdo.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Aragon - Decentralized Governance platform 
      1. We had a feeling that they had to go deeper into the stack to launch Aragon. 
      2. What we’ve built: 
         1. We’ve built two different interpreters: 
            1. Language for ACLs 
            2. Language for tx descriptions, similar to Natspec. 
               1. Allows you to do calls to smart contracts but really basic stuff  
         1. Built generic framework for interacting with their contracts. Our dApp changes needs to integrate with 3rd party apps without allowing dApp developer to touch the database. 
            1. Ruby on Rails abstraction on-top of the data layer. 
            2. Problem here: we don’t have any servers, we are a real dApp. Every single user has to compute entire state of the dApp. 
               1. Backend protocol / caching protocol / event-processing. 
         1. Upgradability stack. 
            1. Tooling to update storage etc correctly. 
         1. Trustless signer: help people understand their tx before sending the tx. 
            1. Working with metamask on this. 
         1. Our own CLI tooling 
         2. We have a package manager – backend to our app store"
5,5 Aragon - Jorge Izquierdo.txt,"1/30/2018 - Sina, Robbie, Matt.","1/30/2018 - Sina, Robbie, Matt."
5,5 Aragon - Jorge Izquierdo.txt,Jorge Izquierdo,Jorge Izquierdo
5,5 Aragon - Jorge Izquierdo.txt,[a]Great bounty -- but really large,[a]Great bounty -- but really large
5,5 Aragon - Jorge Izquierdo.txt,"[b]This is a good bounty - mentioned multiple times, if solidity changes, can cause problems with storage","[b]This is a good bounty - mentioned multiple times, if solidity changes, can cause problems with storage"
75,75 TurboGeth - Alexey Akhunov.txt,," 
 
 
"
75,75 TurboGeth - Alexey Akhunov.txt,1. Other bounties?,"1. Other bounties? 
   1. Unification of testnets[a]. 
      1. Rinkeby & Kovan are still incompatible. 
         1. I wanted to write this myself, write Kovan implementation in Geth? 
   1. I hate that everything in the smart-contract ecosystem is written in Javascript – e.g. Truffle. People then use truffle bindings in production. 
      1. Native go tooling. Native go contracts. 
      2. I tried to do javascript auditing. And it is virtually impossible without safety of types. There’s a lot of dependencies it’s really hard to check everything. 
      3. Specific: where the web-server is written, not in JS, but in a compiled language: should bind directly to the smart contracts, instead of going through JS bindings. Use go-bindings."
75,75 TurboGeth - Alexey Akhunov.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. Optimizing Geth: 
      1. It all started with a rough kinda experiment – in November network became congested – 
         1. Started doing profiling in Go. Learned to do it then. 
            1. Saw that geth was mostly talking with LevelDB database. 
      1. The process: 
         1. 1) look at the profile 
         2. 2) ask questions – why is it slow? 
         3. 3) then look at code, edit, experiment to improve. 
      1. The system is complex – hundreds of goroutines running at the same time. 
         1. Trying to optimize the state management. State is constantly growing. Things will have to be written on disk fetching it again will be slow. Can have cache, but what if it’s outside of the cache. 
            1. Problem 1) speed of processing. 
            2. Problem 2) if you’re running a full node –  
               1. Fast-sync: download all the headers + download enough state objects from other peers to only verify randomly selected blocks. 
                  1. Then, after this, you become a full sync node. 
                  2. Whole state from beginning is ~ 600GB. 
               1. It needs to be compressed. 
      1. How do you test your optimizations: 
         1. Peter from Geth told him: you can export the blocks, run through your node without being connected to network, and process. 
      1. Jameson Lopp: 
         1. His criteria for a blockchain: how quickly it syncs. 
      1. Idea for bounties: 
         1. Shared resource: have block data sliced up into pieces (e.g. first 100k blocks, second 100k blocks etc.), give it a Github branch, spin up the image, it does a git pull, launches an instance of the client without p2p mode, imports this part of the blockchain, does comparison across different parts (e.g. when there was a spam attack in ~2.4m block) 
            1. My goal: to go through spam blocks really quickly. Every sync should be very fast. 
      1. People complaining (e.g. exchanges) that they can’t keep up with the blockchain – e.g. Etherscan – falling behind. The clients are becoming inefficient. Instability problems. “When quantitative changes become qualitative” – breaking points are hit. 
      2. Go-ethereum developers are also working on this – I do the same – but I like not having the responsibility and just hacking around. 
      3. Collaborations between different clients: Parity & Geth 
         1. Parity had a great breakthrough – how to tune parameters of database – can sync on HDD. I’m hoping that collaborations will grow. State management across clients is important."
75,75 TurboGeth - Alexey Akhunov.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Geth. 
      1. Can pass in --cpu-profile 
      2. Uses basic stuff that comes with Go: PProf. 
      3. Go has in-built tool to open this file. 
      4. Can generate dominator tree -> whole graph of traces vs times. Shows which nodes are dominating. 
   1. My workflow: 
      1. Change code. 
      2. Run geth with --cpu-prof 
      3. Generate graph from .prof file. 
      4. Run on cloud overnight."
75,75 TurboGeth - Alexey Akhunov.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Yesterday – spent 3 hours!!! – fixing compiler errors. The codebase is large. 
      1. Added an extra flag to switch db to another from LevelDB. Compiling errors in fast-sync and light-client. 
      2. Codebase has a lot of baggage: Geth has Whisper, Swarm, and light-client. 
         1. Do geth developers want to separate these out? 
         2. Potential concurrencies & SSD improvements."
75,75 TurboGeth - Alexey Akhunov.txt,1. Who are the other people you think we should talk to?,"1. Who are the other people you think we should talk to? 
   1. Nick Johnson 
   2. Peter from Geth. 
   3. Quickblocks founder – Jay Rush – quick access to blockchain data. Working on the problem of quick state download."
75,75 TurboGeth - Alexey Akhunov.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Been in Ethereum since the beginning. Was following the PoC. Mined few blocks on his home computer.  
   2. Initially ran geth, then parity, then geth again.  
      1. Geth said it would be more like a library. 
   1. 6 months ago, moved to doing Ethereum dev full time. 
      1. Did security audits – gets tedious – smart contract are usually short. But comes with more stuff – server-side, etc 
      2. Now: playing with the go-ethereum code, trying to optimize it. 
         1. People talk about sharding, Casper, etc will fix everything but that won’t solve everything without optimizing everything."
75,75 TurboGeth - Alexey Akhunov.txt,Alexey Akhunov,Alexey Akhunov
75,75 TurboGeth - Alexey Akhunov.txt,Sina on 1/11/2018.,Sina on 1/11/2018.
75,75 TurboGeth - Alexey Akhunov.txt,[a]Can be added to testnet stuff --,[a]Can be added to testnet stuff --
57,57 Parityweb3 - Peter Czaban.txt,," 
"
57,57 Parityweb3 - Peter Czaban.txt,1. Are there any other questions we should be asking?,"1. Are there any other questions we should be asking? 
   1. Parity guys that work on the UI."
57,57 Parityweb3 - Peter Czaban.txt,1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. First contracts were usually for prototypes. 
      1. I would write contract, write tests, then integration tests. 
      2. Then would go through a review process. 
      3. Sometimes would go to an external audit. 
         1. This only happened for a few projects."
57,57 Parityweb3 - Peter Czaban.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Mostly truffle for testing. Also have some of my own custom tooling that works on RPC."
57,57 Parityweb3 - Peter Czaban.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Truffle, solidity syntax highlighter for VIM, Jupiter notebook for testing stuff 
   2. If not already mentioned, are there any libraries you rely on regularly? 
      1. EtherJS  
      2. In Rust similar libraries like @crypto and @key"
57,57 Parityweb3 - Peter Czaban.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. From experimental projects, I am interested in prediction markets and how they will work and how good the price discovery is. 
   2. A very good application is something that doesn’t require too much throughput. Something around supply chains could be really interesting. Many parties, don’t necessarily trust each other."
57,57 Parityweb3 - Peter Czaban.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Definitely the language and tooling. Testing frameworks. 
      1. Truffle can be weird and does some asynchronous things that cause tests to randomly fail. 
      2. Linking contracts together is still kind of bad. 
   1. Are you running into problems with any of the following: 
      1. Off-chain computation: Yeah, this can be somewhat difficult. I have seen others not being able to use it, so it clearly needs to be easier.  
      2. Could detect patterns in a contract and recommend that something could be done off-chain. 
         1. Sometimes you want to have privacy. Solidity and compiler could figure out for you how to make particular mappings anonymous. 
      1. State Channels: Played around with a simple one but no serious problems or anything."
57,57 Parityweb3 - Peter Czaban.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. Being able to run things in exactly the same environment as the deployment environment (for me, it was necessary to have a custom client that I ran code against) 
      1. Parity / Truffle sometimes behave in different ways 
      2. Built a custom thing that had partial functionality to give a more consistent testing environment 
   1. Being able to track versioning of contracts from dev to deployment. Requires a lot of back and forth. 
   2. Pain points working with the language. I want a better type system!"
57,57 Parityweb3 - Peter Czaban.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. For building the client, it was high-level architecture, but that was resolved just by having lots of conversations with people. 
      1. Would be useful to have more documentation around here. 
   1. For building with Ethereum, it was Javascript and Truffle, because I already had good understanding of Ethereum at that point."
57,57 Parityweb3 - Peter Czaban.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. I started out building some trading algorithm. 
   2. During the early foundation days, there were workshops in London, and during one of those workshops I was writing a dapp using Mist. 
   3. Then, later, I deployed a token contract for fun, and then basically started straight away with client development. 
   4. Been working on the core Parity client on the consensus algorithms. Consensus contracts in solidity. Proof of stake."
57,57 Parityweb3 - Peter Czaban.txt,Peter Czaban,Peter Czaban
54,54 OST - Benjamin Bollen & Paruyr Gevorgyan .txt,," 
"
54,54 OST - Benjamin Bollen & Paruyr Gevorgyan .txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Using Truffle. Have a setup where for local dev purposes are tested on one chain. At a later layer they are tested on a testnet. 
   2. One cool thing we would be interested in: very close adaption between local environment and staging. Having a seamless way of transitioning from local to go to staging on Ropstein/other testnet, flip a an environment variable and go from local to staging."
54,54 OST - Benjamin Bollen & Paruyr Gevorgyan .txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. From an IDE perspective: Tried to use Remix, but not so easy to set up locally. No finalized IDE. It’s powerful but not easy to set up, very complicated to set up and not so stable."
54,54 OST - Benjamin Bollen & Paruyr Gevorgyan .txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. We are building a developer kit that builds a bridge from Web2 to Web3, nice interface so that people don’t need to have understand blockchain to use it.. Need to get users on the technology. 
   2. We have to be very pragmatic. 3 core regions to be make technology accessible by millions: 
      1. Management for users and development 
      2. Define a token for an application, how would you use it for your company? 
      3. Being pragmatic about scaling, a Layer 2 Solution. Not really sidechains, all value is only defined as value of ERC20. 
   1. Circumvent boundary of the bridge with a business solution. 
      1. We put quite a lot of effort into this, they had 2 main concerns. Auxiliary systems, have to be natively compatible with many chains. And want to be token compatible first as opposed to be block first.  
      2. Had a bad experience with Ethereum Permission Client, had some incompatibilities on ABI level so had to do their own tooling."
54,54 OST - Benjamin Bollen & Paruyr Gevorgyan .txt,28/6/2018 - Mitch,28/6/2018 - Mitch
54,54 OST - Benjamin Bollen & Paruyr Gevorgyan .txt,Benjamin Bollen & Paruyr Gevorgyan,Benjamin Bollen & Paruyr Gevorgyan
54,54 OST - Benjamin Bollen & Paruyr Gevorgyan .txt,"Now the team is partially on Sublime and partially on Visual Code, but can’t mix tooling across this process. Can this be modularized? Can’t put Remix debugger into Visual Code.","Now the team is partially on Sublime and partially on Visual Code, but can’t mix tooling across this process. Can this be modularized? Can’t put Remix debugger into Visual Code. 
   2. Web3.js Intense users, but don’t like how they handle callbacks. New documentation is not yet complete. Want more examples on web3.js. Better documentation.  
   3. OpenOSTBase- a bunch of wrappers around the websockets around web3, make these more reliable and redundant. In production, things tend to break but this helps with that. Happy to contribute back :) 
   4. Web3.js is a first level API. First layer access to the technology, but want to have a more user friendly second layer that caters to the community needs. More user friendly, without having to do the same thing several times. We want a second level API, a helper or utility level API. 
   1. What tools don’t exist at the moment? 
   1. Haven’t super explored Ganache but is interested in more things done via command line. Any type of automation that can be done from the command line is cool and greatly helps with efficiency. 
   2. Biggest thing we are missing is an IDE suited for the ecosystem. Something that could do a gas function on Remix done on runtime, you could see security things happening on runtime. Integrating Remix with a different IDE, it’s currently statically bound. 
   3. Clear explanation in Documentation. 
   4. General level: a big proponent of multiple chain universes. In OST users only really interact with Ethereum mainnet, only have tooling directed towards one chain. 
   5. Solidity perspective, have a diagram based solution to see all the connections. Solidity codebase diagram module would be very compelling. 
   1. How do you handle smart contract verification and security? 
   1. Guiding principles: observe standards and don’t invent funny ways of doing things. Trying to reduce code to smaller components and go from there. Had 3 security auditors. Cure53 reviewed contracts and all traditional architecture. Zeppelin did audit for smart contracts. 
   2. Now working on the hardcore protocol. TrailOfBits builds a lot of interesting tools examining the bytecode. This is not an easy task. Trying to take very small steps one at a time and then go from there is the philosophy.  
   3. They are excited about ewasm. They respect work done with Solidity, but bytecode is the biggest thing. They have compiled with same Solidity on Mac and Linux for same thing and got different bytecode, this is a big concern. 
   4. Compiler, assembly tools, and debug tools are all major points of interest. Could be interesting if Solidity compiles to wasm, then you have portability. 
   1. What was the hardest part about learning to develop with Ethereum? 
   1. To set up the first private network was somewhat difficult. Didn’t use Truffle, just Geth. Geth is very powerful but is missing good documentation and had to Google.  
   2. Solidity is good but needs better docs and better exampling. Very happy with CryptoZombies tutorials, want to see more things like this to help intro new users into the space.  
   3. Hardest thing when you deploy something is deploying a smart contract that intends to have value but not having a way to walk it back. In the last weeks running up until their deployment, did 8 dry tests with a self-destruct button. Ran this 8 times on Ropstein testnest, and then mainnet. Very interested in smart tooling to help in this process! 
   4. More tooling for testing of deployment. Testing where deployment happened properly to avoid situations like Parity Wallet. Had Monex with EthPM like tool. Scripting the deployment. Testing the deployment, could be a part of an automation toolset. Like fastlane for ios and android deployment. 
   1. What are you most excited about in the short term? 
   1. Getting OST to version 1.0 :) But beyond that most excited about ewasm. Also excited about Whisper and Swarm."
9,9 ChainSafe - Aidan Hyman.txt,," 
"
9,9 ChainSafe - Aidan Hyman.txt,05/10/2018 - Andy,05/10/2018 - Andy
9,9 ChainSafe - Aidan Hyman.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Talk with Stu, who handles all the testing stuff. 
   2. Used to do what Mythril does: visualize the contracts as it does now, so once it is set up, it is very cool for us to use. 
   3. Such a focus on formal verification in Solidity (but who even knows if it really matters?). 
      1. Not doing fuzz testing for instance, and it seems like a lot of these requests are based on assumptions that have not been proven. 
      2. No-one knows what the optimal testing framework is, so more default templates in general that allow people to use what they need to use across different projects.  
      3. Again, modularity is what matters most. 
      4. Both unit and functional test as necessary. Unit testing seems more standard. Mocha and chai within truffle for the most part. 
      5. Ethereum-js VM has really bad testing around it and could be really usefully improved. We need some kind of local implementation to do testing on! Write another test suite as a bounty here."
9,9 ChainSafe - Aidan Hyman.txt,1. What are the best educational resources?,"1. What are the best educational resources? 
   1. Honestly just readthedocs, gitter channels and searching through GH issues. 
      1. Moved from slack and gitter, to riot and gitter, and also ethereum stackoverflow. 
      2. If there is an issue, go to those repos as it is so unlikely that you are the first person to experience an issue using Ethereum tools. 
      3. Hardest to learn about the stack and opcodes 
      4. Find the right local communities and get involved with them. Pair programming and being equally confused together is really helpful."
9,9 ChainSafe - Aidan Hyman.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Truffle 
      1. Lack of modularity is the biggest problem (across all tools listed below). Building on top of, rather than within, the EVM you need to update the toolset you’re using and this becomes really difficult with the current tools.  
      2. If you implement some different opcodes in solidity, you need to take them all the way up. Open source is great, but it needs to be easy to fork and re-implement it easily in order for it to be really powerful. 
      3. Talk to person who had to modularise Truffle internally (not just testing, but also the lack of modularity - if you want to change something and still talk to others in the space, the best solution is often to rewrite the whole tool yourself, which is less than ideal). Aidan to send intro to David about this. 
   1. Parity and Geth 
      1. Also speak with David and Greg.  
      2. Use Parity due to responsiveness from the community and how good they are at answering questions!!! Great community - so NB!! Aidan’s biggest asset is his network of core community members, which really matters in decentralized communities - open channels of communication. 
      3. Rust is a more obscure language and people lack experience, hence geth is somewhat easier to use and troubleshoot. 
      4. Geth has a bigger community, but the actual people developing the client aren’t as readily available as Parity. 
   1. MetaMask for frontend development 
      1. Were tasked with making MM work for client and had to rebuild a lot of the stuff. Will also send an intro to the dev who handled. Greg is his name. 
   1. Mythril 
      1. Huge frustrations with this tool. Getting it running is a pain in the ass. 
      2. If it could be applied at the stack layer and not the smart contract layer. Build something like Mythril for an EVM implementation, trace things up the stack cleanly, add/remove opcodes, make new instructions. A stack explorer so to speak. 
         1. Could spawn so many things because we could understand the stack in a better way and grab a lot more logic. Pity to see focus on higher level tools, which has become somewhat of a hindrance. Why hyperledger went out and did it themselves (not just the licensing issues). 
         2. Educational tool for stupid web devs like me to learn about how opcodes actually work and are composed in the EVM. 
   1. Regular rust and node related stuff (also some go stuff). 
      1. Are there tools from these arenas that don’t exist in Ethereum which would be really cool? 
         1. We need to make these tools more closely aligned with the chain itself. With WASM coming online, this is already happening and we just need to be ready - i.e. teach everyone WASM.  
         2. The end if here for really high-level development with WASM. What this will mean for the community and internet in general has yet to be discussed completely. 
   1. Try to use ethers.js as much as possible as opposed to web3 
      1. The person developing these tools (Richard) is totally accessible, responds to issues immediately (faster than a bot!!) - he is so collaborative and wants to make sure everyone is using the best tools possible, and this all makes such a difference. 
      2. Polymath people doing off-chain signing, which you couldn’t do at the time and 1 of the methods didn’t have a response variable they needed, and by the next morning it was updated. Tight feedback loops make it so much better to use tools. 
      3. You can create your own wallet in 4 LOC in your terminal - again the language and syntax is so much easier for a non-dev that this solution ought to win in the long time. Very relatable and understandable code base. 
   1. Gave solidity and parity/EVM workshops: 
      1. EVM workshop: took instructions, showed how it would be passed onto stack, where things go, how it gets passed on to memory. Questions were so relevant and knowledgeable. 
      2. Whereas in the solidity workshop, the questions were much more absurd and irrelevant. Talking about the stack, people from a dev background get it. It just makes sense. Take away: if we want devs who have been developing for 20 years, we need to actually show them how the stack works. 
      3. This is a community-wide failure that we need to focus on - for someone with a CompSci degree, solidity is crazy, but the stack is not!! 
      4. Bounty for cleaning up the yellow paper. Speak with David about this and his more in-depth version of the yellow paper. 
   1. Only ever hindered by delivering work because of MetaMask. Event and event monitoring between different networks was a fix that took a long time to be fixed. They have updated since and we haven’t done any more work there since."
9,9 ChainSafe - Aidan Hyman.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. Two of our most exciting projects: 
      1. Shift - decentralized KYC/AML platform. 
      2. Bunz - a hyper-localized bartering solution. Started as FB group, grew to 60 000 users all bartering locally in Toronto. The people weren’t just bartering anymore, but using gift cards, subway tokens, beer bottles, anything that could be converted into transactable good. Crypto can be the main medium. Currently have 200 000 users on the app and website and over 1 000 000 items available."
9,9 ChainSafe - Aidan Hyman.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. Mythril for the EVM stack. Rewrite a complete stack visualizer for the whole EVM. Add opcodes to the stack and see how it looks programatically and logically would be awesome. 
   2. Even an overhauled IDE that is actually Integrated. Again, rewritten from scratch with a focus on modularity would be really nice to see. Even just clearing your cache properly and the way it physically looks is not good enough."
9,9 ChainSafe - Aidan Hyman.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Working with parity and geth and parity-bridge. Optimising the EVM for bespoke needs - could be for clients, for enterprises. Lower level focus. 
   2. Create tools and mechanisms for people to utilise the tech as easily as possible. 
   3. Collaborating with Aion & Shyft on potential implementation of a bridge.  
      1. Both on top of parity-bridge, which has some limitations: 
         1. Made only to work with POA. 
   1. Data availability for token information, following delegate_calls and not events. 
      1. Suggest work with Jay Rush and maybe add them into the team!!"
9,9 ChainSafe - Aidan Hyman.txt,Aidan Hyman,Aidan Hyman
80,80 Week In Ethereum - Evan Van Ness.txt,," 
"
80,80 Week In Ethereum - Evan Van Ness.txt,1. Are there any other questions we should be asking?,"1. Are there any other questions we should be asking? 
   1. There are a lot of people with tools for themselves that are not well maintained. 
      1. There is some solution space out there where that gets solved and we need to find it."
80,80 Week In Ethereum - Evan Van Ness.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. Let’s talk a little about why you’re skeptical of fat protocols? 
      1. Never met Joel Monegro - hear even he doesn’t agree with the way people interpret his article. 
      2. Same day as his “there’s no such thing as fat protocols,” Jake Brukhman wrote Fat Protocols is Not an Investment Strategy. 
      3. In the very long run, this is a kind of database that will get commoditised. There will be parts that are decentralized, parts that will be centralized, public, private.  No reason to think the protocol will always be where value accrual occurs 
   1. What opportunities exist or others to get involved in the community? 
      1. Transcribing calls - core dev, plasma, sharding, etc 
      2. do actual UX reports and write them up well. 
      3. Monthly and daily newsletter that are out there and could also be improved. 
      4. Plenty of technical builders are frustrated because their projects don’t get the attention they deserve. Helping those teams with marketing is really necessary and could be bountified. 
      5. There are other projects have developed languages that compile to the EVM that are more safety focus and not entirely clear on open sourcing them because they are worried about maintenance. 
         1. More general problem of people open sourcing tools that they don’t really want to maintain - so bountifying those important projects is a possibility. 
            1. Having a financial reward can actually hinder people if the work is creative. Only really helps when there are pretty clear guidelines and it is more a problem with motivation. 
   1. What is your general strategy to getting involved in the Ethereum community? 
      1. Anybody can start a podcast and there are A LOT of interesting stories to tell in this space because we’re all a little weird. 
         1. Especially if you put a bit of effort into the editing part! 
      1. Considers the newsletter a “tool that helps people be more productive”.         
         1. It’s really interesting that there are non-coding things that can achieve this effect and figuring out others would be really great community-based work for non-technical people to do. 
         2. Same thing for writing simplified versions of some of the technical papers and research that is being produced, a la Beige Paper 
      1. There are lots of different lists of info, sometimes up-to-date, sometimes not. People at Consensys have put together a list of all the developer tools, which should be opened up at some stage soon. 
         1. A lot of this stuff is ephemeral. If you don’t see the announcements and use things within a few weeks, they can often slip off your radar."
80,80 Week In Ethereum - Evan Van Ness.txt,1. What are the best educational resources?,"1. What are the best educational resources? 
   1. All the information used to be on Reddit, and there were some Skype channels for the people more deeply involved. 
   2. Part of the reason the newsletter takes so long to curate is that news has decentralized 
      1. Used to joke that the newsletter is just copying links on reddit 
      2. Spend a lot of time finding things in twitter.  
      3. A lot of new projects don’t know that r/ethereum is the main gathering place for the community. 
      4. Doesn’t touch on East/West divide of the community. 
         1. I feel like I have low visibility into the Asian ecosystem. 
         2. One of the brilliant insights from Vitalik was to go and spend so much time in Asia to make it a global thing, but there is still a lot more work to be done on that and in connecting the communities in general. 
         3. Translations are always a big part of this."
80,80 Week In Ethereum - Evan Van Ness.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. NexusMutual - on chain smart contract coverage - risk coverage for your solidity code. It’s very necessary for the ecosystem right now. Goal is to become a thing that is seen as as necessary as a security audit and a bug bounty program. 
   2. Scaling is getting closer! FFG is pretty exciting. 
   3. Prediction markets are still exciting (but we all keep saying that). 
   4. We definitely need to keep iterating through compensation and incentivisation for working on public infrastructure, And making it such that people can open source their stuff in such a way that they don’t then forever need to spend the rest of their time maintaining."
80,80 Week In Ethereum - Evan Van Ness.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. It’s tough for everybody in this space to balance the “Wow, this will change the world” with the “Wow, this is really nascent tech”. "
80,80 Week In Ethereum - Evan Van Ness.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Have only ever played around very early, but never built anything seriously 
   2. Personality isn’t suited to writing bug free software, which is what you have to write in this space, and not a serious enough developer 
      1. The idea of writing code with actual value attached to, direct value that you can never take back in the case of an error. 
      2. I’m glad others are developing, but I would lose too much sleep.   
   1. I run the Week In Ethereum newsletter, and has become a full time job at Consensys. 
      1. Close to 40hrs a week to curate 
   1. Do a podcast as well. 
   2. Moderator of r/ethereum"
80,80 Week In Ethereum - Evan Van Ness.txt,15/05/2018 - Andy,15/05/2018 - Andy
80,80 Week In Ethereum - Evan Van Ness.txt,Evan Van Ness,Evan Van Ness
69,69 SourceCred - Dandelion.txt,," 
"
69,69 SourceCred - Dandelion.txt,"05/09/2018 - Andy, Mitch","05/09/2018 - Andy, Mitch"
69,69 SourceCred - Dandelion.txt,1. What are the best educational resources?,"1. What are the best educational resources? 
   1. CryptoZombies really improved my intuition."
69,69 SourceCred - Dandelion.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Highly adversarial environment makes it hard to feel safe. Wants to develop SourceCred outside of blockchain as much as possible before moving to Ethereum as late as possible. A misstep in the Ethereum ecosystem could have disastrous effects for project. 
   2. It would be really great to see better documentation and more static typing in the ecosystem."
69,69 SourceCred - Dandelion.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. At core abstractions layer. If SourceCred depends on Foo library. Every time I mint SouceCred tokens, I want to give SourceGrain token to not only contributors to SourceCred but also the Foo library. But in Blockchain it is very difficult to Iterate over all of the objects."
69,69 SourceCred - Dandelion.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. SourcCred - bounties and reputation for open source work. 
   2. Earn ethereum cred - reputation in the eth ecosystem for different projects 
      1. Fair distro of tokens based on who developed the project 
      2. Analyse history and collect social feedback to refine the process 
   1. Currently a “regular” web front-end and back-end with plans to move the backend to blockchain in near future after proof-of-concept, doesn’t want to host a centralized server 
   2. I am also currently trying to correctly map Github identities to Ethereum addresses. Was thinking about developing an ad hoc key-based style proof, post a specific gist so that you prove you hold the account. 
1. Who are you and what are you working on? 
   1. IPFS & filecoin separate business layer (fs and file retrieval) from incentive layer. Same thing with SourceCred. We want tokens to flow according to a software infrastructure graph. 
      1. Tokens flow according to software dep graph 
      2. Need a fair transparent way for who determines credit for a project. How can we create tools for determining who earns credit in a fair way? Using algo and data collection. Been in Node ecosystem to parse data out of Github. Try to implement Pagerank on files, pull requests, function level, etc. Using TensorFlow for cred. 
      3. Connect GH ids to eth addresses eventually"
69,69 SourceCred - Dandelion.txt,Dandelion,Dandelion
51,51 Mycrypto.com - Harry Denley.txt,," 
"
51,51 Mycrypto.com - Harry Denley.txt,1. Other bounties?,"1. Other bounties? 
   1. Building a platform / website to educate people on how to stay safe. MyCrypto has some stuff. 
      1. I have a Twitter poll that described this idea. 
      2. Create a bounty around this."
51,51 Mycrypto.com - Harry Denley.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. People too focused on making money and not trying to evolve the society –– moons and lambos rather than lasting change. 
   2. What I’m passionate about right now: helping people who are not technologists to not lose their money. 
      1. Could make it harder for attackers to withdraw. 
      2. Talking to people from Changelly/etc re blacklisting addresses on exchanges."
51,51 Mycrypto.com - Harry Denley.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. I have mostly used Web3.js. It has a great wiki. I haven’t had any real issues. 
      1. Then, I went to meetups where I heard of Truffle and Solidity.  
      2. Documentation on setting up Testrpc and writing Solidity was not that great. Had trouble with Truffle documentation. 
            1. Some dependencies for Truffle and the build they were using were missing. 
   1. Integrating Ethereum with browser hasn’t been too troubling. 
      1. I look at Etherscan comments + MyCrypto support tickets comments. 
         1. Anti-phishing – Etherscan blacklists bad addresses, through their moderation queue and etherscamdb.info reports. 
      1. Most people don’t realize a Private Key should stay private 
      2. Airdrop sites require you to put in your private keys. 
   1. How to prevent phishing: 
      1. Metamask added domain blacklisting + my extension. 
      2. I plan to do analysis using PrestoDB, finding common outputs across Ethereum phishing addresses. E.g. If most addresses go through Shapeshift, then go through Monero, can then contact Shapeshift to add their blacklists. 
         1. Big data requires a beefy server to run it on. 
         2. Open-source for big data analysis of chains for fraud. I talked with Chainalysis (they do Bitcoin analysis) about the idea 
            1. I haven’t wanted to do this – mainly because of cost & security. I’m looking into servers which could handle rate-limited requests. 
            2. Could put this towards the anti-phishing group. 
            3. Making the reports public would be simpler and already helpful 
         1. Allows me to run Mysql-style queries. 
   1. Lack of reliable faucet on testnets."
51,51 Mycrypto.com - Harry Denley.txt,1. Who are the other people you think we should talk to?,"1. Who are the other people you think we should talk to? 
   1. Quiknode – selling managed Ethereum nodes that are in sync. Bit like Infura. 
      1. Adam or Paxon."
51,51 Mycrypto.com - Harry Denley.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. EAL: Ethereum Address Lookup to prevent phishing. 
   2. Back in June: chrome extension as a mini block explorer. Hover over any address, shows how many transactions it has etc. 
      1. Couple weeks later, dedicated himself to finding phishing sites and black-listing them with Metamask and his chrome extension. 
      2. Recently – added service every midnight to do data gathering on each domain. 
         1. There is a group working on anti-phishing. We share information and data through an established channel. 
      1. We now have a bot to run ops on domains (whois data gathering, DNS records, SSL dumps, Shodan data on the server) 
      2. We have also deployed an archive bot on Twitter @EthereumBadList  
   1. My main effort: to protect users. 
   2. In the start of 2017, I got into Ethereum development. 
   3. Met team at Myetherwallet (now MyCrypto). Introduced me to other people like Griff."
51,51 Mycrypto.com - Harry Denley.txt,1/8/2018 - Sina & Robbie.,1/8/2018 - Sina & Robbie.
51,51 Mycrypto.com - Harry Denley.txt,Harry Denley,Harry Denley
65,65 Remix - Yann Levreau.txt,," 
"
65,65 Remix - Yann Levreau.txt,1. Other bounties?,"1. Other bounties? 
   1. Hard to make links between tools. 
   2. If you want to make a DAPP (truffle and remix, metamask for front-end), how can you aggregate all tools or write documentation? 
   3. Swarm integration for Remix? 
      1. Currently if you “import”, it imports from the Swarm gateway –- it’s a basic integration, and can be improved to be really cool. 
   1. Frustrated developing on Swarm. Building Swarm integration, but not usable in production.   
   2. Was trying to fix a bug in Remix - but related to how they import Swarm file -- had trouble fixing bug because emix used Swarm gateway which was offline. 
   3. Swarm not in production environment yet -- looking forward to this. 
   4. Web3 library 
      1. In Web3 have send transaction method - no wrapper around it or other functions that people can use, and use more safely. Would like to see web3 safe send transaction (locate transaction in EVM to check if transaction passed. If its fine, transaction is sent, and if not there is a warning). 
      2. “Wrapper around Send Transaction Function” 
      3. Possible to develop transaction which fails. If you want to develop a transaction, you first have to send/execute it (but don’t want to lose money). Execute transaction locally, wait for trace and then debug it. Think this is what Truffle is using. 
      4. Contract’s with specific values: in code, write maximums to revert transactions - can this be added in front-end (ie. limiting contracts values so when transaction is sent there is a check beforehand so you can be sure you don’t make mistakes). 
         1. Would require changes in solidity to provide this functionality to web3"
65,65 Remix - Yann Levreau.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Focussed on Remix and improving the UX: 
   2. Remix is an entry point for users  
      1. But it’s hard to use for beginners. 
      2. It’s hard to use if you don’t know blockchain or the tech behind it. 
      3. There’s documentation and videos on youtube – still hard to use. 
      4. Idea: do UX user interviews 
         1. take a beginner developer or new user, and let them use Remix (or other tools), check out what the main flows are, what are their main questions,  
      1. They have two people – who come from front-end dev. When they started 6 months ago, they didn’t know blockchains, so their feedback was helpful. 
      2. There are three kinds of blockchain users 
         1. 1) front-end dev: wants to use the blockchain to build UI, but doesn’t care about contracts. 
         2. 2) contract developer 
         3. 3) administrator: not writing code, but still needs to call contracts or send transactions to them. 
      1. Remix is not focused on front-end devs right now. They’re not targeting these people. They target contract developers or admins who “use” contracts. 
      2. Is there a tutorial, or a beginner contract that it initializes: 
         1. Yes. There is a “ballot” contract – but it’s kinda opaque and hard to understand. 
      1. Docs: remix.readthedocs.io 
         1. Has a quick start page. 
      1. Need to improve: onboarding for “administrator” users (above). So they can use Remix without making errors. 
         1. Two bounties 
            1. User testing for various blockchain-user personas (above). 
            2. Making tutorials or videos for beginners using Remix. 
   1. Building the static analysis tab: 
      1. Need to add more modules. 
   1. There will be a way to add plugins in Remix 
      1. Let’s say you are an external contributor, you’ll be able to add code, but the code won’t be in the Remix github, but in its repo and it’s added as a plugin. 
      2. E.g. Solium integration. 
         1. We are architecting the plugin API with the Solium team. 
      1. Another example: Oyente –– we’re integrating it as a plugin. 
   1. Potential bounty in the future: 
      1. Writing good documentation around this. We’re all super busy devs, and need people to help with documentation. 
   1. Last week – someone created an Electron app for Remix –– self-driven contributor would be nice if they can post Github issues and have people contribute and get rewarded."
65,65 Remix - Yann Levreau.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Working on dev tools for the Foundation for the last 2 years. 
   2. Working on Remix for the last 1.5 years. 
      1. Working alone for the last bit. 
      2. Over the last 6 months, there are more developers. Team is 4-5 people now. 
      3. Iuri Matias: dev of Embark –– he’s on the Remix team. 
   1. Main scopes of work: 
   2. Improving the UX. 
      1. There’s a Remix chat where some people were saying they were using it to deploy mainnet, and I was shocked, since this was not the intended use-case initially. 
      2. UX for people to use Remix and deploy contracts, and not make mistakes. 
   1. Adding static analysis 
      1. There is a new tab-based layout. 
      2. There are several modules. 
   1. Splitting Remix into different modules 
      1. Can now write contracts, debug, deploy, do static analysis –– this used to be all in one app. Now it’s modular, so you can use these pieces in different apps. E.g. can use static analysis in VSCode. 
         1. He was in touch with Roan Blanco, developer of VSCode –– he started to integrate the debugging part of Remix as a plugin. Might do the same for static analysis. 
            1. Road is adding the static analysis."
65,65 Remix - Yann Levreau.txt,2/26/2018,2/26/2018
65,65 Remix - Yann Levreau.txt,Yann Levreau,Yann Levreau
70,70 SpankChain - David Wolever.txt,," 
"
70,70 SpankChain - David Wolever.txt,1. Are there any other questions we should be asking?,"1. Are there any other questions we should be asking? 
   1. Why are people building dapps instead of just building them with a normal database or something?  
   2. What is your motivation for choosing a blockchain based project, instead of just a Postgres database?"
70,70 SpankChain - David Wolever.txt,1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. Front end: nothing really 
   2. Dapp: went through intense reviews. 
      1. 3-5 people on a call and would go line by line through the code 
      2. Also hired a couple external audits 
   1. Even after all that, found one bug right before launch (a few days before)"
70,70 SpankChain - David Wolever.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. First, use Truffle for unit testing. 
   2. Series of scripts for blockchain scraping. Call Truffle to send transactions to testrpc. Script connects to testrpc to make sure the state has been correctly changed. 
   3. Manual testing by running multiple test auctions. Just actually going through the process 40 or 50 times over the course of a week. Started on testrpc and then did it on a testnet with more test users. Even tested on the mainnet a few days before the real auction. 
      1. Tests on the mainnet actually revealed new problems that weren’t revealed on testnet 
      2. Because there were hundreds of logs per block on the mainnet, it was too many 
      3. Had to go through and make performance better on mainnet"
70,70 SpankChain - David Wolever.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Vim editor, truffle. Metamask.  
   2. Switching over to onenet, using something called Vinos. Under the radar. 
   3. Vinos going to support state channels natively. Will be a little bit less terrible than Metamask. 
   4. Trouble with metamask. 
      1. Interface not well documented. 
      2. Doesn’t have promises. 
      3. Had awful error reporting. 
      4. Don’t know when someone closes metamask transaction. Had to write logic that says if they’ve clicked the button 3 times and we haven’t heard back, give them a tooltip. No documentation for that kind of thing. 
   1. Vinos will be iframed, not chrome extension."
70,70 SpankChain - David Wolever.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. Ours. Spankchain."
70,70 SpankChain - David Wolever.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Gas limit: No problems with this really. 
      1. Metamask was giving absurd gas prices because another service was getting it wrong. 
   1. State Channels: Have had a pretty good experience there. Biggest time sync is blockchain to database synchronization. David wrote something for using state channels with SQL. Insert transactions from a block, insert signed messages, and get balance for account.  
      1. Biggest frustration is getting block messages into the database.  
      2. Wrote a tool called Chainsaw that does this. No mechanism for a reorg."
70,70 SpankChain - David Wolever.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. Need a tool like metamask supporting state channels (Vinos will fix this) 
   2. So hard to get insights into what’s going on in solidity. 
      1. Debuggers are really hard to use. 
      2. Debugging tests is a matter of just guessing why assertions failed. 
   1. Solidity interpreter would be awesome without having to compile each time, would make development much faster."
70,70 SpankChain - David Wolever.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. No real breakdown of how everything works together 
      1. Web3 talks to a geth node which has the blockchain state. What does the contract do? How do you deploy it? 
      2. General how stuff works."
70,70 SpankChain - David Wolever.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Been working with Spankchain team. Combination of state channels and smart contracts. 
   2. Also worked on smart contract for ICO auction."
70,70 SpankChain - David Wolever.txt,David Wolever,David Wolever
86,86 Zeppelin - Manuel Araoz.txt,," 
 
 
"
86,86 Zeppelin - Manuel Araoz.txt,1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. We design first then develop.  
   2. Sometimes they see other teams mix these two phases. 
      1. This is bad, because you can break your assumptions in nuanced ways.."
86,86 Zeppelin - Manuel Araoz.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Truffle automated testing with javascript unit tests 
   2. Migrated to async/await style of tests 
   3. Mocha, Chai 
   4. Onchain bug bounties for finding implementation bugs."
86,86 Zeppelin - Manuel Araoz.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. Interesting: Solidity compiler team runs OpenZeppelin tests when they update & other projects tests to make sure they’re not breaking."
86,86 Zeppelin - Manuel Araoz.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Use the truffle toolkit the entire way. Truffle for testing. 
   2. Publish on npm for users to use open zeppelin. 
   3. One of the first to try ethpm. 
      1. It was super buggy with IPFS errors and it couldn’t find the resources and stuff"
86,86 Zeppelin - Manuel Araoz.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. Upgradability 
   2. We’re going to build an upgradable library, for the most used kinds of contracts. So that you can just use the library and it will be an upgradable form[a]. 
      1. Upgradability requires governance mechanisms though, and these are more difficult to figure out, as it is not just about code. 
   1. We are not working on debugging, but would love to see someone solve it 
      1. We use the truffle debugger but it’s not covering all their needs 
      2. Remix is good, but we would rather not use the web UI. 
   1. Better tools for deploying and managing contracts on the blockchain 
      1. We’re building this (John & Marcus) 
   1. Tools to replay past transactions 
      1. E.g. for historical testing of upgrades.. replaying transactions from previous versions and making sure they don’t break. 
   1. Stress-testing cryptoeconomic system: we only really do human analysis now.  
   2. Better tools – like simulations of the mechanism design to prevent game theoretic problems – would be cool. This can be a bounty[b]."
86,86 Zeppelin - Manuel Araoz.txt,1. Who are the other people you think we should talk to?,"1. Who are the other people you think we should talk to? 
   1. Jorge from Aragon. 
   2. Kevin Owocki from Gitcoin. 
   3. Other Zeppelin devs: he will make intro. 
   4. Esteban from Decentraland."
86,86 Zeppelin - Manuel Araoz.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Open Zeppelin: open source smart contract framework 
   2. Currently working on building web app 
      1. On chain libraries with upgradability 
      2. Contract interaction 
      3. Marketplace 
      4. Scheduler for asynchronous execution."
86,86 Zeppelin - Manuel Araoz.txt,Manuel Araoz,Manuel Araoz
86,86 Zeppelin - Manuel Araoz.txt,[a]Would like to know more about this.  Mark Beylin mentioned same thing,[a]Would like to know more about this.  Mark Beylin mentioned same thing
86,86 Zeppelin - Manuel Araoz.txt,"[b]I think this would be better as a challenge for researchers -- Mechanism put out and whoever can break it, get rewarded.....  should be positioned as a challenge with prestige similar to how hacker sites work.","[b]I think this would be better as a challenge for researchers -- Mechanism put out and whoever can break it, get rewarded.....  should be positioned as a challenge with prestige similar to how hacker sites work."
39,39 Kyokan - Dan Tsui.txt,," 
"
39,39 Kyokan - Dan Tsui.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. There’s the inner crew of devs then there’s other teams who are trying to build stuff, but who don’t have the same access. There’s also language barriers etc.  
   2. We don’t quite know the lay of the land: e.g. “should we integrate with Metamask or build our own things”? 
   3. Knowledge of tooling and documentation –– very fragmented / scattered across ecosystem. 
   4. How to incorporate layer 2 solutions? 
   5. People’s roadmaps are defined based on their analysis of tech at the time of their ICO, even though new stuff is becoming possible nearly every day. Staying up to date with this is challenging. 
   6. When we were starting work on Ethereum stuff we needed to learn. In order to do that well, we needed to talk to different projects as this is ultimately the best way to learn and the Ethereum community can be very welcoming if you just find the right channels. 
   7. But how do people know what to use who aren’t in the community: e.g. Metamask vs Mist? 
   8. Dfinity asked them to go through all the Ethereum dev tools 
      1. They use truffle, ganache, Remix - all the usual stuff. "
39,39 Kyokan - Dan Tsui.txt,1. Who are the other people you think we should talk to?,"1. Who are the other people you think we should talk to? 
   1. GK Chan - jchan@kyokan.io 
   2. Matt Slipper - mslipper@kyokan.io - wrote UI’s integrating with Metamask & leading Spankchain wallet project"
39,39 Kyokan - Dan Tsui.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. LLC that does consulting and builds projects 
      1. Their first crypto client was Metamask. 
      2. Other examples: build UI on top of the smart contracts how to integrate with scaling solutions. 
      3. Working with state channels on wallet. Should be live on 1st or 2nd week of April 
         1. First: “productionizing” their library for micro payments. 
   1. Got into this space contributing to the EthereumJS ecosystem. 
   2. Within the team, I function as PM and do code reviews."
39,39 Kyokan - Dan Tsui.txt,3/14/2018,3/14/2018
39,39 Kyokan - Dan Tsui.txt,Dan Tsui,Dan Tsui
81,81 William Entriken.txt,," 
"
81,81 William Entriken.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. Lack of private/business incentive to solve Bank/payments, not exchange, problem in crypto. 
   2. The ERC process: 
      1. Bring initiative, there’s forks, solve the problems –– being polite, being political, making phone calls to reach consensus. 
      2. Problems: 
         1. Problem #1: Ethereum is centralized. Code / governance is handled by one party. 
            1. This is the “EIP” process. 
            2. These aren’t technical reasons, they’re political reasons. 
      1. The EIP process: 
         1. Anybody writes an EIP – must be technically valid, describes a change to the Ethereum ecosystem. “I want a sidechain”, “i want to change the gas for this opcode”, etc 
         2. If the EIP is implementable (i.e. it compiles), it’s accepted as a draft. 
         3. If there is community support, it’ll be reviewed by all core devs. 
         4. If it is supported by core devs, it is implemented. 
         5. If people support it, then people will upgrade the clients. 
      1. How it actually works: 
         1. You publish the EIP. There is a storm of discussion emotional, backhanded. 
            1. Blackballed for mentioning cultural/political taboos 
         1. PR is not the right word for it. More like a wiki. 
         2. They discuss it at the core dev meeting. They implement the code, clients upgrade it. 
            1. Someone puts it on Hudson’s PM meeting agenda 
      1. How Swift (from Apple) handles this: 
         1. You go to the mailing lists, you start a discussion.  
         2. This takes a lot of effort, so you wanna be sure your stuff is legit.  
         3. Big discussion in the community. Swift is centralized (one party). You need code already, a test case or something, you explain technically in-depth. You get it to review, 2 week review period, it’s posted on top of Apple Swift website + goes out to mailing list. 
         4. The key point is: the 2 week speed pump. Everyone has to pass through that. 
      1. How DARPA handles bounties 
         1. Here’s a very specific problem and you need a 100x improvement 
         2. Come up with working solution that can support network of 10k 
         3. If you can do it elegantly, here’s 50k and we’ll study it further before implementing 
   1. The community expects full-time people they don’t cater to part-time contributors. 
      1. A contributor needs to look at all issues and PRs –– there’s no queueing system. One could get approved at any time. 
   1. The ERC process: 
      1. Write an interface for a contract. He wrote 165 and 721. 
      2. A ton of new token standards. 
      3. First mover advantage to writing standards/interfaces - something like street cred for devs.  
      4. Over-standardization occuring 
      5. Not enough focus on what people would actually want/need to use 
   1. I don’t see the need for a package manager, the existing tools seem adequate. 
   2. Not enough money allocation from teams to bug bounties."
81,81 William Entriken.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. The #1 problem:  
      1. My mom wants to buy ETH. In order to do this, she has to go to Gemini, give her SIN, give access to webcam, and access to their bank account. 
      2. Biggest bank in this ecosystem is Coinbase. 
      3. Every ICO is “illegal” 
      4. Need a new crypto bank. This bank needs to solve two huge problems: 
         1. Identity management (provided by the bank themself). 
         2. Anti money laundering 
   1. The #2 problem:  
      1. Solving KYC / AML for the general population, is understandable, and secure 
         1. Couple solutions like <$300 transactions lets you avoid AML restrictions"
81,81 William Entriken.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Started using Ethereum in December. 
   2. Created ERC721/161 to support my project. It was contentious, I won the fork wars. 
      1. Underestimated how crazy this ERC721 process was. 
      2. 721 is the first standard that’s actually an Interface. 
      3. Interfaces are broken in Solidity. 
   1. Started filling bugs in Solidity. –– interfaces should be able to inherit from interfaces. 
      1. External vs public in interfaces. I fixed it. 
      2. Fixing things in Solidity –– basically rewriting the whole inheritance model in Solidity. 
   1. In 721, I had a caveat section, “errors in Solidity etc” –– 
      1. People said: “the standard shouldn’t say a function is payable” –– but I said that the interface needs to enforce this. 
   1. Got the attention of Christian, Alex, Hudson. 
   2. 721 had a dependency on 165. So I started to fix 165. 
   3. Mainly occupied with full time job, speaking re: 721 and its use cases at conferences, evangelism, million dollar homepage, navy, google, hardware (semiconductors) 
   4. Big open-source guy, worked on KDE project, worked in semiconductors."
81,81 William Entriken.txt,"4/18/2018 - Parker, Sina, Robbie","4/18/2018 - Parker, Sina, Robbie"
81,81 William Entriken.txt,William Entriken,William Entriken
30,30 GivEth - Griff Green.txt,," 
"
30,30 GivEth - Griff Green.txt,1. Are there any other questions we should be asking?,"1. Are there any other questions we should be asking? 
   1. What other projects do you interact with the most? Building the Ethereum topology, who works with who and which projects? Where there are chasms, so you can get bridge them.  Maybe a bounty? 
   2. There’s so much good stuff on people’s githubs.  
      1. How do you know where to find stuff.  
      2. “Sort all Ethereum projects that are using React” -- aggregation of data. How can we get this data into searchable formats?"
30,30 GivEth - Griff Green.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. We lean on the community a lot and give them “sneak previews”. We let them to go through the UX, and watch what happens.  
   2. The same person does all the testing. 
   3. We do a lot of auditing for other projects. Audria does this. We have a lot of good auditors and always maintain 100% code coverage. 
      1. Use travis for CI. 
   1. Most bugs they see are about game theory & cryptoeconomics. 
      1. These come up in ad-hoc situations. 
      2. We try to isolate things into individuals. Clear interfaces. 
   1. We always wanted push to live mainnet right away, but... 
      1. Today we made the decision to go to testnet, because mainnet is so expensive. 
      2. Testnet is not real a test (since it’s not real money). 
         1. We’re going to have a testnet token that represents real Ether. 
         2. “Proof of Authority” using Rinkeby. 
            1. Using the Minime token controller. Multisig pays out based on what’s happening on testnet. 
      1. Ehter’s price has gone up, gas is high, so everything is super expensive. 
         1. BAD for our users. 
         2. This is game over for dApp developers. 
         3. If Ethereum cannot solve these issues, developers will leave. 
            1. RSA, Ubiq will have Solidity. But don’t have block explorers. White hat hacker group is looking into  
            2. Open-source Etherscan. "
30,30 GivEth - Griff Green.txt,1. Other bounties?,"1. Other bounties? 
   1. Scaling proof-of-authority. 
   2. Block explorer. 
   3. Ropsten testnet gas limit -> attacking with gas limit. 
   4. Open-ended: apply for a bounty with your own idea. 
   5. We need a 24/7 security team. The network is not being watched by anyone because right now the network is being attacked in a weird way, through the estimate gas function and throwing txs in pools."
30,30 GivEth - Griff Green.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. What was the first thing you built related to Ethereum? 
   2. Built a Will contract. Got a Masters degree in Digital Currency. 
      1. Alex van de Sande took the time to correct his code on Reddit. 
   1. Talking about price makes people act like assholes. 
   2. The DAO!!"
30,30 GivEth - Griff Green.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Use Feathers interface to do caching. Improves UX. 
   2. NPM. Etherscan. Metamask. 
   3. Set of tools that we made ourselves. We don’t use truffle because we were building smart contracts before truffle was a thing. 
   4. React. Remix."
30,30 GivEth - Griff Green.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Irregularity of gas price. 
   2. Key management - hands down stopping adoption. Need more people teaching about key management. Tutorial materials? Bounty?  
   3. Ropsten testnet gas limit."
30,30 GivEth - Griff Green.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. Lack of sharing and communication. I know other people are using React, building UI and that we could re-use that.  
   2. How to go from web3 to the UI. Could do more research to re-use existing open-source tooling. 
      1. In the beginning we were purely running on the blockchain as a db. Then, their UX suffered due to slowness. Feathers helps alleviates this. 
   1. We are a holocratic org. We work in small teams, building the GivEth Galaxy."
30,30 GivEth - Griff Green.txt,1. Who are the other people you think we should talk to?,"1. Who are the other people you think we should talk to? 
   1. Taylor and Hendry from myetherwallet 
   2. Dave Appleton 
   3. Jack from Colony 
   4. District0x crew 
   5. Swarm City - Bernd Lapp 
   6. Khosla 
   7. Nick Johnson 
   8. Jorge Izquierdo 
   9. Jordi Baylina 
   10. Phil Dian  
   11. Matthew Diafrante  
   12. Karl Floersch 
   13. Emin Gun Surrer 
   14. MakerDAO - Andy 
   15. David Knott - Plasma "
30,30 GivEth - Griff Green.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. 3-tiered approach: 
      1. Blockchain smart contracts: liquid pledging pledges that take control of authority and funds. Blockchain layer does the accounting. 
         1. Owner gets notified by email. 
      1. Bounty system: basically a chat room. Project discovery layer. 
      2. UI layer: reads off the blockchain, interacts with the blockchain."
30,30 GivEth - Griff Green.txt,1/5/2018 - Sina.,1/5/2018 - Sina.
30,30 GivEth - Griff Green.txt,Griff Green,Griff Green
20,20 EF & Mist - Alex van de Sande.txt,," 
 
 
"
20,20 EF & Mist - Alex van de Sande.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. People build new features, we check, and then approve it. 
   2. We’ve had issues –  
   3. Meteor.js migrating to React."
20,20 EF & Mist - Alex van de Sande.txt,1. Other bounties?,"1. Other bounties? 
   1. Finding talented people is very hard. They are in such high demand. Trying to get people out of school. Online courses in Solidity. 
      1. Web developers, software engineers. 
      2. Separate recruiting approaches for the Foundation."
20,20 EF & Mist - Alex van de Sande.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Securing Electron (desktop JS) was hard. (JS in website can take over your system - happens with chrome) 
   2. Integrating with other technologies: IPFS, Swarm, etc. Frustrating that they are all in their early days. 
   3. Information overlap - this is a major problem - e.g. in keeping up-to-date with Solidity developments, even though I’m on the Foundation. 
      1. A lot of people have been trying to integrate this information without success  
      2. I like two things from the Foundation: 
         1. Daily standup for Geth team. 
         2. Every quarter Vitalik and Ming post an update on what happened in the Foundation. 
      1. To be improved at the Foundation: 
         1. On the operational side: 
            1. Make the foundation more open, more modular with their finances. Each team should have more autonomy, with their finances transparent on the blockchain. 
         1. On the technical side: 
            1. Autonomy would play into this as well. 
      1. What are you excited about: 
         1. Casper. 
         2. Sharding. 
         3. Applications: Aragon, MakerDAO."
20,20 EF & Mist - Alex van de Sande.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
      1. One dev working on a backend integration – I stopped working on this to work on one issue – “password wasn’t working for user” – couldn’t reproduce the bug. Could put a bounty for someone to recreate the bug & solve it. 
      2. Different systems: Gitter, Github issues, different wallets  
      3. How we solved: created a single issue with all comments from other issues. Created google form for anyone who had an issue, to see if there’s a pattern amongst problems. 
      4. What type of expertise is needed for this: we don’t have enough security oriented people on our team. We passed the bug reports to the Foundation security person, who tests them.[a] 
         1. Single case: serious bug report came in and was fixed. But couldn’t test the fix, because they would have run exploit on their machines. They don’t have pen testers. 
         2. Wanted – less of a wall between their team and the outside. 
         3. Need:  Recurring open source developers --- that are working for bounties --  
            1. They haven’t tried bounties yet. 
            2. Is the problem: dev awareness or payment? 
            3. They’re making app more modular."
20,20 EF & Mist - Alex van de Sande.txt,1. Who are the other people you think we should talk to?,"1. Who are the other people you think we should talk to? 
   1. Nick Johnson  
   2. Ryan Zurrer"
20,20 EF & Mist - Alex van de Sande.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Working on Mist, the Ethereum browser. 
      1. Developers contributing open-source. 
      2. There’s a wall between core team & open-source team. 
         1. Would love for people to be paid reliably for features. 
      1. 3 Developers. Talk on Discord. 
      2. Current experimentations in paying open-source developers: 
         1. Colony 
         2. Commit F 
         3. We want beter Github integration. Now possible with Status Open Bounties and Gitcoin etc."
20,20 EF & Mist - Alex van de Sande.txt,1/10/2018 - Sina & Robbie.,1/10/2018 - Sina & Robbie.
20,20 EF & Mist - Alex van de Sande.txt,Alex van de Sande,Alex van de Sande
20,20 EF & Mist - Alex van de Sande.txt,[a]Security service of group from foundation -- bounty for group where bugs are passed to??,[a]Security service of group from foundation -- bounty for group where bugs are passed to??
61,61 Pragma - Marcus Molchany.txt,," 
 
 
 
 
"
61,61 Pragma - Marcus Molchany.txt,1. Are there any other questions we should be asking?,"1. Are there any other questions we should be asking? 
   1. Fabio Berger from the 0x team"
61,61 Pragma - Marcus Molchany.txt,1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. Warning messages from Remix or solc.  
   2. Reading through Consensys best practices and making sure I use them in my contracts.  
   3. Asking for code review in subreddits."
61,61 Pragma - Marcus Molchany.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. For contracts, I use Remix Solidity with the Javascript VM. For unit tests, I write JS unit tests using truffle. Tried to write unit tests in solidity but it was difficult. Testrpc behaves strangely sometimes. 
   2. When developing a contract, I will write extra events just to make sure the right thing happened, and then will delete the events when contract is in production. 
   3. Automated testing? 
      1. Included above. Automated is unit tests with truffle. Manual is event logging, usually in Remix."
61,61 Pragma - Marcus Molchany.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Ethereum: Remix solidity, testrpc, truffle, web3 JS, Infura, Etherscan 
   2. Web: React / redux, create-react-app"
61,61 Pragma - Marcus Molchany.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. More 0x relays!"
61,61 Pragma - Marcus Molchany.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. In general project setup for the first time is difficult.  
   2. Didn’t know if I needed geth or testrpc. 
   3. Didn’t know if I needed to download the entire blockchain. 
   4. Also had problems with the documentation for solidity."
61,61 Pragma - Marcus Molchany.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. I really want a richer debugger. The one in remix is too hard to figure out[a]."
61,61 Pragma - Marcus Molchany.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. Slight paradigm shift about waiting for code to be run while transactions are mined.  
   2. Understanding how state was preserved in a contract.  
   3. Finding good teaching resources on Youtube and elsewhere. 
   4. What would be the hardest part of teaching somebody to build a dapp? 
      1. The paradigm itself.  
         1. The idea that when your code runs, it’s running when a block is mined.  
         2. Calls to your contract don’t execute instantly like in a normal web app.  
         3. Combination of needing to use different test nets while testing. "
61,61 Pragma - Marcus Molchany.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Made a few standalone contracts for fun.  
   2. More full-fledged projects are web frontend with blockchain backend.  
   3. Web apps use Metamask to interact with blockchain. Infura as provider if MetaMask not installed. 
   4. We built www.hashheroes.com as our first dive into Ethereum"
61,61 Pragma - Marcus Molchany.txt,Marcus Molchany,Marcus Molchany
61,61 Pragma - Marcus Molchany.txt,"[a]Better spec for a debugger combining Nadav, Jack Peterson, Richard Moore, Marcus, Martin Swende comment for spec for bounty","[a]Better spec for a debugger combining Nadav, Jack Peterson, Richard Moore, Marcus, Martin Swende comment for spec for bounty"
29,29 GivEth - Arthur & RJ.txt,," 
"
29,29 GivEth - Arthur & RJ.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Offchain stuff is not dispute related. 
   2. Gas limit issues: 
      1. Jordi wrote contracts to begin with – so WE had a good start. 
      2. Multiple DELEGATE calls to the same contract are the same price each time but this doesn’t make sense. You’ve already loaded the contract in memory, so should be cheaper in consequent calls. 
         1. Abstracting – one key-value contract that stores pointers to data. 
         2. Rest of data – stores all data. Mappings of hashes to boolean to structs / addresses / etc. 
         3. Leads to upgradability of contracts. To the parameters used in the logic. 
         4. Separate data from the application let’s you iterate. The data contract is owned by the business logic, ETC. 
      1. Estimating gas / optimizing code: 
         1. To get gas limit: run it on testrpc. Easy. 
         2. Debugging is hard, after you start adding assembly in there. 
            1. Remix is hard for large contracts. Multiple contracts. 
   1. Testing flow: 
         1. We use Mocha + wrappers to generate contracts in Js. 
         2. Needed: better errors. e.g. if testrpc spit out more useful messages. 
      1. Deployment & CI: 
         1. We have Node scripts to do this. Async await. Pretty simple contract. 
            1. Jordi’s tool compiles everything into a single file makes verification on Etherscan simpler."
29,29 GivEth - Arthur & RJ.txt,1. Other bounties?,"1. Other bounties? 
      1. A solid debugger – needs a rare breed of dev to build. 
      2. Scaffolding tool for prototyping things – 
         1. To test a small contract before integrating with everything else. 
         2. Think this will standardize over time."
29,29 GivEth - Arthur & RJ.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Remix vs. your local dev environment: 
         1. Can write code, deploy, and debug in Remix. 
         2. EVM Lab: written by Martin Swende give it a tx hash spits out opcodes, storage, memory. 
            1. RJ wrote source code mapping – doesn’t work for complex contracts. Show your contract code along with the opcodes. 
            2. We use it often. Simple CLI tools. Just need Web3 and a tx hash. Sounds AMAZING. 
            3. To be improved: bugs with reproducing certain transactions. 
               1. E.g. couldn’t recreate contract creations. 
               2. Source mappings."
29,29 GivEth - Arthur & RJ.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Giveth - Charity platform with three layers 
   2. Fairly complex contracts on-chain. Pushes the limits of gas limit. Making transactions is relatively expensive. 
      1. Off-chain stuff. We cache everything we store images and profiles offchain, will eventually be on IPFS. 
      2. Some actions are not on-chain: “reviewing a milestone”."
29,29 GivEth - Arthur & RJ.txt,1/26/2018 - Sina & Robbie.,1/26/2018 - Sina & Robbie.
29,29 GivEth - Arthur & RJ.txt,Quazia & RJ,Quazia & RJ
19,19 EF - Nick Johnson.txt,," 
"
19,19 EF - Nick Johnson.txt,1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. Write a spec and define edge cases and corner cases 
   2. Lots of unit tests 
   3. Make a point of testing where you intentionally break 
   4. Ultimately get it audited 
   5. How will this get easier for beginners? 
      1. Open source solidity libraries so that less code needs to actually be written by beginners (just 10 lines of customization) 
      2. Build some of these best practices into static analysis tools (linterns on steroids) 
      3. Solicit crowdfunding to pay for the audits of projects that the mainstream is interested in 
   1. Open Zeppelin appears to be the best open source solidity library out there"
19,19 EF - Nick Johnson.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Truffle unit testing with mocha 
   2. Added built in testrpc 
   3. Testrpc still doesn’t have big number support for certain signatures so we have to fire up a geth node"
19,19 EF - Nick Johnson.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Open Zeppelin tools are increasingly good. But try to keep the smart contracts as small as possible 
   2. Just web3 itself in terms of javascript 
   3. ETH Gas station and etherscan are useful for different reasons"
19,19 EF - Nick Johnson.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. Byzantium added return data size (prevents arbitrary return data size limits). Once solidity implements this, it will be possible to return strings and stuff. 
   2. Automated updatable smart contract?"
19,19 EF - Nick Johnson.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. Becoming familiar with the execution model 
   2. You don’t store the results on the blockchain, you store the invocations (because the computer is entirely deterministic)"
19,19 EF - Nick Johnson.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. ENS: documentation, smart contracts, UI’s,  
   2. Auditing other smart contracts 
   3. Other smart contracts 
   4. Ether cards 
   5. Offchain: dev tool, EVM static analysis tool, "
19,19 EF - Nick Johnson.txt,Nick Johnson,Nick Johnson
28,28 Gitcoin - Kevin Owocki.txt,," 
"
28,28 Gitcoin - Kevin Owocki.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Pytests with TravisCi 
   2. Using product. Use gitcoin to build gitcoin. 
   3. Selenium tests with native web3 functionality"
28,28 Gitcoin - Kevin Owocki.txt,1. Other bounties?,"1. Other bounties? 
   1. Gitcoin X EthPrize 
   2. More talent than fundable issues right now at Gitcoin - always looking for more cool stuff for the community to work on. 
   3. Happy to help."
28,28 Gitcoin - Kevin Owocki.txt,1. What are the best educational resources?,"1. What are the best educational resources? 
   1. Below links, youtube videos 
   2. https://gitcoin.co/help  
   3. https://www.youtube.com/watch?v=cZZMDOrIo2k 
   4.  https://github.com/gitcoinco/gitcoinco/issues/38 
   5. General help content writing"
28,28 Gitcoin - Kevin Owocki.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Truffle for managing deployments and smart contract versioning 
   2. Web3Py, due to comfort with py and personal relationship 
   3. Django, Bootstrap, Metamask, Infura for Gitcoin Platform - which is mostly a standard web interface."
28,28 Gitcoin - Kevin Owocki.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. Onboarding users with first time Dapp user experience like metamask, mainet/testnet really sucks and could be improved in a number of ways. 
   2. We started off chain, since standard bounties is not something we wanted user to pay gas for 
   3. What we’d like to do on-chain 
      1. Start work feature signal in off-chain DB 
      2. Would be stored on-chain 
      3. Staking process for starting work on a particular bounty 
   1. What features from web dev background are lacking with Dapp Development?  
      1. We’ve struggled with managing gas fees on behalf of users 
      2. Built gitcoin.co/gas for scraping EthGasStation for least amount of gas + low confirmation time.  
         1. Would be nice to visually see gas price vs confirmation time. 
      1. Would’ve been nice to integrate gas manager with block explorer, more dapp UI’s 
      2. Easy javascript widget to take place of metamask to not hinder gitcoin developers by requiring chrome download. Web2 payments to Web3 payments bridge to abstract away the harder blockchain concepts. Maybe an e-commerce-like widget for paying for gas via CC. 
         1. Portis might be like this?  
         2. Stablecoins and improved UI’s 
      1. Selenium integration tests with native web3 functionality 
         1. You can work with DOM on Selenium but you can’t hookup chrome extension (Metamask) 
         2. Might be possible with JS widgets 
      1. https://github.com/ethereum/EIPs/issues/948 Subscriptions on the blockchain would be great"
28,28 Gitcoin - Kevin Owocki.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. I developed Gitcoin, a bounty (and tips) platform for incentivizing open source contributions. 
   2. Solve incentivisation problem of OSS, where it is highly strategically valuable but difficult to capture in real-time the value being created. 
      1. I want to bring more devs into the space - MAIN GOAL. 
   1. 300 bounties fulfilled so far and recruiting opportunities for OSS developers 
   2. Consensys offered customers (projects creating bounties for pilot of gitcoin), funding, regulatory protection 
   3. Not totally interoperable for now with EthPrize, recruiting strategy etc. Bounties are just one of the tools to recruit developers "
28,28 Gitcoin - Kevin Owocki.txt,"4/24/2018 - Robbie, Parker, Andy","4/24/2018 - Robbie, Parker, Andy"
28,28 Gitcoin - Kevin Owocki.txt,Kevin Owocki,Kevin Owocki
74,74 Truffle - Nick D’andrea & Christopher Gewecke.txt,," 
"
74,74 Truffle - Nick D’andrea & Christopher Gewecke.txt,1. Other bounties?,"1. Other bounties? 
   1. Set of tools: linters & coverage tools 
      1. Critical, have mostly been worked on volunteer basis. 
      2. Needs ongoing support needs to adapt to changes in the stack (Solidity, Web3, …) 
      3. Should be platform agnostic, should not assume that people are using Truffle, should work with dapphub. 
      4. Leonid Logvinov wrote a 0x code coverage tool. 
         1. bounty: making a next-gen coverage tool, that can be consumed by any platform or into your tooling. 
      1. Code coverage is absolutely critical from a security point of view. 
         1. The existing system is fragile, and only has two devs working on it part-time (?) 
            1. People to talk to: Christopher Gewecke, Alex Rea (works on Solidity coverage), Leonid Logvinov (0x coverage tool) 
            2. Chris wrote the code coverage tool before joining Consensys, it’s a volunteer project. 
      1. There are also more sophisticated audit tools: Mythril by Consensys (Bernard Mueler), Oyente maintained by MelonPort is another one. 
   1. Tracing / gas-profiling? 
      1. We would like to add this kind of stuff to ganache. 
      2. Remco Bloemen working on gas-profiling. 
   1. Bounty: support for hardware wallets in Metamask 
      1. Web3 has their provider engine. 
      2. Better key management support on the web3 level. 
      3. Metamask also wants to have Ledger support."
74,74 Truffle - Nick D’andrea & Christopher Gewecke.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. Integration between truffle & ganache? 
      1. We’d like their tools to provide a cohesive set of tools. 
      2. Takes time to build and just figure out what the requirements are."
74,74 Truffle - Nick D’andrea & Christopher Gewecke.txt,1. What are the best educational resources?,"1. What are the best educational resources? 
      1. Currently we use Gitter. Every Truffle member spends time in there. 
      2. But we don’t think Gitter is the right tool for Truffle’s entire community support 
         1. Need to see what messages were missed. 
         2. People find bugs or issues that just don’t get serviced, we fall through the cracks 
      1. Need a better way to announce to our community 
         1. We have a mailing list 
         2. We can message on Gitter – but people miss the messages 
      1. There’s some first-class moderators on there. 
         1. Detailed answers are so helpful and seem to come through often in places other than our docs, which is hard to manage. 
      1. Stackoverflow is a great resource – look at questions on stackexchange to find what things are creating the most problems for users – where the anger is."
74,74 Truffle - Nick D’andrea & Christopher Gewecke.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Chris: 
      1. The closer you are the foundation of the stack, the less pain you feel. 
      2. We probably cause the pain. 
      3. There’s a disparity between demand for infrastructure, and supply of engineers working on it. 
      4. I love web3 & Solidity – good open-source projects, fantastic engineers. 
      5. What I do day-to-day: development of Truffle. 
   1. Nick: 
      1. Disparity between engineers using the tools & engineers using them. 
      2. The demand for mature projects has stepped up 
      3. These tools, Truffle included, are struggling to handle mature projects, mature teams, mature practices. It’s great when people are building proofs of concept though. 
      4. The requirements are coming in pretty fast 
      5. What I do day-to-day: Truffle debugger development of Truffle"
74,74 Truffle - Nick D’andrea & Christopher Gewecke.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. It’s downstream on Etheruem and Web 3js upstream from developers 
      1. Needs to act reactively with what comes down the pipe from web3 
      2. Needs to act proactively to help developers 
   1. Solidity develops faster than we can go through their process & do their QA. 
      1. Need to bump the version –– but solidity sometimes introduces breaking changes –– 4.11, 4.12 – e.g. visibility modifiers but hasn’t happened in a while. 
      2. A range of projects: sophisticated projects (Aragon) but also people who don’t know how to use npm. 
      3. We’ve been conservative about how we upgrade 
      4. We’re making solidity stricter and stricter but we don’t know what kind of crazy stuff people have written. 
      5. Solution: try to make the tool configurable based on plugins users can make it into their own thing. 
         1. Making the compiler configurable."
74,74 Truffle - Nick D’andrea & Christopher Gewecke.txt,"4/2/2018 - Andy, Sina, Robbie ","4/2/2018 - Andy, Sina, Robbie "
74,74 Truffle - Nick D’andrea & Christopher Gewecke.txt,Truffle Team,Truffle Team
21,21 Ethereum Foundation - Alex Beregszazzi & Pawel Bylica.txt,," 
 
 
   2. Axic: Review process 
   1. On Solidity – we’ve grown 200% 
   2. Some people are remote a lot are part-time 
   3. There’s a lot of onboarding 
   4. Because of onboarding – not everyone’s review is equal, takes some people with experience and insight.  
   5. It’s very easy to block people 
   6. Github Projects kinda helped this process: 
   1. Organize features into versions. 
   2. They had a label for breaking changes 
   1. Should be clear from the PR list. 
   2. Backlog is really large and growing. There’s too much that we don’t have enough time to get setup project management process. 
   3. For every PR, someone has to learn all the subsystems that are involved. Solidity is a big codebase. 
   1. It’s a complicated codebase needs refactoring 
   1. Three ways of generating bytecode from AST: 
   1. Way 1: cpp stream of instructions, values, and comments 
   2. Way 2: append inline assembly 
   3. Way 3: compile Julia into bytecode 
   4. Our focus is moving to Julia, and using that to generate bytecode. 
   1. We’ve planned a full rewrite of the “code generator” subsection. 
   1. But they found a way to do it without a full rewrite. 
   1. Julia: 
   1. Has an internal AST, a parser, a syntax for the parser. 
   2. Backends: which generate bytecode from the AST->EVM, EVM15, eWASM. 
   3. Transformation steps: things that happen on the AST could be built independently. 
   1. These exist for EVM and EVM15. 
   2. Building these for eWASM could be a task. 
   1. But they’re good on-boarding work for new contributors. 
   1. The external static analyzer: 
   1. Written in Javascript. 
   2. Currently part of Remix. 
   3. Try to use a number of options that the compiler gives you. 
   1. There’s no option to turn off warnings. 
   1. Therefore: anything there is a warning, you should fix it. 
   1. Delegating warning generation for things that are conventions to this external static analyzer. 
   2. Two major things to be done for bounties re the static analyzer: 
   1. Bounty #1) Separate it from Remix, and make it independent. 
   2. Bounty #2) It uses the old AST format, that the compiler used to generate. 
   1. In other words: the compiler parses, creates an AST (which is a big JSON object), which is then passed to the static analyzer 
   2. The new AST JSON is much more compact –– but means that the static analyzer should be written. 
   3. This could be more iterative. 
   1. Mist has this notion that it has Solidity compilation built-in. 
   1. Considers “warnings” and “errors” the same –– so throws. 
   2. The homepage has 1) old Solidity examples (which has errors), 2) recommends Mist (which throws errors for warnings). 
 
      1. Pawel: 
      2. Making cpp-ethereum more modular. 
      1. Started removing some parts, and moving it to different repos. 
      2. Two things: 
      1. A Proxy for JSON RPC. 
      1. Maybe should write the Proxy in Go. 
      2. What it is: 
      1. Previously, we had 1) an HTTP server to handle the requests, and 2) some Unix sockets to handle other incoming requests. 
      2. The HTTP server is replaced by a simple Python script. Replaced the HTTP requests with a Unix socket requests, so same underlying system can be used. 
      3. There’s no reason for implementing all the transport layers in each client. 
      1. This Python script only exists in cpp-ethereum, but should be included in other clients. 
      2. Only complaint about Python: it’s hard to ship an executable object of code. 
      1. A proxy for the p2p network stack 
      1. Same as above, but for the networking layer. 
      2. E.g. devp2p or libp2p protocols. 
      3. Your application protocol (e.g. Ethereum or Swarm) connects to a new p2p layer. 
      4. We should instead use the same p2p layer. 
      5. Problem: duplicated effort of implementing the same things. 
      6. Need a nice interface for inter-process communication. 
      1. Can combine different parts of the stack in different languages. 
      1. EVM-C: C interface for EVM. 
      1. Should stay under Pawel’s control. 
      2. Potential bounties: create EVM-C bindings for different languages. 
      1. E.g. Python, Go. 
      1. Could be useful to have a fast EVM implementation 
      2. Same idea for eWASM: 
      1. Use the same interface within go-ethereum to hook in eWASM. 
      1. Other bounties? 
      1. Research for opcode gas costs"
21,21 Ethereum Foundation - Alex Beregszazzi & Pawel Bylica.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Communication is bad within EF and within ecosystem in general 
   2. People aren’t aware of existing products / solutions 
   3. Duplicate effort solving the same problems 
   4. Not everyone agrees on the same communication channels – 
      1. People use different tools 
      2. Seems to be fixed now with Gitter. 
   1. Lack of resources 
      1. People jumping across projects 
   1. Workflow on EVM / eWASM – problems (below):"
21,21 Ethereum Foundation - Alex Beregszazzi & Pawel Bylica.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Pawel - focused on VM in general, spent a lot of time designing / optimizing the EVM for the future. 
      1. Experimenting with new ways to make the VM faster for future upgrades 
         1. Classic code optimization - added some small features to EVM (like Revert / Return Data Buffer / Shift Operators) 
      1. Works mostly with Alex -- changes in Byzantium were with Christian 
      2. Joined 2-3 months ago  
      3. Maintained C++ code base for Ethereum client -- experience with EVM 
   1. Alex  
      1. Started with building dApps, contracts, UIs – everything was broken in 2015. 
      2. Then jumped into proposing things and fixing things 
         1. Solidity 
            1. Testing 
         1. Javascript 
            1. Led to working on testrpc & ganache-core 
            2. Worked on Trezor, and build a dApp for it. 
      1. Ended up with all these other issues: cpp-ethereum testrpc RPC methods. 
         1. Tried to raise issues, and sometimes they end up in improvements. 
      1. Spends most of his time in Solidity design. 
      2. eWASM – started 3 years ago for 6 months – then took a big break – then now working on it for 3-4 months (really started in Jan)."
21,21 Ethereum Foundation - Alex Beregszazzi & Pawel Bylica.txt,3/14/2018,3/14/2018
21,21 Ethereum Foundation - Alex Beregszazzi & Pawel Bylica.txt,Alex Beregszazzi & Pawel Bylica,Alex Beregszazzi & Pawel Bylica
32,32 Gnosis - Stefan George.txt,," 
"
32,32 Gnosis - Stefan George.txt,05/06/2018 - Andy Tudhope,05/06/2018 - Andy Tudhope
32,32 Gnosis - Stefan George.txt,1. Other bounties?,"1. Other bounties? 
   1. Bounties are great for small problems, but we need to hire people full time to actually work on this stuff constantly and fix the long term incentives!! 
   2. Just waiting for the Ethereum Query Language ) :p"
32,32 Gnosis - Stefan George.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. What does the Gnosis stack look like? 
   2. Contracts written in solidity 
      1. Many pitfalls, especially for newcomers - need to read documentation 10 times and then sometimes you still don’t get it.  
      2. For e.g. the low-level stuff like .call() is implemented differently from what you might expect that caused funds to get stuck in multisig contracts. 
      3. The concept of gas is not that easy to understand and is not transparent. 
         1. If you use .send() you use minimum amount of gas versus .call() using all the gas. 
         2. Verification of code and garbage handling is not well documented - verifying down in the byte code is very difficult. 
         3. Particular problem for symbolic execution and all the additional checks that solidity is doing. Not well optimized at all. 
         4. If you access a storage variable twice, you will always have to pay twice, rather than optimizing to keep it in memory - very annoying in the end. Means you have to do a lot of gas optimisations yourself which really should be automatic. 
         5. These kind of issues require domain expertise - why don’t we all put up a $1 million bounty for a new smart contract language/compiler.[a] 
         6. Might be interesting to keep it lower level, something similar to Vyper with the much simpler bytecode and cheaper execution, better verification etc. We cannot have only one smart contract language. 
   1. Using truffle framework because it is most used framework and want their codebase to be as approachable as possible. 
      1. Debugging is an absolute pain in the ass - even truffle’s debugger is not great. No easy breakpoints, difficult to step through easily, or change variable to run different kinds of tests. 
      2. Would be better to statically typed testing environment - only test framework in JS (python one is not maintained). We need another framework that can go deeper and be more precise. 
      3. Web3 itself really sucks.  
      4. API versioning for ethereum json-rpc stuff. No versioning, no documentation, no proper error codes. Plenty of useful calls that are missing, plenty of calls that exist that no-one uses and it’s just chaos in general. We have to assume what version is running on the user end, so have to assume they are running all kind of different versions. 
         1. Everyone using MetaMask and Infura makes this slightly more hidden. 
         2. I proposed a new json rpc call but geth ahd already implemented it, but it was documented nowhere and Parity hadn’t really thought of doing it at the time, so there is no clear way of defining what the standard is.  
            1. Was about allowing users to sign offline transactions in a specific way: ask the client to sign and return the tx data that can be then used from an offline location. 
      1. We need a test suite against the json-rpc API: just to test that Geth and Parity are actually behaving in the same way. 
   1. Using Remix IDE - then go to local text editors for further dev once they are sure the contracts run well. 
      1. Would be amazing to have a properly integrated environment. Uses Atom with solidity linter. Would be great to be able to do proper debugging in that environment as well. Things work now because complexity is relatively small - but as soon as you want to integrate between projects it becomes a total mess. 
      2. Gas metering and fuzz testing in addition to break points, stepping through, and changing variables easily. 
   1. Use Mythril to check smart contract security, executions and test coverage. Aim for 100% code coverage and use solc code coverage. 
      1. Would love a tool with some basic checks (like overflows etc), but needs to be extended to do optimisations for gas efficiency, standard way to apply smart contract best practices automatically. 
      2. Map test coverage to code execution paths so that you can easily see which cases to write tests for. Something better than code coverage which only shows where you touch the line so that we can cover the most important scenarios (i.e. where things are failing)."
32,32 Gnosis - Stefan George.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Secondary indexing of blockchain data!! 
      1. Only json-rpc calls to retrieve prediction market data would make it impossible for users to see what markets they hold tokens on. 
      2. Expose state changes between blocks in an easy to consume fashion. Right now you apply txes, but you don’t know what effect on the state is immediately. You have to assume that you know, or listen to events. 
      3. But events shouldn’t even be there as they are just replication of info that is already there on the chain - just make that info more accessible and easy to read and use!! 
      4. State changes between blocks, sort of like a github diff that you can take and use to index in a secondary indexer - that would be really helpful. 
      5. Writing their own indexer specifically for prediction markets. So is Aragon, and even Augur is now doing it. 
   1. More client developers - too few people working down there in the protocols. Set incentives for improving the stuff - which is why ETHPrize is so important."
32,32 Gnosis - Stefan George.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. CTO of Gnosis and is building a prediction market, ddex and smart contract wallets. 
   2. Started in 2013 - discovered that we could add prediction markets using btc escrow because that was missing (a p2p marketplace for predictions). 
   3. Joe Lubin convinced us in 2015 to start a formal platform based on Ethereum, did the token launch and spun out of Consensus and begin working on the more fundamental problems 
   4. Decentralized exchanges!! But not efficient on Ethereum today (scalability and number of participants). We have had to contribute to building the DDEX infrastructure. 
      1. Prediction markets are a way to create new ERC20 tokens (conditional payment/purchase). The value of those tokens is only defined at a certain point in the future. We can therefore create derivatives of other ERC20 tokens, which are more precise investments under certain conditions. 
         1. DDEX allows people to trade the efficiently. It can be done in Ethereum on chain, but scalability, front-running and ease of use just isn’t there yet (need everyone participating and having a global liquidity pool). 
      1. Dutch exchange implemented on chain to solve front running problems. 
         1. Integrating with USD price feed of Maker - was a little hard to depend on other people’s infrastructure and therefore the tests that they have deployed. We ended up mocking their service for test net, would have been awesome to just point at their package, specify a contract on either network and go without having to mock any of the other services. 
      1. Make sure that things like ETHPM are deployed across all test networks. 
   1. Also built the multisig wallet for our own token launch, has been very successful and we now want to offer the same experience for every user: more secure wallets for personal use that are even better than hardware wallets."
32,32 Gnosis - Stefan George.txt,Stefan George,Stefan George
32,32 Gnosis - Stefan George.txt,[a]Interesting point about problems with Solidity,[a]Interesting point about problems with Solidity
68,68 SlockIt - Simon Jentzsch.txt,," 
"
68,68 SlockIt - Simon Jentzsch.txt,"04/20/2018 Parker, Andy","04/20/2018 Parker, Andy"
68,68 SlockIt - Simon Jentzsch.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. IOT security challenges? 
   2. Use blockchain to enhance security by using smart contracts for access-control 
      1. Devices are dumb, smart contracts grant access 
      2. Downside if how to get a stable connection which is secure and able to run on low hardware specs 
      3. Clients that are able to run on small IOT devices is a big challenge.  
   1. We’re developing light client IOT device, Incubed - not just light client but IoT client for microprocessors etc. Can do verification without even syncing with headers. 
      1. Devices that need to sync just a few times a day, in unstable WIFI env. 
      2. Network of full clients running on servers. Incube randomly choose nodes out of the networks. Send JSON RPC request, answered with signed block hash/header. 
      3. If you send wrong block hash, then they lose their deposit. 
   1. How do you store a private key on IOT device?  
      1. IOT device pvt keys generated from unique aspects of that specific hardware so that each device can easily generate its own key without transporting it anywhere 
      2. Paying for gas from each device is a big challenge. 
   1. Trying to integrate with uPort and others for app key management"
68,68 SlockIt - Simon Jentzsch.txt,1. What are the best educational resources?,"1. What are the best educational resources? 
   1. Having people around, trying new things, debugging existing ones. Most important is talking to and working with people who know more than you do - there is no substitute for that it seems."
68,68 SlockIt - Simon Jentzsch.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Start with Truffle - mainly for testing and setting up environment 
      1. Doesn’t produce/support typescript 
   1. Extended version we produced and use for 
      1. Typesafe contracts based on solidity contracts 
      2. Throws errors on incorrect smart contract types  
   1. Usually write tests with Travis CI, for all three browsers (GETH, TestRPC, Parity) 
   2. Use Remix for debugging 
      1. Wish we had a more stable and easier to use debugger!! 
   1. Test RPC vs Ganache 
      1. Many tiny differences (output syntax, JSON RPC error messages, etc.)  between clients makes testing very hard between clients 
   1. RPC Specs need to be tightened up so that we can communicate with them from whichever framework, write tests easily and actually understand the error messages that come back. 
   2. Not specific enough, too much room for divergence 
   3. Web3 library is trying to limit this"
68,68 SlockIt - Simon Jentzsch.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. IDE integration 
      1. There are tools and plugins for different IDES. Being able to use Solidity just like any other language would be really nice 
         1. Do just the basic stuff right. 
      1. Checkers/linters exist but they’re all over the place. Integrated into IDE, not via CLI, would be helpful. 
         1. Package manager for existing libraries needed that could manage packages and bundle them in a secure way 
         2. Manage standards better 
         3. Not just syntax highlighting, but code-assist/completion and deep syntactical and structural understanding. 
   1. Web3 Libraries 
      1. Latest updates broke all our tests, so reverted to fixed versions"
68,68 SlockIt - Simon Jentzsch.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. Scalability is long-hoped for and looked forward to ) 
      1. Mainnet as main authority,. For different devices, different chains. 
      2. Current work around could be  to use bridges (parity) 
      3. Micropayment, multiply party, state channel Solutions like Raiden up and coming, but not ready yet 
   1. Contracts that pay only for your devices from a certain account 
   2. They currently use libraries and packages to avoid security issues"
68,68 SlockIt - Simon Jentzsch.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. CTO of SlockIt. 
      1. Daily standups like any other startup, making sure all our tools work correctly 
      2. Part of day consists of update on new tools, libraries and their respective stability. Assessing trade-offs is difficult and time-consuming work. 
   1. Consulting work, experience with real customers 
      1. Connecting IOT devices to the blockchain 
         1. Energy Web foundation, smart meters 
         2. Smart contracts for data incoming from IOT 
         3. Determine what  type of hardware they should use 
   1. Building universal sharing network (USN) in-house.  
      1. Connect IOT devices, access control, rental and sharing settings 
      2. Launched MVP on Testnet and inviting beta users. Planning on deploying to Mainnet. 
         1. Public repo containing architecture and contracts 
         2. All smart contracts will be publicly available after security audit 
      1. Use Kovan since its compatible with most clients. Also on Rinkeby. 
      2. Using Parity for tests, but interoperability between clients is lacking badly. 
   1. Gives and recieves audit 
      1. First, internal security audit 
      2. Then, number of experts from different teams."
68,68 SlockIt - Simon Jentzsch.txt,Simon Jentzsch,Simon Jentzsch
52,52 Mycrypto.com - Taylor Monahan.txt,," 
"
52,52 Mycrypto.com - Taylor Monahan.txt,1. Other bounties?,"1. Other bounties? 
   1. Money is not their constraining resource. People, hiring, management are constraining. 
   2. Best thing for ecosystem right now is: educational, marketing, videos, tutorials, write-ups, explaining how things work. 
      1. E.g. when your mother hears about an ICO, and they google it, there’s good resources available to educate them. 
      2. In the beginning, MEW was a stepping stone for people who already owned cryptocurrencies, before they started using geth or parity or etc. 
         1. Now, this is no longer the case, there’s new people who don’t know anything about cryptocurrencies at all.. 
      1. Biggest phishing attacks they’re seeing are airdrop sites. “Free money??” Typing your private key is not a good idea. 
      2. How does a project responsible onboard people onto Ethereum? 
         1. How does the experience look as dApps become more of a thing? How do people use this? 
            1. In a dApp, the wallet functionality should be completely abstracted away. The user shouldn’t even know that there is a wallet. 
   1. If I had extra money, I would give 100% of it to educational resources, people designing infographics, videos, etc."
52,52 Mycrypto.com - Taylor Monahan.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. Silo’s – Slack silos aren’t healthy. 
      1. Mentioned “community of communities”  
      2. Skype – “exchange work-group” – public infrastructure and the nodes – w/ the geth team and the nodes. 
      3. Skype – “anti-phishing group” – setup on a whim when they saw phishing stuff come about. 
         1. 3 days ago – Ethereum blue team found MyEtherWallet clone 
         2. Even if she’s sleeping – people are looking out for the community 
   1. Did team retreat in Columbia / met with design firm in Chicago / they have partners in SF (week / month regularly) 
   2. Harry Denley was the first to respond to Swarm.city multisig hack. 
   3. Was reactionary – putting out fires. 
   4. PROBLEMS: Security 
      1. Internal security processes. 
      2. At two people you can trust each other access is limited. At team of 20 it’s different have to revamp internal policies reminding people of things. 
         1. Found 2 Slack admins not have 2fa on. 
      1. We are bigger target we get password resets.  
         1. Someone stole her number in October but they were prepared for it. They handled everything really well. 
      1. DNS and internal security on infrastructure. 
         1. Hired ex-director of security for Coinbase & Facebook. Works on board of Hackerrank. 
         2. How we hired: people who use MEW want to keep Ethereum & MEW safe. We connected on security. We had a call that afternoon. 
         3. He does amazing security incident response & red-teaming. 
      1. FEW DIFFERENT SECURITY CONCERNS: 
         1. How we serve their code: a commit is pushed to a specific branch that is served to github.io then AWS pulls that code, caches the hell out of it, and that serves MEW.com. 
            1. All keys are rotated, and ssh private keys are kept very secret. 
            2. multi-stage pipeline (Github + AWS) both have multi-factor security, need Ubikey, etc. 
            3. It’s kind of a staging pipeline. 
            4. Prevents bad commits or bad UI changes from getting into the website. 
            5. How do you QA things, how do you test things?  
               1. We wait 24 hours from creating a release and getting it on a live domain. 
            1. We have a series of tests – check that everything compiled correctly, check that all links have a rel=no-opener on them, .. 
         1. DNS 
            1. After EtherDelta and ClassicEtherWallet. 
            2. We have a custom thing: three services to monitor the site. 
            3. We serve through a CDN 
               1. Diff the code – diffs the new website with the previous version of them. 
               2. Gets the hash of the Javascript and CSS with previous versions. 
         1. Blockchain security 
            1. Ensuring the user makes good decisions –– how do you alert or notify a user when is doing something wrong –– e.g. notifies you when an Ethereum address is not formatted correctly? 
               1. How do you build this: check the balance?  
               2. Have microservices that have micro-databases of the blockchain. 
                  1. Caching token balances. 
                  2. On MEW: pulls everything from Parity or Geth directly. 
            1. Can run their infra through Cloud Formation ––  
               1. Geth falls out of sync. 
               2. CryptoKitties destroyed their infrastructure. 
                  1. Intel chip thing then took them 120% CPU usage, took them offline. 
                     1. Fixes for Spectre and Meltdown. 
   1. PROBLEM: phishing & supporting after the fact. 
   2. PROBLEM: infrastructure: 
      1. Keeping nodes Parity & Geth up all the time. 
         1. Additional issue: Blockchain naturally re-writes itself if you’re on a microfork. If you’re also distributing this across your own database, then you need to write code to also rewrite this. Etherscan just gave up and booted up from the blockchain from scratch. 
            1. This is what Infura is trying to do. They are in the same situation as MEW and Etherscan. They are under Consensys so have more financial freedom. 
            2. Shapeshift sysadmin stole money. If they had the problem, then this is a big problem. 
            3. What is the cost of security in this space? How much a malicious people could stand to gain… 
               1. With a debit card, it’s not the same –– there is risk of getting caught, the original person gets the money back etc. 
               2. Traditional security systems won’t work for this. 
               3. When I worked at AT&T, I asked people how they trained people to not steal simcard numbers. The real cost is not cost of buying a phone. 
   1. UNEXPECTED PROBLEM: building remote team culture 
      1. I work well remotely but building culture while remote is really important. 
      2. In-person hangouts – all devs will be at EthDenver. 
      3. Make them talk about personal stuff on calls. 
      4. Big question is to: how to make remote team work. 
      5. Danielle leads the dev team. 
         1. Over the summer, they did a hire fast fire fast mentality. Sink or swim type of game. People need to be able to orient themselves. 
         2. People in the beginning need to be able to make sense of the chaos. 
         3. Random people contributing on Slack or Github. 
         4. For support, hire top Reddit commenters. 
         5. Give people 30 days and see how it goes. 
   1. Ethereum Blue: anonymous team, with a token. Promoted themselves as Metamask Blue. Scam. 
   2. Teams that are dealing with public crypto token world: 
      1. Swarmcity. Super resilient team. First fight against Arcadecity. Then theyy got their funds stolen out of their multisig. 
      2. 0x. Did an amazing job about education around ICO. Each blog post had a full section on how to protect yourself + custom tools. 
      3. Griff 
         1. Griff + Hudson Jameson from EF are the people to call. They know everyone and who to get involved. Like a connective tissue. Response to Parity hack. 
            1. Griff had learned a lot from the DAO hack. 
            2. Hudson was at Cornell with entire EF security – just happened to all be in the same room."
52,52 Mycrypto.com - Taylor Monahan.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Chaos. 2017 in one word. 
   2. Started off as a fun side project –– cofounder is Kosla – they were both working part-time. 
   3. Then it exploded –– the Ethereum price chart is a perfect representation of MEW growth. Kosla stopped being involved after it got chaotic, because it was no longer just a fun side project. 
      1. Ecosystem started going crazy –– she started leaning in. 
      2. Team growth – hired 2 devs in April/May. Hired Jordan in June. Hired a person / week in the summer. Hiring a ton of support people. Got a director of security. Trying to hire Harry in full-time. Team of ~ 20. 
      3. Growing a remote crypto team. How to incentivize them & keep them happy. Raises don’t work in this space."
52,52 Mycrypto.com - Taylor Monahan.txt,1/13/2018 - Sina & Robbie.,1/13/2018 - Sina & Robbie.
52,52 Mycrypto.com - Taylor Monahan.txt,Taylor Monahan,Taylor Monahan
71,71 Status - Ricardo Guillerme Schmidt.txt,," 
"
71,71 Status - Ricardo Guillerme Schmidt.txt,1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. No major process. “This function should do one thing. Only that. If it can be used to do anything else, that’s a problem.” 
   2. I saw that the Parity library didn’t have the owner set. But I think other developers should write the code so that this is impossible."
71,71 Status - Ricardo Guillerme Schmidt.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Automated testing? 
   2. First develop the smart contract.  
   3. Manual test with Remix is the first step.  
   4. Ethercamp IDE was really good, but now it’s too old.  
   5. The new tool for Eclipse might be good but it’s only on Windows.  
   6. When it looks like it’s working, write some truffle javascript unit tests.  
   7. Usually spotting bugs happens in manual tests and truffle unit tests are just for making sure it’s good.  
   8. Remix debugger is very useful, but it’s missing some features."
71,71 Status - Ricardo Guillerme Schmidt.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Microsoft VS code, Git, Remix for manual tests, Truffle, Parity.chain for testing, Mist & Parity on Ropsten for development 
   2. I gave up on Ganache - too much variability between that and live environments. 
   3. If not already mentioned, are there any libraries you rely on regularly? 
      1. Not really, mostly backend."
71,71 Status - Ricardo Guillerme Schmidt.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. Excited about Golem. I really want to use it because I have a powerful GPU at home that is not mining. I want to do something useful, not just use my GPU for mining. 
   2. Love Ethereum for proof of stake, that was my main interest in it at the beginning."
71,71 Status - Ricardo Guillerme Schmidt.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Being unable to returns strings nicely. Regularly blocks me.  
   2. My project GitPivot connects git to the blockchain and generates tokens for commits. Needs to store git usernames, but can’t. So instead has to store a hash.  
   3. But that means he has to ask the user for their username each time so he can check the hash, which is a bad user experience. 
   4. Scaling!! Scaling is actually the biggest problem. If Ethereum nodes can’t handle the state it will all become useless. 
   5. Are you running into problems with any of the following: 
      1. Gas limit:  
         1. Yes. Not for deploying, but when users are adding to big arrays it can get complicated.  
      1. Off-chain computation 
         1. Yes, same problem with arrays, with on-chain computation. Sokrates? Not sure if zkSnarks will be able to solve this. 
      1. State Channels 
         1. Haven’t used them before."
71,71 Status - Ricardo Guillerme Schmidt.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. Would be very good if VScode had the same thing that remix had - i.e. an actually Integrated IDE.  
   2. Would use only remix, but it’s horrible to use with multiple folders and things like that. Remix is only good at small projects but wants it for big projects. Connecting with RemixD can often mess up all your files. 
   3. Solidity can’t return arrays or variable length values. Knows there is some solution with assembly but it’s too ugly."
71,71 Status - Ricardo Guillerme Schmidt.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. Not sure, not actually difficult. If you understand decentralization, it’s easy. If you don’t, then there’s no reason to try it. 
   2. Immutability makes you more cautious when going to production. 
   3. What would be the hardest part of teaching somebody to build a dapp? 
      1. Depends on the user. If the user is good in JS, it would be understand the fundamentals of the smart contracts. 
      2. Explaining fees & immutability. 
      3. Biggest problem is they don’t see the whole picture, just get 1 part of blockchain technology."
71,71 Status - Ricardo Guillerme Schmidt.txt,1. Who are the other people you think we should talk to?,"1. Who are the other people you think we should talk to? 
   1. Jordi Baylina, James from Status, Luis Cuende from Aragon."
71,71 Status - Ricardo Guillerme Schmidt.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Development of smart contracts for Status.  
   2. Can also do some web3 integration with javascript, but I have not really dug deeply into that.  
   3. I want to work on DAO’s that have delegation proxies so that you can trust an expert to vote for you.  
      1. Oraclize but too expensive.  
      2. TrueBit but not available.  
      3. Zokrates or some other solution also a possibility."
71,71 Status - Ricardo Guillerme Schmidt.txt,Ricardo Guillerme Schmidt,Ricardo Guillerme Schmidt
47,47 Matthew Di Ferrante.txt,," 
"
47,47 Matthew Di Ferrante.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. How long does it take to setup dev environment & tests. 
      1. On my own computer: I don’t use ‘npm install global’ or ‘npm’ at all –– I’ve created my own vagrant script, which specifies where I install stuff. 
      2. It takes a long time – 1, 2 hours – to update part of the environment. 
      3. It’s a huge barrier to entry 
      4. Also, a huge barrier to experimentation. 
      5. Making something where you can from idea to execution, would be great. 
      6. Remix doesn’t work for complex interactions, or with something that’s already onchain. 
   1. Things get truncated in Javascript. 
   2. I wrote my own Python stuff – for handling bignum calculations and submitting to the contract. 
   3. We need better support for interaction with contracts that have non-trivial inputs: 
      1. E.g. if you need to some pre-processing. 
   1. Common patterns across projects I’m auditing: 
      1. There’s limitations to the Solidity compiler – simple fixes could help the rest of the ecosystem make less mistakes: 
         1. E.g. imports:  
            1. If you import an interface, then you have to link to a contract onchain. Or you can directly import a contract. 
            2. Having a pre-approved list of contracts –– there’s no reason to be redeploying things on the chain. 
            3. Ethpm does this – but worth adding support for this in the compiler itself? 
      1. People roll their own complex math: 
         1. Because Solidity doesn’t have floating point, people come up with binomial approximations etc. 
   1. Talk through a complex audit and how the process works: 
      1. First: site-read the code. 
         1. Notice small details: e.g. there’s an unbounded loop here. 
      1. Setup the environment 
      2. Actually execute the code. 
      3. Step through the code with a debugger: 
         1. I use EVMLab – shows opcode per line with the state. 
      1. Notes: 
         1. I have a lot of hack-ish tools I’ve built himself. Would be nice to standardize these. 
         2. For audits: I don’t look at the offchain stuff. 
   1. How do I get testnet eth? 
      1. On Ropsten: I have a server. 
      2. Some clients have their own testnets I forward through their machines 
      3. If I need a lot of testnet eth (eg. testing a reverse dutch auction): I might spin up my own dev net. 
   1. Moar? 
      1. Having a setup tool, like truffle init, which initializes keystore and an initial chain state where each of those addresses have a balance 
         1. You’d run this after ‘npm install’, ‘truffle init’ in your workflow 
         2. Going from ‘truffle init’ to a working ethereum setup takes too long"
47,47 Matthew Di Ferrante.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Audits  
      1. Some clients have their own testnets. Or some chain state that needs to be initialized before you can run the code. 
   1. Smart contract dev – 
      1. Decentralized exchange project –  
         1. Testing that is hard. You need to deploy on chain there’s a vault, ownership, hierarchy. How does the moving average work? You gotta run a 1000 trades and they have to be from the same account, etc etc 
         2. I wish these tools had a dev mode – where you can deterministically generate accounts 
            1. Geth & Truffle & etc should have a 1000 accounts that always show up as the first 1000 accounts. 
            2. E.g. for testing signatures. 
            3. There should be a templated test environment that you can use across environments, installations, etc. 
               1. I find himself editing this a lot. 
         1. People often give me tests which have addresses hard-coded in. I then  have to set it up again. 
         2. Consistency: 
            1. Getting projects to sync up or a tool to initialize the setup for different projects. 
            2. Can use ganache or testrpc upto a certain point, but then, it doesn’t scale. 
            3. Something that takes one second to run in geth, takes 20-30s on ganache. 
         1. A tool that seeds the addresses, accounts – environment imaging."
47,47 Matthew Di Ferrante.txt,3/26/2018,3/26/2018
47,47 Matthew Di Ferrante.txt,Matthew Di Ferrante‏,Matthew Di Ferrante‏
73,73 Truebit - Sina Habibian.txt,," 
"
73,73 Truebit - Sina Habibian.txt,1. Are there any other questions we should be asking?,"1. Are there any other questions we should be asking? 
   1. Dan Finlay"
73,73 Truebit - Sina Habibian.txt,1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. A bunch of upfront discussions and security analysis. 
   2. Then writing tests. 
   3. Security audit, bug bounties 
   4. Then, we will run a beta on the mainnet"
73,73 Truebit - Sina Habibian.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Truffle and Javascript unit tests 
   2. First person to build the contract didn’t use truffle, so built his own complete testing system. 
      1. Built own testsuite because truffle wasn’t configurable enough for my needs: it was running into issues as the complexity of the smart contracts grow 
   1. Deploy things to testnet. Though it’s true that there is a limited amount of benefit from deploying to testnet. It that doesn’t really test stuff like vulnerable attack vectors or incentive misalignments 
      1. Better to do real testing on the mainnet under a public Beta, using real ETH"
73,73 Truebit - Sina Habibian.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Vim with solidity syntax highlighter, truffle and travis for tests 
      1. Running into problems with truffle on the current project 
   1. Zeppelin’s libraries for safe math and tokens. Using some JS state machine libraries for the client."
73,73 Truebit - Sina Habibian.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. TrueBit because it gives you the ability to run any piece of code and get the result back no matter how long it takes 
   2. ArtDAO 
      1. Smart contracts are self owning but don’t have any intelligence. 
      2. AI’s are evolving and learning, but they don’t have any resources. 
      3. AI creates 5 pieces of art and puts them up for auction. Sees the prices. 
         1. Keeps making better and better art, and the goal is to maximize how much money it has"
73,73 Truebit - Sina Habibian.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Super slow cycle due to testing. 
   2. Are you running into problems with any of the following: 
      1. Gas limit: Yes, for local testing enforcing gas limit. 
      2. Off-chain computation: Yeah."
73,73 Truebit - Sina Habibian.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. Testing is so important in this space, but testing is so painful and so slow. 
   2. No good debugger!! 
   3. Slow testing and debugging slow down your whole cycle."
73,73 Truebit - Sina Habibian.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. Wrapping my head around potential attacks and edge cases in smart contracts. 
   2. What would be the hardest part of teaching a software engineer to build a dapp? 
      1. Incentives and economics angle is the hardest part to teach people, but likely the most important."
73,73 Truebit - Sina Habibian.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. I started in January or February of this year, and used a tutorial on Medium for creating a voting system. 
   2. Interesting because the tutorial was already out of date by that point. 
   3. Working on TrueBit. A few smart contracts: 
      1. TrueBit core incentive layer: tasks workers who do computation off-chain 
      2. Web-assembly interpreter in solidity 
      3. Building a bridge between dogecoin and Ethereum 
   1. Haven’t really started on any front-end stuff for these things. 
   2. Interactive Coin Offering protocol that TrueBit did"
73,73 Truebit - Sina Habibian.txt,Sina Habibian,Sina Habibian
13,"13 CryptoKitties - Fabiano, Jordan, Nick.txt",," 
"
13,"13 CryptoKitties - Fabiano, Jordan, Nick.txt",1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. Audit code: bounty hunt program, found one major one via community. Ran our own repo specifically for this on Github. 
   2. Community auditing through bounty programs. "
13,"13 CryptoKitties - Fabiano, Jordan, Nick.txt",1. How do you handle testing?,"1. How do you handle testing? 
   1. Standard testing and using community to audit contracts"
13,"13 CryptoKitties - Fabiano, Jordan, Nick.txt",1. Other domain specific questions?,"1. Other domain specific questions? 
   1. Have you written any open source tools for scaling?  
   2. Looked into side chains and micropayments.  
      1. Side chains as implemented in something like Raiden don’t allow people to build off what they build. On side chains kitty hats would not be possible. 
      2. Cryptokitties run son chain. Sidechains aren’t the option, but Plasma is really interesting to us. 
   1. Are you writing your own Plasma stuff?  
      1. We’re looking for options that allow them to scale.  
      2. Plasma seems possible in theory.  
      3. We chose Ethereum in the first place because infrastructure is good, Metamask, Infura, etc."
13,"13 CryptoKitties - Fabiano, Jordan, Nick.txt",1. What are the best educational resources?,"1. What are the best educational resources? 
   1. Solidity documentation was quite good. Had all the jumping off points.  
   2. Random mishmash of articles and whatnot :)"
13,"13 CryptoKitties - Fabiano, Jordan, Nick.txt",1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Been a while since we have done smart contract development, haven’t done any since we deployed. Truffle framework, TestRPC (now Ganache). The standards at the time."
13,"13 CryptoKitties - Fabiano, Jordan, Nick.txt",1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. The thing we are excited about most in the next 3-6 months is whatever ends up being the scaling solution"
13,"13 CryptoKitties - Fabiano, Jordan, Nick.txt",1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. The lack of proper debugging support. That caused us to lose so much time. Even more than the slow compiles.  
   2. Biggest pain points:  
      1. When we were using Solidity, some safety features were added later, especially visibility modifiers on functions.  
      2. The compiler is very slow. Recompiling took ~30 seconds slow. T 
      3. ests were slow as well.  
      4. No easy way to debug. 
   1. Debugging tool for Solidity, what would it look like?  
      1. Write “debugger” and it stops there.  
      2. Breakpoints, step through code.  
      3. Quite difficult to log something through a function. It would revert if it failed, even logging was failing. If a require failed it would be tough to find error. 
   1. Planning on working on contracts soon? Or moving on?  
      1. Have plans for a MetaData extensions, push kitty images to IPFS, and have kitty image as a piece of metadata for the cat. That’s the big one.  
   1. Front-end:  
      1. web3 is the only library required. The web3 works as any wallet solution has the implementation web3.  
      2. Web3 1.0 beta, 0.26. On webapp they are on web3 1.0 beta, seems stable for the browser.  
      3. Read and write functions for the contract, nothing crazy.  
      4. The problem with web3 0.2: docs are not great at all."
13,"13 CryptoKitties - Fabiano, Jordan, Nick.txt",1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. 2 main areas with significant problems:  
      1. Data analytics and reconciliation btw on-chain and off-chain data.  
      2. Our first MVP didn’t have a back-end at all but we had to develop a back-end as we scaled. Reconciling these quickly and correctly is key. 
   1. Analytics is difficult. Web3 and Geth, have to hook into data. But there are too many hurdles to jump to get these.  
      1. In particular, the biggest problem is when we want to deal with analytics where some of the data is implicit, like a series of transactions. One tx doesnt give enough data. When someone bids on a sale option in cryptokitties, bidder, price, and catId. Have those 3 pieces of information. But when you ask how many cats has this person sold? This info is implicit in a wider set of tx’s, all of which you have to fetch and then compare..  
   1. Part of this is not them including this info in advance. A common problem in the ecosystem is that once you deploy something you need more info after deploying a smart contract and it’s hard to get this "
13,"13 CryptoKitties - Fabiano, Jordan, Nick.txt",1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. The real problems come into play when you are very dependent on 3rd party apps, in their case MetaMask. Memory problems in Metamask. Can’t really detect the state of Metamask. Stuck in a situation where they can’t provide the relevant info to their users 
   2. When a user does something, it’s kind of a hope for the best situation. May take a long time. If a user buys something on Amazon, they get a confirmation in 30 seconds. In blockchain, we can’t guarantee that info. Spent a lot of time educating users. Less with the libraries and more with the user communication and understanding of blockchain."
13,"13 CryptoKitties - Fabiano, Jordan, Nick.txt",1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Cryptokitties! Goals they have are to get multiple millions of users, the sooner the better. Ethereum sharding would be very nice, but even then there are scalability problems. Looking into other chains, EOS, Neo, Cardano  Looking at things from a scalability perspective. 
   2. Back-end stuff reconciling state of the world between blockchain and their stuff"
13,"13 CryptoKitties - Fabiano, Jordan, Nick.txt","5/14/2018 - Andy, Mitch","5/14/2018 - Andy, Mitch"
13,"13 CryptoKitties - Fabiano, Jordan, Nick.txt","Fabiano, Jordan, Nick","Fabiano, Jordan, Nick"
78,78 Virtue Poker - Javier Franco.txt,," 
"
78,78 Virtue Poker - Javier Franco.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Testing our Dutch Auction ICO contract: 
      1. We were targeting 100% code coverage. 
      2. The contract allowed ICO to stop in two ways: 
         1. By hitting the market cap 
         2. By calling stop (?) 
      1. The time between the auction being finished, and the tokens being claimed, you want 7 days. 
         1. This is equivalent to 30k blocks. 
         2. How to test? You hardcode lower numbers, test (which is slow), then switch in the real numbers. 
      1. What a solution for this would look like: 
         1. These tools could have a way to mine the number of blocks you want, instead of block-by-block. 
   1. Stress-testing the economics & game theory of ICO contract: 
      1. To be able to bid, you need to be whitelisted. Then, the amount you bid is also limited. 
   1. Solidity: 
      1. It’s a simple language. Not very complex. Problem is you have to be very strict about testing everything not even leaving a single line of code without coverage. 
         1. E.g. Parity bug. All contracts where using the same contract. 
         2. E.g. if you want to use an external function of a contract, and that person kills the contract, you are screwed. Kinda like someone deleting an NPM package you depend on. But there’s no roll back. 
         3. We are moving towards factory or library-driven contracts. 
            1. We will have a proxy contract."
78,78 Virtue Poker - Javier Franco.txt,1. Other bounties?,"1. Other bounties? 
   1. How to simplify the way to calculate the gasPrice. 
      1. Having an estimateGasCost when you send a transaction? 
   1. A lot of people have trouble when sending a transaction with a low gas cost, doesn’t get accepted – but you can replay the same tx with the same nonce with higher gas price and overwrite 
      1. Wallets need to implement this, it would help a lot of people."
78,78 Virtue Poker - Javier Franco.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Gas costs: 
      1. Ethereum price increased, gas priced also increased, then CryptoKitties launched –– gas cost of $1. We think the only solution is Plasma. 
         1. In the beginning, it’ll be only a chain for payout. Won’t have the EVM. The first Plasma implementation won’t be a EVM – will be only for sending payments. 
         2. We’ll be moving from this to a payment-only architecture. 
   1. Documentation is very weak – Plasma especially. 
      1. New joiners, suffer when learning. Compared with, say, Javascript. 
      2. Especially since we’re all in a phase where new developers are entering. 
      3. Ethereum Foundation examples has not changed in a long time. 
   1. There’s no rollback when you deploy a contract. 
      1. Deployment costs of a contract is expensive – the Dutch Auction for their ICO costs 1 ETH to deploy. 
      2. We were using Truffle to test. Achieved 97% code coverage. 
         1. Testrpc. Mining a lot of blocks. 
   1. Testing code based on temporal logic, number of blocks, e.g. you want to protect funds for 90 days or so. 
      1. Can achieve same result with 20/30 minutes of blocks. 
      2. This kind of testing is really slow."
78,78 Virtue Poker - Javier Franco.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. VirtuePoker –– making the migration to the new problem. 
      1. We have a Proof-of-Concept on Python implementing in Electron. 
      2. Talking to Plasma, to use for scaling and also gas costs. This is a big problem. 
         1. The poker game actions are all done off-chain the money stuff is on-chain. The winner reports the results. This is on-chain and expensive. Even reporting on the results costs $1. 
      1. Offchain stuff: 
         1. P2P network between all the peers – just a centralized API right now. Later want to be p2p without a server, but could have attack vectors with people listening in. 
      1. Building the backend – regulatory process – if you lose a hand, but thought you won, you should be able to call in. Also to prevent collision. View patterns."
78,78 Virtue Poker - Javier Franco.txt,"1/16/2018 - Sina, Robbie.","1/16/2018 - Sina, Robbie."
78,78 Virtue Poker - Javier Franco.txt,Javier Franco,Javier Franco
1,1 0x - Fabio Berger & Remco Bloemen.txt,," 
"
1,1 0x - Fabio Berger & Remco Bloemen.txt,1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. Code audits before deployment 
   2. Want to add a formal verification tool to our deployment tool. 
      1. By analyzing the code, you can find patterns. 
   1. I manually did an audit in v0 of 0x: 
      1. Make sure all functions have a “Read -> Write -> External Call” pattern, so you don’t have any race conditions."
1,1 0x - Fabio Berger & Remco Bloemen.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Testrpc has gotten better ––  
      1. Increases the speed at which you can dev. 
   1. Blockstream is really cool. Written by Mica (from Augur?), under the EthereumJS lib. 
   2. Good dealing with block re-orgs and changes in state. 
   3. Continuous Integration: 
      1. Doesn’t really work for smart contracts. 
      2. We just use testrpc. 
      3. Neufund was different than 0x: 
         1. Neufund was a trustee for tokens –– it was centralized by definition. 
         2. This made it simpler: I could create “open-ended” contracts –– a switch statement, that the default would send to another proxy contract. 
         3. But wouldn’t be able to do this with 0x –– e.g. if we wanted to add Shnorr signatures –– because it’s a governance / security issues."
1,1 0x - Fabio Berger & Remco Bloemen.txt,1. Other bounties?,"1. Other bounties? 
   1. Rest of the bounties from Remco 
   2. State-watching –– built-in diff’ing of state trees 
      1. Should be implemented in the Ethereum clients – Geth and Rust. 
      2. They want this feature for OrderWatcher. 
   1. EIP process is suboptimal: 
      1. Lacks in consensus-building. There’s vocal people who don’t have good ideas there’s a lot of noise. 
      2. To improve: committee-based approach (reputable stakeholders from reputable projects who get together?). 
      3. Problems are getting solved at the wrong abstraction level. 
         1. E.g. NFT standards. 
   1. Neufund was largest Solidity project before –– tokenized equity. 
      1. You want a EuroToken. You don’t want your company valuated in Ether. 
      2. What if blockchain forks which token is actually tied to the company? 
   1. Bounty approach gives many different styles within the codebase. 
      1. This is a problem e.g. OpenSSL codebase after Masters / PhDs."
1,1 0x - Fabio Berger & Remco Bloemen.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. EthereumJS / truffle hardwallet provider / Typedoc (to generate documentation) /  
   2. We don’t use Truffle anymore 
      1. Not reliable – can have race conditions 
      2. Artifacts don’t allow you to have versions of the contract on different networks 
         1. You don’t run into this stuff if you’re just building a “hello world” 
      1. Overwriting parts of the contracts  
   1. We rolled our own. It’s open-source but not documented. We have other things that are keeping us busy. 
   2. The problem is that Truffle has too much functionality –– we would like to see more of a Unix philosophy. 
   3. Cannot support different versions of Solidity. 
      1. Version management doesn’t exist. 
   1. EthPM –– doesn’t have versioning either? It’s going through a big refactor, so we held off. We need the NPM package manager. 
   2. We have built a lot of developer tools to interface with the smart contracts ourselves. 
   3. We have also built own deployer and migration tool, as truffle’s did not suit our needs."
1,1 0x - Fabio Berger & Remco Bloemen.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Getting a simple experimental environment up is hard 
      1. Remix is there but it’s not enough. 
   1. Tracing and profiling is not existent. 
      1. Remix does it, but can’t do it locally. 
      2. “Code coverage” tool exists but inserts console.logs in  
         1. Adding up gas costs per line of code. 
      1. Need to do profiling, because gas costs depend on inputs. 
   1. Solidity language itself: 
      1. Crashed the Solidity compiler twice today. 
         1. E.g. AbiEncoderV2 is pretty new and hard to understand/use. 
      1. The code that it produces is inefficient.  
      2. There is a stark stack limit in solidity 
         1. All the variables are locally scoped. 
         2. Un-intuitive as it is a curly braced language. 
         3. The lifecycle hook value_of is within a function. 
         4. Can only access top 16 slack slots. Including input and output. 
         5. We need to implement a graph coloring register allocator – to find out what the lifetime of the variables is. 
            1. “This stack slot was used in the first half –– the second half you can use”  
            2. Or implement register splitting. 
      1. Function inlining is frustrating sometimes: 
         1. E.g. SafeMath –– turns every operator into function call – which is a huge gas sink. 
      1. How Solidity optimizes could be improved:  
         1. It focuses on the code size (which makes sense since it’s minimizing the state tree) but sometimes you need to optimize size of tx gas (e.g. 0x needs optimized fillOrder call) 
      1. ABI doesn’t implement introspection 
         1. EIP 165 
            1. E.g. “does this contract implement ERC20, or ERC223?” 
         1. Solidity should have this in-built. 
            1. Should be built into the API spec and compiler. 
      1. Inheritance: 
         1. Interface or abstract contract – e.g. Solidity automatically creates getters for state functions –– collides with  
         2. Contract which implements an interface – public or external for abstract functions – they collide 
   1. ERCs – there is not a formal way to describe the interface for contracts. 
      1. Have a standard repo –– this will lead to a canonical ABI definition –– can have semantic rules around this. Could run some specific unit tests against"
1,1 0x - Fabio Berger & Remco Bloemen.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. 0x - Decentralized exchange protocol. It is a set of smart contracts that handle standard transactions in an order format. 
      1. The key advantage here is that these smart contracts leads to shared liquidity 
   1. We also achieve increased security and network liquidity through our architecture. 
   2. We launched the network in August 2017. 
      1. It works, but is V1. We are working on V2 which helps people build hybrid stations, supports new token standards, and makes the contract more gas efficient. 
      2. V1 only allows humans to create orders V2 will allow new smart contract to create orders. This is HUGE. 
   1. Notes: 
      1. We’re building the protocol designing the standard building dev tools for anyone to build a decentralized exchange. 
   1. Orders may become invalid for any reason: 
      1. Order being filled 
      2. Griefing attacks 
      3. We’ve now built an OrderWatcher that keeps relayers updated on the state of orders. 
         1. We’re using contract Events as a proxy for state changes. 
         2. Can do a diff between state trees and between block headers. 
      1. We also have a set of smart contracts to handle settlement  
         1. Everyone who wants to trade is setting allowances on a smart contract. 
            1. We want upgradability."
1,1 0x - Fabio Berger & Remco Bloemen.txt,Fabio Berger + Remco Bloemen ,Fabio Berger + Remco Bloemen 
31,31 GivEth - Jordi Baylina.txt,," 
"
31,31 GivEth - Jordi Baylina.txt,1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. It’s important to communicate to everyone that whatever you do will help, but will never give a warranty that there won’t be an error. 
   2. I’m a bit skeptical of formal verification stuff, but I think it’s important to keep pushing it forward. 
   3. Do more audits. 
   4. Write defensive code. Don’t try to do crazy things. 
   5. For the first time, we’re mixing two things that haven’t been mixed together: 
      1. The two: 
         1. Critical code – contracts holds money. 
         2. Open-source – everyone can see how it works. 
      1. E.g. you don’t have this in planes – critical program but not open-source. 
      2. E.g. in a website – it could be open-source but not critical. 
      3. So you realize you need to write perfect code, but that’s not possible. Because code is written by humans. 
   1. It’s important to improve:  
      1. Do not take risks. 
         1. Try to isolate the critical part. E.g. if you’re doing an ICO, don’t hold the ETH in the contract, instead put it directly into the multisig. 
         2. Minimize the box, with its known security vectors. 
      1. On one side, you have a blockchain that by definition that is immutable. On the other side, immutable is not compatible with making mistakes. 
         1. Humans make mistakes. We are building things on top of that immutable base that could have mistakes. 
         2. But we need to keep blockchains immutable, because if don’t, we lose their power. 
         3. How do we solve this? 
            1. Possible approach is having a second layer –– instead of ETH, we use an ETHToken. ETHToken has governance built in and can be modified. You build it in a more centralized manner, it can be changed and then overtime, you soften the centralization rules, and make it decentralized (take away the authority, make it operated by a DAO, etc). 
               1. E.g. having an escape hatch would be super helpful. If there is a hack, it could be sent to the EF or whitehat group. And then you can decide what to do. Better than it going directly to a hacker. 
            1. And then you can build the smart contract applications on this second layer. 
            2. Want to make decentralization linear so you don’t have to take the risks from the beginning. 
            3. All contracts in Giveth have escape hatches built in. 
            4. STANDARD LIBRARY for using ETHToken in your contract, layer for security, escape hatches => I think it might be a bit too early though since we’re still figuring it all out. Other teams working on this include Zeppelin, Aragon. 
   1. Better compilers. Better testers. Better formal verification. All the tooling helps. 
   2. There are some errors that are not due to programming – they’re conceptual, due to economics, etc."
31,31 GivEth - Jordi Baylina.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. Where do you think improvements can be made? 
      1. before we can really go mainstream: 
         1. Scalability. 
         2. Security. 
         3. Usability 
   1. Seems like security is as much an education problem, as tooling. Any ideas how we should approach this? 
      1. Documentation helps. 
      2. Realize that you will spend proportion of 40-to-1 on testing/auditing your contract vs writing. 
      3. Team audits 
         1. Doing an audit within your team. 
         2. Once you’ve done your personal work on the smart contract, and you’ve done your own audit then get together with your team, and start talking about your concerns, and you’ll see that one idea leads to another, and you discover issues. 
      1. Audits 
         1. Write some small bugs in the code, and see if the code reviewers find that bug. 
         2. Even if the auditor knows that there are bugs, they will be forced to go deeper into the code. 
      1. Bug bounties. 
         1. I was skeptical of these at first. Why would people review this code? 
         2. But I have seen personally over the last year that big security holes have been discovered in bug bounties. 
         3. Bug bounties force you to write very good code. 
            1. You need to choose the right names for variables, document it, it needs to be understandable. 
      1. Good resource: Consensys, on the history of all bugs. https://github.com/ConsenSys/smart-contract-best-practices 
      2. This wiki could be complemented with these more generic ideas – around bug bounties, reference smart contracts etc. 
         1. Maybe even write a book around it. An open-source book. 
      1. Smart contract developers could do an annual event – to categorize all the new bugs, new patterns – and consolidate them into the knowledge base."
31,31 GivEth - Jordi Baylina.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Debugger 
      1. The debugger is still hard –– you have to learn crazy tricks to be able to do it faster. 
   1. Return codes 
      1. When a function reverts, you want to know why it reverted. 
   1. Code coverage 
      1. Truffle has something, but it’s specific to truffle. 
      2. I’d like these tools to be more generic. 
   1. Truffle that works for larger projects 
      1. Across multiple repositories. You want the contract repo to be able to publish it’s interface, and another repo can use that to interact with it, etc."
31,31 GivEth - Jordi Baylina.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Experience: 35 years of programming 3 years in blockchains. 
   2. Learning more everyday exciting from a global perspective. 
      1. This tech can change society over time. We’ll see centralised power disappear, the world will become more trustless, people will take responsibility for themselves. 
   1. One of my first smart contracts was liquid democracy for the DAO. 
   2. Smart contracts for the white-hat group that originated from the DAO. 
   3. Wrote the Minime contract – maybe not the best time now because of gas costs, but it is an interesting smart contract. 
   4. Did the Status ICO. 
   5. Liquid pledging for Giveth. 
   6. Pushing DappNode - should be released soon and is really important for true decentralization. 
   7. Audits – for MakerDao and Aragon. 
   8. 777 standard. 
   9. Working a lot on an identity project."
31,31 GivEth - Jordi Baylina.txt,"16/05/2018 - Robbie, Sina","16/05/2018 - Robbie, Sina"
31,31 GivEth - Jordi Baylina.txt,Jordi Baylina,Jordi Baylina
44,44 Leeroy - James Childs-Maidment.txt,," 
"
44,44 Leeroy - James Childs-Maidment.txt,1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. No process, but would love to have it. 
   2. Apart from testing, would be cool to have tools that analyze what you’ve written and make sure you’re not doing anything dumb. 
   3. Right now, using Remix is helpful for getting warnings and stuff. 
   4. Hasn’t used Oyente"
44,44 Leeroy - James Childs-Maidment.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Truffle for testing (JS unit tests). 
      1. Really enjoying writing async await tests with Truffle. 
   1. Automated testing? How do you facilitate manual testing? 
      1. Play with the contracts in Remix. Deploy the contracts to testrpc and then test manually using the UI."
44,44 Leeroy - James Childs-Maidment.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. React / Redux app, with a firebase backend 
   2. Truffle. Just deployed using Remix, and uses it for playing with the contracts in general. 
   3. If not already mentioned, are there any libraries you rely on regularly? 
      1. Web3JS 
   1. In a toy project, used MetaMask just for signing transactions. Had a separate web3 using Infura for other stuff."
44,44 Leeroy - James Childs-Maidment.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. Aragon."
44,44 Leeroy - James Childs-Maidment.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. The tools are pretty early. Constantly running into a ton of bugs. 
      1. On Leeroy, had to install packages and fix stuff from other projects that were broken so he could use them. 
      2. Yesterday was playing around with a new app, and was using Ganache, and it would just lock up and crash. Then you need to redeploy the local smart contracts, which takes about a minute to get up and running again. 
   1. A really stable local chain would be cool. 
   2. With solidity, it would be great if you could get a better view of what went wrong when a transaction fails."
44,44 Leeroy - James Childs-Maidment.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. When you use Web3 library with Metamask, it’s really crappy getting events coming through. 
      1. Maybe will get fixed when moving to websockets with 1.0"
44,44 Leeroy - James Childs-Maidment.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. Only started in June or so. 
   2. Just reading through github and reddit instead of an actual source for education. Having really good docs in one place is a big thing."
44,44 Leeroy - James Childs-Maidment.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Been building social apps on Ethereum. Leeroy. 
   2. Storing all posts and likes on-chain, syncing that with a centralized database and frontend. 
   3. I started with some little smart contract that saved a string to variable. 
   4. After that, just dove in on making Leroy over the next few months. 
      1. After getting a feel for solidity by playing with Remix. 
      2. Didn’t really understand how expensive it would be to save everything on the blockchain. Solution was to store the hash of all the inputs. 
      3. From there, had to learn how to make things as cheap as possible. 
   1. Quite a bit of smart contract work on Leroy. Multiple versions of the contract along the way. 
   2. Because it’s as cheap as possible, Leroy doesn’t even fire events."
44,44 Leeroy - James Childs-Maidment.txt,James Childs-Maidment,James Childs-Maidment
8,8 Bounties.network - Mark Beylin.txt,," 
"
8,8 Bounties.network - Mark Beylin.txt,1. Are there any other questions we should be asking?,"1. Are there any other questions we should be asking? 
   1. Curious to know about developer incentives. Assuming you can make the same amount of money, would you prefer to build your own project or work on other people’s more established projects? 
      1. E.g. bounties for Augur vs building your own little dapp"
8,8 Bounties.network - Mark Beylin.txt,1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. Consensys diligence is an auditing team available for their teams. 
   2. Argus (Berkeley audits chain) 
      1. Didn’t find anything in our latest audit 
      2. Diligence at Consensys later found a re-entrancy vulnerability 
      3. Oyente also missed the re-entrancy bug(!!) 
   1. Having bug bounties in general is a good standard"
8,8 Bounties.network - Mark Beylin.txt,1. How do you handle testing? ,"1. How do you handle testing?  
   1. Mocha tests using Truffle and testrpc. 
   2. Also use Rinkeby for when deploying staging versions."
8,8 Bounties.network - Mark Beylin.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. I know and use the solium linter.  
   2. Use truffle, testrpc. I love Remix.  
   3. Use Remix for deployment. Feels like I can trust remix to work as it’s meant to. 
   4. Web3JS, BigNumber, site is built on React.  
   5. IPFS JS library.  
   6. Blockies react library."
8,8 Bounties.network - Mark Beylin.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. Sharding. That’s all I want. 
   2. uPort is getting ready for mainnet, feeling excited about that."
8,8 Bounties.network - Mark Beylin.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Not being able to upgrade my contracts easily. 
   2. Better ability to return data, specifically variable length data. Arrays of strings. Mappings of strings to data, etc. 
      1. Ability to just dump the whole state would be great. 
   1. Gas limit: 
      1. Gas costs are high. Gas limit was a problem very briefly when trying to deploy a contract. But if your contract is running into the gas limit, it’s probably too big. 
   1. Off-chain computation: 
      1. No. Smart contract doesn’t care about off chain. Stores stuff on IPFS and just stores the hash on-chain. 
   1. State Channels: 
      1. Only read about them and researched how they could be used."
8,8 Bounties.network - Mark Beylin.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. Better querying possibilities on the state of contracts. Better indexing to do this. Even something that will just shoot results into a SQL table. 
   2. A good wiki that is endorsed by the foundation but curated by the community. 
      1. E.g. “How to do X” 
      2. E.g. “What is X” 
      3. People don’t know what they don’t know"
8,8 Bounties.network - Mark Beylin.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. Didn’t understand the stack. People don’t understand what’s in between dapp and the blockchain. 
   2. Really solid boilerplates would be very helpful for new people to see how easy it could be."
8,8 Bounties.network - Mark Beylin.txt,1. Who are the other people you think we should talk to?,"1. Who are the other people you think we should talk to? 
   1. Joseph Vander (learning the be a solidity developer right now) 
   2. Kevin Owocki from gitcoin"
8,8 Bounties.network - Mark Beylin.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Creator of the Bounties Network. Bounties on any task in any Ethereum token. Frontend that relies on Infura and IPFS. 
      1. Infura doesn’t let you listen for events. They have websocket capabilities that may be in beta right now. 
   1. Users use metamask for calls and transactions on it 
   2. I am the only solidity developer throughout its life."
8,8 Bounties.network - Mark Beylin.txt,Mark Beylin,Mark Beylin
79,79 Vulcanize - Rick Dudley.txt,," 
"
79,79 Vulcanize - Rick Dudley.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. I like the DappHub stuff but it’s not fully integrated.  
   2. There isn’t a full testing suite no way to go from the Solidity integration tests, to full-stack integration tests. 
   3. Casey Detrio worked on testing & fuzzing within Ethereum Foundation codebases. 
      1. But they don’t run simulation networks on updates, so there could be consensus breaks. 
         1. For instance, the airline industry does this. Airlines use BFT within fly-by-wire systems. 
   1. Check out: videos from SQLite author explaining how they did testing. 
   2. Our testing: 
      1. We use both Zeppelin and Dapphub.  
      2. Phantom-js test of something that uses IPFS and Ethereum. 
   1. Monax had a lot of great tools, that didn’t get the attention they deserved in the community: 
      1. Counterintuitively, the federated context has higher security requirements. Your clients ask tougher questions than ICO token buyers."
79,79 Vulcanize - Rick Dudley.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. Bottom-up sharding scheme 
      1. An app-sharding model. 
      2. Put a market-based order based on parameters on what validators you want. 
   1. Active bounty is a hybrid between a consulting contract & a bounty? 
      1. With Github, you have the opportunity to watch source code writing (commits) to deployment on mainnet –– the whole process cryptographically held together"
79,79 Vulcanize - Rick Dudley.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Lack of people over 40 – naivete. 
   2. Trust and guarantees – which crypto gives you which guarantees? 
   3. The claims of Ethereum – what features are worth preserving. 
      1. Contracts are immutable but state is mutable –– contract code being mutable doesn’t give you any security. -> immutability. 
      2. Is the RChain application model (not Turing complete) better than having a Turing complete VM? 
   1. We haven’t been super happy with ganache in particular."
79,79 Vulcanize - Rick Dudley.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. I worked on EthPM briefly. 
      1. I gave up in frustration  
      2. I was working at Monax at the same time with RJ and Jan. 
      3. This is a good bounty that we’re going after. 
      4. Bigger problems within EthPM: 
      5. Fundamentally, in Ethereum, we have contract immutability. 
         1. If I take the same bytecode and deploy it to two different networks, it’s going to have different hashes. So how do I reference the code across my local, testnet, and mainnet environments? How do I reference that in my dev environment? -> the contract address won’t be the same. 
   1. Working on at the moment? 
      1. VulcanizeDB with Maker as their client. 
      2. Steps: 
         1. Take IPFS (the content-address allows you to verify the content is correct) and retrieve the data 
         2. SQL query – you do a search given parameters and you get back a result set. 
            1. Because you trust the database is free of faults. 
         1. Vulcanize: our result-sets contain content-addressable data. 
            1. ETL system for blockchains. 
            2. Pull blockchain data into a Postgres database – load all blocks, transactions, tx receipts. 
            3. You as an engineer write a transformation – which also generates a GraphQL endpoint. 
            4. Your dapp can then pull that data on an ongoing basis live –– pubsub, polling, … The data is also content-addressable. 
            5. e.g. you put the events for a contract into a table, you have a block range, a contract, in this table 
            6. Then, you take that table, do a pg_dump, and put it into IPFS. 
            7. You can then verify that using your own client. 
      1. Github / vulcanize / vulcanize.db 
         1. Will be released soon. 
      1. Will eventually write a DSL for those transform. 
      2. Standalone vulcanize db reads from one node, but can gossip the transformed to other nodes. 
      3. Interactions with IPFS, Tendermint, Lightning, … 
      4. Federated exchange – decentralized exchange 
         1. Once you have that system then the Tendermint validators can have a system marketing 
         2. Tendermint validators can be bonded on Ethereum AND they promise to route the Bitcoin HTLCs"
79,79 Vulcanize - Rick Dudley.txt,4/5/2018,4/5/2018
79,79 Vulcanize - Rick Dudley.txt,Rick Dudley,Rick Dudley
24,24 Ethereum Foundation - Hudson Jameson.txt,," 
"
24,24 Ethereum Foundation - Hudson Jameson.txt,1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. Use the Remix tool to just scan for general bugs. 
   2. Wanted to use Oyente, but don’t know how to use it 
      1. Remix is thinking about being modular to the point where you can just plug in your own about module - that would be awesome to see."
24,24 Ethereum Foundation - Hudson Jameson.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Have been using Truffle more lately but was mostly just using Remix before. 
   2. Write the contracts in Remix, deploy them in Remix. Usually do it all through Remix and MetaMask. Used to connect metamask to a ropsten node run locally, but now metamask is more reliable."
24,24 Ethereum Foundation - Hudson Jameson.txt,1. Other bounties?,"1. Other bounties? 
   1. Dev Grants from the Foundation 
      1. Ethereum foundation had 2 iterations of this program 
      2. Get some money to build something at the protocol-level 
      3. The foundation is looking into revising the process."
24,24 Ethereum Foundation - Hudson Jameson.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Remix, MyEtherWallet, MetaMask"
24,24 Ethereum Foundation - Hudson Jameson.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. Casper. It’s already kind of going into testing. 
   2. TrueBit near the top of the list because it has so much potential."
24,24 Ethereum Foundation - Hudson Jameson.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Hard to read error messages. Solidity and EVM might fix this with error messages. 
   2. Are you running into problems with any of the following: 
      1. Gas limit: Totally. If you don’t properly separate your contracts or import too many, the gas limit blocks you. Especially on Ropsten with a dynamic gas limit, this doesn’t work. 
      2. Off-chain computation: Many things can’t be done until TrueBit becomes a real thing. Biggest one being stuff like Plasma and side chains aren’t possible until TrueBit is ready. 
      3. State Channels: Haven’t worked with them personally but understand them and think they’re cool."
24,24 Ethereum Foundation - Hudson Jameson.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. Remix combines an editor with a deployment mechanism and that’s what I like about it. 
   2. EthMix was like a full IDE with better syntax highlighting and better debugging. And it was a native app instead of web-based. Pity that it has not been maintained. 
   3. Something that automatically uploads the contract to ENS."
24,24 Ethereum Foundation - Hudson Jameson.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. The resources are pretty spread out, and everything moves so fast it’s hard to keep up today. If you’re using resources from 6 months ago they might be wildly out of date. 
   2. Andreas Olafson had the only videos and tutorials on solidity, so I just watched those to learn."
24,24 Ethereum Foundation - Hudson Jameson.txt,1. Who are the other people you think we should talk to?,"1. Who are the other people you think we should talk to? 
   1. Raine Revere from ShapeShift"
24,24 Ethereum Foundation - Hudson Jameson.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Mainly focused on solidity smart contracts. A little node JS and Java but not very good at it."
24,24 Ethereum Foundation - Hudson Jameson.txt,Hudson Jameson,Hudson Jameson
27,27 eWASM - Lane Rettig.txt,," 
"
27,27 eWASM - Lane Rettig.txt,06/05/2018 - Andy Tudhope,06/05/2018 - Andy Tudhope
27,27 eWASM - Lane Rettig.txt,1. Are there any other questions we should be asking?,"1. Are there any other questions we should be asking? 
   1. Product management mindset is incredibly important. Ethereum full node software is quite clunky and is not user friendly. Would love to see projects further down the stack actually adopt this kind of mindset. 
      1. Do you know who your users are? What sort of feedback loops do you have with them? How do you talk with them? Have you done user needs analysis? 
   1. Communication tools are interesting to dive deeper into - both internal and external. 
   2. Governance and signals is very important to me - how do you get a sense for community consensus? Build things that reflect the collective will of the community, but we don’t have access to that. What signals would you like to be able to get from your community and how? 
   3. Concept in medicine called “practicing at the top of your degree” - doctors should not be scheduling or handling payments. Devs shouldn’t be worried about devops, finances, scheduling.  
      1. What % of your time today are you spending practicing at the top of your degree/qualification? Talk about processes especially."
27,27 eWASM - Lane Rettig.txt,1. What are the best educational resources?,"1. What are the best educational resources? 
   1. Solidity tutorials on ethereum.org was the place I began. Needs to be updated and Hudson is working on that. It should be the definitive source in the sense that it’s the first place people studying Ethereum often land. 
   2. Has to be about pair programming for me when it comes to core dev. There is no documentation and it lives inside the heads of core developers. There is a repo for WASM stuff, but it is a moving target."
27,27 eWASM - Lane Rettig.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. Use vim, tmux and work way down in the protocols - no web3 etc. 
      1. Lots and lots of helpful vim plugins: various language syntax plugins, version control, etc. 
   1. Writing web assembly itself (tests), Javascript and some C++: evm2wasm transpiler that can maintain backwards compatibility."
27,27 eWASM - Lane Rettig.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. WASM allows people to write contracts in non-EVM specific languages: C++, Rust, typescript etc. 
      1. Bring on an order of magnitude increase in the number of devs. 
   1. Working so closely on Aragon because of the work being done by everyone on governance 
   2. FOAM is going to open up the whole world if it works as they say it will. 
   3. Truebit is amazing. 
   4. TCRs"
27,27 eWASM - Lane Rettig.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Testing - “is a nightmare.” The way it is done at the core level is very overcomplicated and confusing. 
      1. 3 types of tests and completely separate tooling for each 
         1. State - honestly don’t know, even after several months 
         2. VM - lowest level, see what effect a tx has. Not documented well 
         3. Blockchain - wait for blocks to be mined and stuff to happen. 
      1. Historically made sense to do this. Each client has to pass all three types of tests so that we don’t end up with consensus bugs. 
      2. Documentation is non-existent and tooling sucks. 
      3. Would be great if there were a single command to run all the tests. 
      4. How do I run a single (VM) test easily? Or even just an arbitrary subset of tests? We use CI tools to run them instead (Travis, but are transitioning to Circle). It’s all dockerized, so getting tests to run locally is very difficult. 
      5. There is a tool called testeth, built in cpp-ethereum. 
         1. Test tooling should be in its own repo! Not maintained very well either. 
         2. In order to run testeth, I have to download and compile cpp-ethereum. 
      1. Worth having CI as its own separate point as it is the other biggest headache, along with testing. 
   1. Communication tools in the EWASM team - use gitter currently. No threading, images etc, basic stuff that is missing. 
         1. EF uses Discord internally and there is an #ewasm channel there, but we have team members who are not part of the Ethereum Foundation and are not on Discord so we need another channel. 
            1. Setting up bridges is a possible solution that seems to be working quite well for other teams. 
      1. Testeth is a great place for bounties and should NOT BE A PART of cpp-ethereum 
      2. Getting testnets up and running - there should be a test network in a box that we can just deploy at the press of the button It should not require a  devops engineer to handle this kind of stuff. 
      3. There is a half-baked interpreter for WASM in Go and C++, but we need one in python so that we can plug into Trinity (the new Python full node implementation that is being written from scratch and is the vehicle for research including sharding)."
27,27 eWASM - Lane Rettig.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. Working on evm2wasm in JS - we need to be able to run all the tests using the new WASM infrastructure. I want something like a CI on my local machine, make a change, save the file and see whether the tests are passing or failing. Hot reloading for the whole test suite kind of thing. Local test harness that just works."
27,27 eWASM - Lane Rettig.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Core developer for EWASM, but independent and works on a grant. 
   2. Doing a lot of governance-related stuff lately, EIP0, Fellowship of Ethereum Magicians 
   3. Runs a blockchain community and coworking space in NY called Crypto NYC (www.cryptonyc.org) 
   4. New project called Odin Protocol, an open data marketplace"
27,27 eWASM - Lane Rettig.txt,Lane Rettig,Lane Rettig
62,62 Pyeth - Piper Merriam.txt,," 
"
62,62 Pyeth - Piper Merriam.txt,1. Other bounties?,"1. Other bounties? 
   1. The Hive tests – 
      1. Framework that black-box tests EVM implementation. 
      2. Has had multiple conversations with cdetrio on Github. 
      3. Bounty: needs clear documentation: “for your EVM to be included in the Hive tests, you need this stuff.” 
         1. Maybe it’s not super high impact and not crisply defined 
   1. Bounty: need a formal spec for the Json RPC api. 
      1. Have integrations tests in Web 3. Subtle differences across nodes, which make things confusing. 
      2. Somebody needs to shepherd the ERC spec through –– most of the work is done. Dan Finlay already hammered out most of the work. 
         1. Someone needs to write the schema for all Json RPC endpoints. 
      1. This is super well defined."
62,62 Pyeth - Piper Merriam.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. Package management: 
      1. First piece: the spec 
         1. ERC whatever that defines the spec –– this is v1. 
            1. https://github.com/ethpm/ethpm-spec  
            2. There is very minor adoption of this. 
         1. There is a v2 of this spec –– couple of tweaks to fix stuff that was wrong in the first one. This is mostly written up, needs PRs to be written and merged. 
      1. Second piece: the implementation. 
         1. There is an early Python implementation –  
            1. https://github.com/pipermerriam/py-ethpm  
            2. but you need this in every language. 
         1. Needs various abstractions, for how to get deployed contracts –– returns language-specific object to you. 
      1. Third piece: a standard –– an ERC for package registries. 
         1. https://github.com/ethpm/ethpm-spec/issues/75  
         2. Standard methods for looking up what versions of the package exist, what is the hash / IPFS / HTTP URI. 
      1. Fourth piece: implementation of the registry as a smart contract. 
         1. There’s an already implementation of this in the EthPM github.  Needs to be simplified. 
            1. https://github.com/ethpm/escape/blob/master/contracts/PackageIndex.sol  
         1. Having this in Zeppelin or Dapphub. 
      1. The fifth piece: can have tooling + ENS nicencess to automatically deploy to registry for you. 
         1. Web3.js and Web3.py can implement methods to talk to packages –– can find the packages, pull them, use the right abstractions. 
            1. e.g. you load up the Gnosis package, pull the latest version, pull it out of your web3.py, and query for your contract balance. 
               1. Theoretical API: `web3.packaging.registry(‘packages.gnosis.eth’).loadPackage(‘gnt>=1.2.3’).contracts.gnt` 
         1. You get a really secure way of accessing contracts 
            1. Each company can create their own registry. 
   1. What do you need? 
      1. Two moderately skilled Python devs who know about Ethereum. 
         1. Two can keep each other in check – it’s healthier. 
      1. Could have MVP for this in Web3.py in 2-3 months. For the full thing. Could have an alpha release. 
   1. What does wider adoption look like? 
      1. Every etherscan contract can be wrapped up in a package. 
         1. At this point Etherscan becomes a package registry. 
      1. Verifying package source on Etherscan becomes trivial –– you upload a package to Etherscan. 
         1. No more need for janky copy-pasting source code. 
      1. Wallet interfaces: 
         1. MyEtherWallet –– instead of having address or ABI, you can upload the package or let you browse the registry and pick a package to interact with it. 
         2. Mist Ethereum wallet –– “track this contract” –– can show you a thing on the top that says you’re not using the latest version of this package. You get a security bonus –– to notice if you’re using an old package. 
   1. Development framework use-case for packaging! 
      1. Is the one that’s most talked about, but is probably the last one that will happen.  It requires complex integration between compiler and on-chain assets that might be stateful.   
      2. The base libraries however are needed as a stepping stone to build these features on top of. 
      3. NOTE: 
         1. Piper can lead defining this as a bounty and setting the milestones. 
         2. $50k/$60k feels like enough to attract attention. Can potentially get ETH foundation to fund part of the bounty. 
   1. Web3.py 
      1. Been using Gitcoin pretty heavily –– has been highly effective. Any task that they can define well, they can get done through Gitcoin reliably. 
   1. Trinity –– Python Ethereum node 
      1. Some use-cases will be greatly improved by third-party libraries  
      2. There is a solid abstraction around the database. 
         1. Generating a SQL backed chain db would hugely help research. 
            1. Take an existing chain db and migrate it into a SQL db. Or just sync the chain into SQL. 
            2. Maybe you only move the transaction and block data into the SQL db. 
      1. Another use-case for Trinity: 
         1. Spin it up on Heroku – it’s an ephemeral environment – for that to be a viable way to run your own Ethereum node. 
            1. Issue: how long does it take to initialize. In its lightest light-client mode, should be ready in sub-1 minute timeline. 
      1. Trinity and PyEVM have the most resources available out of the things they’re working on."
62,62 Pyeth - Piper Merriam.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Trinity: new Python-based Ethereum node. 
      1. Py-EVM: python implementation of EVM in python. 
         1. Sharding & Casper research team are building on this. 
   1. Web3.py: python equivalent of web3.js 
      1. V4 is coming along nicely and is fairly solid right now. 
      2. Under the above – there are a myriad of base libraries that I’m the developer –– i.e. side-effects of the work. 
   1. Package management  
      1. Similar to Populus –– but actually the underlying core package-management structure. The solution is ready, it just needs to be built. 
      2. It is project that I had to cut off, but wants to pick up again –– immediately came to mind for bounties."
62,62 Pyeth - Piper Merriam.txt,2/13/2018 - Sina ,2/13/2018 - Sina 
62,62 Pyeth - Piper Merriam.txt,Piper Merriam,Piper Merriam
43,43 L4 - Richard Moore.txt,," 
 
 
 
 
"
43,43 L4 - Richard Moore.txt,1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. Extensive testing!  
      1. Using ethers.build etc. code audits are usually from Yuet.  
      2. Usually just have someone else look it over.  
      3. More careful with blockchain-things esp once my money is in there. "
43,43 L4 - Richard Moore.txt,1. How do you handle testing?,"1. How do you handle testing? 
      1. Automated testing? How do the facilitate manual testing? 
      2. Ethers.build 
         1. Automated 
         2. Also facilitates manual testing 
         3. Rudimentary debugging"
43,43 L4 - Richard Moore.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
      1. I use all my own stuff, mainly 
      2. Ethers.js 
      3. ethers.cli 
      4. Ethers.build 
      5. Parity 
      6. Node.js"
43,43 L4 - Richard Moore.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. 0x is cool. Rufflet is neat! I like the idea of having introspection tools in the system.  
   2. Also: https://www.withpragma.com/logging/0x06012c8cf97BEaD5deAe237070F9587f8E7A266d  
   3. Debuggers are super important and I want them! Martin Swende demoed one, but needs some other stuff… his thing focuses on monitoring the EVM code and state changes its performing, as opposed to solidity. I want to be able to step through my solidity code line by line and see the changes that it is making on the blockchain.  
   4. The sourcemap is not super reliable. Because once you compile, it might reorder operations, and certain ops span lines, it starts becoming non-obvious what the correct thing to point to is."
43,43 L4 - Richard Moore.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
      1. Documentation is a huge problem 
         1. A lot of documentation is simply missing, or its not good 
         2. It’s all outdated! It seems authoritative, but then I find it’s wrong. People don’t always do a good job of this. Ethers is only non-solidity implementation of solidity’s S3 that works correctly.  
         3. If you read the docs, it’s just wrong!!"
43,43 L4 - Richard Moore.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. Events!!  
      1. There’s definitely missing features of what ethereum actually stores in its DB.  
      2. I would love if infura enabled the trace API, which is hugely expensive, that’s probably why they haven’t, but for now there is no way to give it an address and find all the transaction (or even a transaction) from that address.  
      3. Would be great if you could just tell me the first tx hash that a given address ever made. Obviously this vastly increases cost of an ethereum node to run, but would be useful. 
   1. Events are just wildly unreliable. This is why ENS stores things on chain. Events don’t work well enough to do what you need to do. If I need to look this up, I can’t. 
      1. The main reason is if you indexed all that stuff all the time, it would constitute a huge load. So most people aren’t doing that. Scarce details of how they aren’t is the problem... 
      2. [Greg is working on something that will do this] "
43,43 L4 - Richard Moore.txt,1. What was the hardest part about learning to develop with Ethereum?,"1. What was the hardest part about learning to develop with Ethereum? 
   1. Install and setup and configure and run and sync your own chain is ridiculous.  
   2. Libraries like web3 which have big problems.  
   3. Web3 feels weird given how javascript is used and behaves.  
   4. What would be the hardest part of teaching somebody to build a dapp? 
   5. Mainly just the idea of how blockchains work. People tend to misunderstand what the blockchain part can and should do. 
   6. It’s very easy for a person to write a terrible contract. Even if you write a terrible MVP, it’s easy to release the non-terrible version later. But with this, if you make a bad mistake, it’s a huge problem - more like hardware, you can’t always change it on the fly.  
   7. And the documentation sucks."
43,43 L4 - Richard Moore.txt,1. Who are the other people you think we should talk to?,"1. Who are the other people you think we should talk to? 
   1. Yuet Loo"
43,43 L4 - Richard Moore.txt,RICHARD MOORE,RICHARD MOORE
84,84 Y-Combinator - Ramon Recuero.txt,," 
"
84,84 Y-Combinator - Ramon Recuero.txt,1. Are there any other questions we should be asking?,"1. Are there any other questions we should be asking? 
   1. Share your learnings, get the community back in, and do another iteration."
84,84 Y-Combinator - Ramon Recuero.txt,1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. Found a list of the top 10 security vulnerabilities reentrancy, math overflow, ... 
   2. You don’t know what you don’t know. 
   3. How to find info: 
      1. Google / reading about the DAO hack / Reddit."
84,84 Y-Combinator - Ramon Recuero.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Redis had the smart contract. Made an npm library had Truffle tests + npm tests."
84,84 Y-Combinator - Ramon Recuero.txt,1. Other bounties?,"1. Other bounties? 
   1. Having difficulty in hiring people – most engineers don’t understand blockchain. 
      1. Don’t have much to show for it right now. 
         1. SoV 
      1. Infrastructure needs to get exist first. 
      2. Lack of use-case, to be honest. 
   1. Explaining the data model for blockchains: 
      1. E.g. similar to: Dan Abramov: Redux devtools on the right. 
      2. Making an interactive demo of data flowing through."
84,84 Y-Combinator - Ramon Recuero.txt,1. Was anything easier than expected?,"1. Was anything easier than expected? 
   1. Testing in Truffle. 
      1. Is simple if you come from the Javascript world. 
   1. Metamask."
84,84 Y-Combinator - Ramon Recuero.txt,1. What are the best educational resources?,"1. What are the best educational resources? 
   1. Did Coursera course to implement blockchain, but it’s likely not the best."
84,84 Y-Combinator - Ramon Recuero.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Was pleasantly surprised with Truffle - testing was easier than expected. 
   2. What was hard: 
      1. Debugging. Solidity compiler error messages could be better.  
      2. There’s no console.log, can click and step into the code. 
      3. Google and Stack Overflow are often the best resources when running into bugs. 
      4. Trial & error, until you get through it. 
      5. It’s difficult to communicate this to other people. 
   1. Getting the mindset for developing for the blockchain is hard. 
   2. Hard to remember,even harder to explain to other people. 
   3. Deploying to testnets and mainnets was hard. 
      1. Had trouble with gas. 
      2. Getting Ether on the testnet. No faucet. 
         1. Found developer on Reddit Ethereum thread. 
      1. No chance to update the contract. Just pushed new contracts. 
   1. Eth npm in the beginning. 
   2. Different ES6 configurations in front and backend"
84,84 Y-Combinator - Ramon Recuero.txt,1. Who are the other people you think we should talk to?,"1. Who are the other people you think we should talk to? 
   1. Blockchain Berkeley Lab – professor – working with students learning blockchains."
84,84 Y-Combinator - Ramon Recuero.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Last summer, developed Redis on Ethereum. Simple to read & write data. "
84,84 Y-Combinator - Ramon Recuero.txt,1/11/2018 - Sina,1/11/2018 - Sina
84,84 Y-Combinator - Ramon Recuero.txt,Ramon Recuero,Ramon Recuero
14,14 DappHub - Andy Milenius.txt,," 
"
14,14 DappHub - Andy Milenius.txt,1. Are there any other questions we should be asking?,"1. Are there any other questions we should be asking? 
   1. How can Ethereum create more cultural norms and lead by example?  
   2. Take a more leadership role to say nice things about other ecosystems, languages etc.  
   3. Ethereum Comm’s department."
14,14 DappHub - Andy Milenius.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Ethereum relies heavily on Javascript dev tools “that node modules way of life”. 
   2. Javascript: its polarizing you either love it or hate it. 
      1. The fact that there’s a JS tool for something doesn’t mean that it doesn’t need to exist otherwise. 
   1. Examples: 
      1. Piper’s python tools  
      2. (would like to see C++) 
      3. Maker’s bash tools 
      4. Some dapphub Haskell tools 
   1. EF should put money into language ecosystems replicate what we have (more front-end library systems!) 
      1. Second layer tools - the Ethereum API is a huge pain point.  
      2. RPC - if you’re on the command line, it’s a pain in the ass. 
      3. High-level access into the Ethereum API more granular than the REST API 
      4. In JS this is: Web3.py in python its web3.js 
         1. Small drop in solutions for talking to a client 
   1. Why is there not a good robust solution for caching the blockchain in a normal database? 
      1. Maker has funded this. 
      2. VulcanizeDB done by Rick Dudley Maker is funding 
      3. When you talk to Infura, the Ethereum API, is mostly via HTTP. Need sockets. 
         1. If you want to query events, it’ll probably time out. 
      1. It will be cool if EF runs archive nodes, cached data. 
      2. Feels bad about Metamask:  
         1. If you only used them to write to blockchain, then it would be so much simpler for them. 
         2. Metamask just pipes all the requests to Infura costs around 100k a month. 
      1. The reason why everyone uses Metamask, is because there’s no other robust solution. If EF funded a solution, it’ll be helpful 
         1. Metamask is customer support for the entire Ethereum ecosystem. 
   1. Event querying 
      1. Make it so that it’s not scanning for the whole blockchain. 
   1. Light clients 
      1. Everyone’s trying to build the perfect architecture. Metamask is trying to build something that works. 
      2. Metamask’s version: 
         1. An awesome intermediate step:  
            1. Infura publishes a block onto IPFS using pubsub 
            2. All the metamask nodes gossip it to each other. 
         1. Could EF support this. 
      1. There is someone publishing all blocks from all blockchains on IPFS, into a meta-blockchain, called Braid. 
   1. Whisper & Swarm: 
      1. There’s other people still working on these outside of ETH 
      2. Swarm is similar to IPFS. 
      3. Does ETH need p2p messaging  
      4. There’s systems that work: 
         1. DAT protocol / secure scuttlebut (1,000s of people on these networks) 
         2. Ask the Secure Scuttlebut ecosystem what their issues are 
         3. Dfinity gave a grant to secure scuttlebut 
      1. It would improve the Ethereum community image if we’re working with others. 
   1. Identify other projects that are good trim the fat from our ecosystem and then build a relationship with them. 
      1. “Living life on hard mode” – people who don’t do ICOs. 
   1. Other ecosystems that are good: show commitment to Protocol Labs 
      1. Libp2p 
      2. IPLD 
         1. More formal partnership -- integrating properly  
   1. Devp2p is bad 
      1. Less than 1% of requests you make are Ethereum mainnet. 
      2. You contact other nodes without knowing if they’re on Kovan, Mainnet etc 
         1. Super inefficient all these handshakes. 
      1. Main bottleneck in Geth -- every ETH node talks on Devp2p 
      2. Gotta switch to libp2p! 
   1. Are Geth team dynamics good? 
   2. Idea: a parallel IPFS pinning service as a hedge against Filecoin not working."
14,14 DappHub - Andy Milenius.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. DappHub: 
   2. Working on dev tools since I got into the space in 2015. There were no tools at all we wanted to create them in a holistic way from first principles. 
   3. Made tools to make use of Solidity compiler & make Ethereum API & EVM simpler in general. 
   4. Formal verifications & contract safety."
14,14 DappHub - Andy Milenius.txt,"3/14/2018 - Robbie, Andy","3/14/2018 - Robbie, Andy"
14,14 DappHub - Andy Milenius.txt,Andy Milenius,Andy Milenius
7,7 Augur - Joey Krug.txt,," 
"
7,7 Augur - Joey Krug.txt,01/06//2018 - Mitch,01/06//2018 - Mitch
7,7 Augur - Joey Krug.txt,1. How do you handle smart contract verification and security?,"1. How do you handle smart contract verification and security? 
   1. Yeah, encourage everyone to use auditors. Lots of multisig tools out there that don’t have CI builtin. Oyente, Mythril, but one problem is that no one else really uses them. Lots of bugs they found. 
   2. Tools are very well optimized to run for one smart contract. But not to run on suites of smart contracts. But if you fast forward a few years this will be relevant."
7,7 Augur - Joey Krug.txt,1. How do you handle testing?,"1. How do you handle testing? 
   1. Run against pyethereum. Test suite is written in Python. As an investor, most companies are in JS environment with Truffle. Like Python a bit more. Truffle complaints are it has a lot of quirks. Default instructions for setting up tests in Truffle you get a weird nested stack of tests. 
   2. UX blockflow IDEO for Truffle, doesn’t need to be rewritten but needs to be improved."
7,7 Augur - Joey Krug.txt,1. Other domain specific questions?,"1. Other domain specific questions? 
   1. Would be useful if the Ethereum project could add more firepower to underlying network. Propagating a block and you have a certain amount of time to do it otherwise you could fork. More low hanging fruit at the network level. 
   2. A really simple idea is when blocks are propagated, just propagate the tx ordering. Then have clients gossip for missing tx’s. A concrete example is for Bitcoin Bip152. Could this work Ethereum? Make something like this for Ethereum. Implement in Geth in Parity"
7,7 Augur - Joey Krug.txt,1. What are the best educational resources?,"1. What are the best educational resources? 
   1. Back then documentation was very sparse, blogs posts or Reddit posts written by Vitalik or other people. Try stuff and see what works, back then everything was on Skype. Now it’s quite a bit easier, Solidity docs are much better. 
   2. What about for people getting into the space now? Google + original docs + Stack Overflow. If you’re stuck go to one of the Gitter channel and ask the question."
7,7 Augur - Joey Krug.txt,1. What are the tools/libraries/frameworks you use?,"1. What are the tools/libraries/frameworks you use? 
   1. At Augur, stack is different as it’s a bit older.  
   2. IDE: if you’re doing something simple you can use something like Remix. Remix has all the kind of stuff you need, automatic static analysis to detect bugs and very visual and easy to run. 
   3. More than 5-10 smart contracts, beyond ERC20 and ERC-721, now Remix will fall apart 
      1. UI is a big clunky as you add more contracts 
      2. It’s hard to write a complicated test suite with continuous integration. Instead use Sublime with terminal or EMACS and VIM. Augur primarily uses a Visual Studio Code syntax highlighting."
7,7 Augur - Joey Krug.txt,1. What are you most excited about in the short term?,"1. What are you most excited about in the short term? 
   1. In the short term, he’s most excited about Maker DAO in the wild. A good stable coin. 
   2. Scalability for mid-to-long term focus. 4 years ago it was just discussing what the block size is, but that’s an improvement for just one time. Interested in sharding implementations."
7,7 Augur - Joey Krug.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. At the end of the day, it all comes down to the tech side. Biggest frustrations are that it’s hard to write scalable software on something on Ethereum. State of scalability is very nascent. Product he’s advising for payments, they look at state channels. But when you try to use MVP’s, it doesn’t work. But it’s really a comment on scalability not on the individual company. L4 working on generalizable state channels, excited about that. 
   2. From a business standpoint, you want to build on Ethereum. People come to them and say they want to build EOS. Reason Ethereum doesn’t scale is that they’re trying to scale and not make a huge compromise. But there isn’t a lot of marketing. We want to articulate why Ethereum is a good platform to build, not just look at TPS. 
   3. Would be cool if Ethereum Foundation put some posts on the blog for what’s in the works for everything."
7,7 Augur - Joey Krug.txt,1. What tools don’t exist at the moment?,"1. What tools don’t exist at the moment? 
   1. My answers changed over a time, 1 year ago it was static analysis. These tools exist now, but they need to be improved. The tools themselves don’t have test suites, for example and they need more firepower in general. 
   2. From an investor standpoint these dev tools need to be improved."
7,7 Augur - Joey Krug.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Co-Chief Investment Officer at Pantera Capital and Co-Founder @ Augur. "
7,7 Augur - Joey Krug.txt,Joey Krug,Joey Krug
59,59 Plasma & Zepellin - Federico & Jaynti.txt,," 
 
 
 
 
"
59,59 Plasma & Zepellin - Federico & Jaynti.txt,1. Are there any other questions we should be asking?,"1. Are there any other questions we should be asking? 
   1. Patricio Paladino from Zeppelin."
59,59 Plasma & Zepellin - Federico & Jaynti.txt,1. What are your biggest frustrations?,"1. What are your biggest frustrations? 
   1. Websocket isn’t there. It’s not customized. Interface is not that good in geth or parity. 
   2. I used to have my own servers running – my own laptop as a node – very painful, switched to Infura. 
      1. Crawling Infura. 
      2. Infura is unreliable – sometimes they miss the blockhash. 
   1. Why not run my own node? 
      1. Too costly to run Digital Ocean. 
   1. Web3.js – nobody can use it well very flaky. Talked to Fabian about it and offered help. 
      1. People are using, but not contributing. 
   1. UI/UX: 
      1. Everything takes time 15 seconds 1 minute for confirmation. People are impatient. 
         1. Wait for notifications using Dagger. 
      1. How to improve: 
         1. PoS will improve this finality. Still too long for users. 
         2. Provide a notification to users or email if it’s about security. If you’re buying cryptokitties, can send a follow-up email. 
            1. EthAlarm used by Decentraland – 
            2. Status building decentralized notification system. 
   1. Fede has been contributing to Solidity compiler itself for over a year now: 
      1. Mostly making the experience of working with Solidity more pleasant. Life is too short. 
      2. Solidity is quite understaffed –– only two people who are committing, who can merge PRs. 
         1. Fund more developers? 
         2. I’ve contributed, but would love to get paid for it[a][b]. 
      1. Not many people have the availability to take part-time or full-time work at EF (Solidity, Truffle, etc etc). But are available for several hours a week to contribute. 
   1. Promote the people contributing -> funding. 
      1. EF has Dev Grants. Mostly geared towards bigger projects. E.g. porting Ethereum to mobile devices and wearables. 
         1. Also Scalability grants. 
         2. Ongoing funding to ongoing contributor would be interesting. 
   1. Better communications -> what different teams are building right now. e.g. with Plasma there’s different people around the world pushing forward different implementations. 
      1. Weekly core developers meeting – where one can participate. But how to scale that? Need different structure. There’s multiple different teams. There’s also the Gitter channels. There’s ethereum.research forums that’s helped communications in research and fundamental infra problems. 
      2. There’s an issue of time the valuable people don’t have the time to work on these things. 
      3. Someone watching all sources and compiles them into one place: so more people know what to work on. Proof of Work newsletter (WeekInEthereum?). 
      4. The fragility of Solidity tools – lack of proper tooling e.g. comparing language ecosystem between Java and Solidity:  
         1. Linters, refactoring code, working with modules, ... 
         2. Debugging 
            1. This improved recently: 
               1. Latest truffle version includes an embedded debugger. 
               2. Daphubb working on new EVM with debugger built in. 
   1. Gas issues: we sent multiple wrong calls to wrong deployed functions – wasted lot of money 
      1. It doesn’t tell you why your gas is so high – it doesn’t say that you have a weird opcode 
      2. People don’t understand what is gasPrice and gasLimit properly. 
         1. Allow people to set one value – and set gasPrice and gasLimit interactively in the backend."
59,59 Plasma & Zepellin - Federico & Jaynti.txt,1. Who are you and what are you working on?,"1. Who are you and what are you working on? 
   1. Trying to work on Plasma – white paper is unspecified it is not clear yet. 
   2. Started Dagger project – to get events for our UI or backend. 
      1. Use cases: 
         1. If you want to send an email or notification to users. 
         2. If your multisig wallet has incoming or outgoing transaction. 
         3. UI for the front-end a multisig wallet: sent a tx and see it real-time. Make UI/UX better in Ethereum."
59,59 Plasma & Zepellin - Federico & Jaynti.txt,1/23/2018 - Sina & Robbie,1/23/2018 - Sina & Robbie
59,59 Plasma & Zepellin - Federico & Jaynti.txt,Federico & Jaynti,Federico & Jaynti
59,59 Plasma & Zepellin - Federico & Jaynti.txt,[a]Funding developers on the Solidity team is a must -- more so the external collaborators --,[a]Funding developers on the Solidity team is a must -- more so the external collaborators --
59,59 Plasma & Zepellin - Federico & Jaynti.txt,[b]Foundation should fund all external contributors that are helping out -- low hanging fruit!,[b]Foundation should fund all external contributors that are helping out -- low hanging fruit!
